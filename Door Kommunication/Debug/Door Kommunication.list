
Door Kommunication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
<<<<<<< HEAD
  2 .rodata       00002018  0800c354  0800c354  0001c354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e36c  0800e36c  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e36c  0800e36c  0001e36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e374  0800e374  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e374  0800e374  0001e374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e378  0800e378  0001e378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800e37c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e60  200000b0  0800e42c  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f10  0800e42c  00020f10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000348d3  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006197  00000000  00000000  000549b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d80  00000000  00000000  0005ab50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001aa8  00000000  00000000  0005c8d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ee0f  00000000  00000000  0005e378  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020a63  00000000  00000000  0008d187  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00104705  00000000  00000000  000adbea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b22ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a6c  00000000  00000000  001b236c  2**2
=======
  2 .rodata       00001ff0  0800c290  0800c290  0001c290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e280  0800e280  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e280  0800e280  0001e280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e288  0800e288  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e288  0800e288  0001e288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e28c  0800e28c  0001e28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800e290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ec4  200000b0  0800e340  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f74  0800e340  00020f74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034a51  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000061dd  00000000  00000000  00054b31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001da0  00000000  00000000  0005ad10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ac8  00000000  00000000  0005cab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002eed8  00000000  00000000  0005e578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021171  00000000  00000000  0008d450  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001047da  00000000  00000000  000ae5c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b2d9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b0c  00000000  00000000  001b2e18  2**2
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c33c 	.word	0x0800c33c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	0800c33c 	.word	0x0800c33c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <draw_QR>:
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	; 0x30
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	233c      	movs	r3, #60	; 0x3c
 800057a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800057e:	2303      	movs	r3, #3
 8000580:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	221f      	movs	r2, #31
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
<<<<<<< HEAD
 800058e:	f00b faeb 	bl	800bb68 <memset>
	draw_line(box, x, y-2);
=======
 800058e:	f00b fa89 	bl	800baa4 <memset>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8000592:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8000596:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800059a:	1e9a      	subs	r2, r3, #2
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f86e 	bl	8000682 <draw_line>
 80005a6:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80005aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80005ae:	f103 023a 	add.w	r2, r3, #58	; 0x3a
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f863 	bl	8000682 <draw_line>
 80005bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80005c0:	1e99      	subs	r1, r3, #2
 80005c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80005c6:	1e9a      	subs	r2, r3, #2
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f834 	bl	800063a <draw_line_down>
 80005d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80005d6:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 80005da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80005de:	1e9a      	subs	r2, r3, #2
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f828 	bl	800063a <draw_line_down>
 80005ea:	2300      	movs	r3, #0
 80005ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80005f0:	e019      	b.n	8000626 <draw_QR+0xb6>
 80005f2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80005f6:	4613      	mov	r3, r2
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	1a9b      	subs	r3, r3, r2
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	4413      	add	r3, r2
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8000608:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800060c:	4618      	mov	r0, r3
 800060e:	f000 f838 	bl	8000682 <draw_line>
 8000612:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000616:	3302      	adds	r3, #2
 8000618:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800061c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000620:	3301      	adds	r3, #1
 8000622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800062a:	2b1c      	cmp	r3, #28
 800062c:	d9e1      	bls.n	80005f2 <draw_QR+0x82>
<<<<<<< HEAD
	}
	ssd1306_UpdateScreen();
 800062e:	f001 fd47 	bl	80020c0 <ssd1306_UpdateScreen>
}
=======
 800062e:	f001 fce5 	bl	8001ffc <ssd1306_UpdateScreen>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8000632:	bf00      	nop
 8000634:	3730      	adds	r7, #48	; 0x30
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <draw_line_down>:
 800063a:	b580      	push	{r7, lr}
 800063c:	b084      	sub	sp, #16
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	460b      	mov	r3, r1
 8000644:	70fb      	strb	r3, [r7, #3]
 8000646:	4613      	mov	r3, r2
 8000648:	70bb      	strb	r3, [r7, #2]
 800064a:	2300      	movs	r3, #0
 800064c:	73fb      	strb	r3, [r7, #15]
 800064e:	e011      	b.n	8000674 <draw_line_down+0x3a>
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d105      	bne.n	8000668 <draw_line_down+0x2e>
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	78ba      	ldrb	r2, [r7, #2]
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f831 	bl	80006ca <draw_square>
 8000668:	78bb      	ldrb	r3, [r7, #2]
 800066a:	3302      	adds	r3, #2
 800066c:	70bb      	strb	r3, [r7, #2]
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	3301      	adds	r3, #1
 8000672:	73fb      	strb	r3, [r7, #15]
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2b1e      	cmp	r3, #30
 8000678:	d9ea      	bls.n	8000650 <draw_line_down+0x16>
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <draw_line>:
 8000682:	b580      	push	{r7, lr}
 8000684:	b084      	sub	sp, #16
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	460b      	mov	r3, r1
 800068c:	70fb      	strb	r3, [r7, #3]
 800068e:	4613      	mov	r3, r2
 8000690:	70bb      	strb	r3, [r7, #2]
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
 8000696:	e011      	b.n	80006bc <draw_line+0x3a>
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d105      	bne.n	80006b0 <draw_line+0x2e>
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	78ba      	ldrb	r2, [r7, #2]
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f80d 	bl	80006ca <draw_square>
 80006b0:	78fb      	ldrb	r3, [r7, #3]
 80006b2:	3302      	adds	r3, #2
 80006b4:	70fb      	strb	r3, [r7, #3]
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	3301      	adds	r3, #1
 80006ba:	73fb      	strb	r3, [r7, #15]
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	2b1c      	cmp	r3, #28
 80006c0:	d9ea      	bls.n	8000698 <draw_line+0x16>
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <draw_square>:
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b084      	sub	sp, #16
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	4603      	mov	r3, r0
 80006d2:	460a      	mov	r2, r1
 80006d4:	71fb      	strb	r3, [r7, #7]
 80006d6:	4613      	mov	r3, r2
 80006d8:	71bb      	strb	r3, [r7, #6]
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	73fb      	strb	r3, [r7, #15]
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	73bb      	strb	r3, [r7, #14]
 80006e2:	2302      	movs	r3, #2
 80006e4:	737b      	strb	r3, [r7, #13]
 80006e6:	e014      	b.n	8000712 <draw_square+0x48>
 80006e8:	79bb      	ldrb	r3, [r7, #6]
 80006ea:	73bb      	strb	r3, [r7, #14]
 80006ec:	e008      	b.n	8000700 <draw_square+0x36>
 80006ee:	7bb9      	ldrb	r1, [r7, #14]
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2201      	movs	r2, #1
 80006f4:	4618      	mov	r0, r3
<<<<<<< HEAD
 80006f6:	f001 fd09 	bl	800210c <ssd1306_DrawPixel>
			j++;
=======
 80006f6:	f001 fca7 	bl	8002048 <ssd1306_DrawPixel>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	3301      	adds	r3, #1
 80006fe:	73bb      	strb	r3, [r7, #14]
 8000700:	7bba      	ldrb	r2, [r7, #14]
 8000702:	79b9      	ldrb	r1, [r7, #6]
 8000704:	7b7b      	ldrb	r3, [r7, #13]
 8000706:	440b      	add	r3, r1
 8000708:	429a      	cmp	r2, r3
 800070a:	dbf0      	blt.n	80006ee <draw_square+0x24>
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	3301      	adds	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	7bfa      	ldrb	r2, [r7, #15]
 8000714:	79f9      	ldrb	r1, [r7, #7]
 8000716:	7b7b      	ldrb	r3, [r7, #13]
 8000718:	440b      	add	r3, r1
 800071a:	429a      	cmp	r2, r3
 800071c:	dbe4      	blt.n	80006e8 <draw_square+0x1e>
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <menu_QR>:
	}

	HAL_Delay(100);
}

uint8_t menu_QR(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 800072c:	2000      	movs	r0, #0
 800072e:	f001 fca5 	bl	800207c <ssd1306_Fill>
	draw_QR(line_QR);
 8000732:	4809      	ldr	r0, [pc, #36]	; (8000758 <menu_QR+0x30>)
 8000734:	f7ff ff1c 	bl	8000570 <draw_QR>
	ssd1306_SetCursor(2, 54);
 8000738:	2136      	movs	r1, #54	; 0x36
 800073a:	2002      	movs	r0, #2
 800073c:	f001 fdf4 	bl	8002328 <ssd1306_SetCursor>
	ssd1306_WriteString("BACK", Font_M, White);
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <menu_QR+0x34>)
 8000742:	2301      	movs	r3, #1
 8000744:	ca06      	ldmia	r2, {r1, r2}
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <menu_QR+0x38>)
 8000748:	f001 fdc8 	bl	80022dc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
<<<<<<< HEAD
 800074c:	f001 fcb8 	bl	80020c0 <ssd1306_UpdateScreen>
			value = value - 16;
			ssd1306_WriteCommand(0x81);
			ssd1306_WriteCommand(value);
		}
=======
 800074c:	f001 fc56 	bl	8001ffc <ssd1306_UpdateScreen>
		ssd1306_WriteCommand(value);
		HAL_Delay(100);
	}
=======
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
		HAL_Delay(100);*/
}
 8000750:	bf00      	nop
 8000752:	4618      	mov	r0, r3
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
<<<<<<< HEAD
 8000758:	0800c4e8 	.word	0x0800c4e8
=======
 8000758:	0800c3fc 	.word	0x0800c3fc
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 800075c:	20000008 	.word	0x20000008
 8000760:	0800c384 	.word	0x0800c384

08000764 <MX_GPIO_Init>:
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	; 0x30
 8000768:	af00      	add	r7, sp, #0
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
 800077a:	4b98      	ldr	r3, [pc, #608]	; (80009dc <MX_GPIO_Init+0x278>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a97      	ldr	r2, [pc, #604]	; (80009dc <MX_GPIO_Init+0x278>)
 8000780:	f043 0310 	orr.w	r3, r3, #16
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b95      	ldr	r3, [pc, #596]	; (80009dc <MX_GPIO_Init+0x278>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0310 	and.w	r3, r3, #16
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	4b92      	ldr	r3, [pc, #584]	; (80009dc <MX_GPIO_Init+0x278>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a91      	ldr	r2, [pc, #580]	; (80009dc <MX_GPIO_Init+0x278>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b8f      	ldr	r3, [pc, #572]	; (80009dc <MX_GPIO_Init+0x278>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <MX_GPIO_Init+0x278>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a8b      	ldr	r2, [pc, #556]	; (80009dc <MX_GPIO_Init+0x278>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b89      	ldr	r3, [pc, #548]	; (80009dc <MX_GPIO_Init+0x278>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	4b86      	ldr	r3, [pc, #536]	; (80009dc <MX_GPIO_Init+0x278>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a85      	ldr	r2, [pc, #532]	; (80009dc <MX_GPIO_Init+0x278>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b83      	ldr	r3, [pc, #524]	; (80009dc <MX_GPIO_Init+0x278>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	4b80      	ldr	r3, [pc, #512]	; (80009dc <MX_GPIO_Init+0x278>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a7f      	ldr	r2, [pc, #508]	; (80009dc <MX_GPIO_Init+0x278>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <MX_GPIO_Init+0x278>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <MX_GPIO_Init+0x278>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a79      	ldr	r2, [pc, #484]	; (80009dc <MX_GPIO_Init+0x278>)
 80007f8:	f043 0308 	orr.w	r3, r3, #8
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b77      	ldr	r3, [pc, #476]	; (80009dc <MX_GPIO_Init+0x278>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0308 	and.w	r3, r3, #8
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2200      	movs	r2, #0
 800080c:	f240 1109 	movw	r1, #265	; 0x109
 8000810:	4873      	ldr	r0, [pc, #460]	; (80009e0 <MX_GPIO_Init+0x27c>)
<<<<<<< HEAD
 8000812:	f002 fbf1 	bl	8002ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	210c      	movs	r1, #12
 800081a:	4872      	ldr	r0, [pc, #456]	; (80009e4 <MX_GPIO_Init+0x280>)
 800081c:	f002 fbec 	bl	8002ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000826:	4870      	ldr	r0, [pc, #448]	; (80009e8 <MX_GPIO_Init+0x284>)
 8000828:	f002 fbe6 	bl	8002ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000832:	486d      	ldr	r0, [pc, #436]	; (80009e8 <MX_GPIO_Init+0x284>)
 8000834:	f002 fbe0 	bl	8002ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	2180      	movs	r1, #128	; 0x80
 800083c:	486b      	ldr	r0, [pc, #428]	; (80009ec <MX_GPIO_Init+0x288>)
 800083e:	f002 fbdb 	bl	8002ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
=======
 8000812:	f002 fb8f 	bl	8002f34 <HAL_GPIO_WritePin>
 8000816:	2200      	movs	r2, #0
 8000818:	210c      	movs	r1, #12
 800081a:	4872      	ldr	r0, [pc, #456]	; (80009e4 <MX_GPIO_Init+0x280>)
 800081c:	f002 fb8a 	bl	8002f34 <HAL_GPIO_WritePin>
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000826:	4870      	ldr	r0, [pc, #448]	; (80009e8 <MX_GPIO_Init+0x284>)
 8000828:	f002 fb84 	bl	8002f34 <HAL_GPIO_WritePin>
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000832:	486d      	ldr	r0, [pc, #436]	; (80009e8 <MX_GPIO_Init+0x284>)
 8000834:	f002 fb7e 	bl	8002f34 <HAL_GPIO_WritePin>
 8000838:	2200      	movs	r2, #0
 800083a:	2180      	movs	r1, #128	; 0x80
 800083c:	486b      	ldr	r0, [pc, #428]	; (80009ec <MX_GPIO_Init+0x288>)
 800083e:	f002 fb79 	bl	8002f34 <HAL_GPIO_WritePin>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8000842:	2308      	movs	r3, #8
 8000844:	61fb      	str	r3, [r7, #28]
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
 800084e:	2302      	movs	r3, #2
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	4861      	ldr	r0, [pc, #388]	; (80009e0 <MX_GPIO_Init+0x27c>)
<<<<<<< HEAD
 800085a:	f002 fa0d 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
=======
 800085a:	f002 f9ab 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 800085e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000862:	61fb      	str	r3, [r7, #28]
 8000864:	4b62      	ldr	r3, [pc, #392]	; (80009f0 <MX_GPIO_Init+0x28c>)
 8000866:	623b      	str	r3, [r7, #32]
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	485d      	ldr	r0, [pc, #372]	; (80009e8 <MX_GPIO_Init+0x284>)
<<<<<<< HEAD
 8000874:	f002 fa00 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
=======
 8000874:	f002 f99e 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8000878:	2307      	movs	r3, #7
 800087a:	61fb      	str	r3, [r7, #28]
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4857      	ldr	r0, [pc, #348]	; (80009e8 <MX_GPIO_Init+0x284>)
<<<<<<< HEAD
 800088c:	f002 f9f4 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
=======
 800088c:	f002 f992 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8000890:	2308      	movs	r3, #8
 8000892:	61fb      	str	r3, [r7, #28]
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< HEAD
 80008a6:	f002 f9e7 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
=======
 80008a6:	f002 f985 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 80008aa:	2310      	movs	r3, #16
 80008ac:	61fb      	str	r3, [r7, #28]
 80008ae:	4b50      	ldr	r3, [pc, #320]	; (80009f0 <MX_GPIO_Init+0x28c>)
 80008b0:	623b      	str	r3, [r7, #32]
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< HEAD
 80008c0:	f002 f9da 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
=======
 80008c0:	f002 f978 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 80008c4:	2320      	movs	r3, #32
 80008c6:	61fb      	str	r3, [r7, #28]
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
 80008cc:	2302      	movs	r3, #2
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< HEAD
 80008da:	f002 f9cd 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
=======
 80008da:	f002 f96b 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 80008de:	2304      	movs	r3, #4
 80008e0:	61fb      	str	r3, [r7, #28]
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
 80008e6:	2301      	movs	r3, #1
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
 80008ea:	2303      	movs	r3, #3
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	483b      	ldr	r0, [pc, #236]	; (80009e4 <MX_GPIO_Init+0x280>)
<<<<<<< HEAD
 80008f6:	f002 f9bf 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
=======
 80008f6:	f002 f95d 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 80008fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fe:	61fb      	str	r3, [r7, #28]
 8000900:	2301      	movs	r3, #1
 8000902:	623b      	str	r3, [r7, #32]
 8000904:	2301      	movs	r3, #1
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
 8000908:	2303      	movs	r3, #3
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4833      	ldr	r0, [pc, #204]	; (80009e0 <MX_GPIO_Init+0x27c>)
<<<<<<< HEAD
 8000914:	f002 f9b0 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
=======
 8000914:	f002 f94e 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8000918:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800091c:	61fb      	str	r3, [r7, #28]
 800091e:	2301      	movs	r3, #1
 8000920:	623b      	str	r3, [r7, #32]
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	482d      	ldr	r0, [pc, #180]	; (80009e8 <MX_GPIO_Init+0x284>)
<<<<<<< HEAD
 8000932:	f002 f9a1 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
=======
 8000932:	f002 f93f 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8000936:	2305      	movs	r3, #5
 8000938:	61fb      	str	r3, [r7, #28]
 800093a:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <MX_GPIO_Init+0x28c>)
 800093c:	623b      	str	r3, [r7, #32]
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4828      	ldr	r0, [pc, #160]	; (80009ec <MX_GPIO_Init+0x288>)
<<<<<<< HEAD
 800094a:	f002 f995 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
=======
 800094a:	f002 f933 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	61fb      	str	r3, [r7, #28]
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
 800095a:	2303      	movs	r3, #3
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4821      	ldr	r0, [pc, #132]	; (80009ec <MX_GPIO_Init+0x288>)
<<<<<<< HEAD
 8000966:	f002 f987 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
=======
 8000966:	f002 f925 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 800096a:	2308      	movs	r3, #8
 800096c:	61fb      	str	r3, [r7, #28]
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4818      	ldr	r0, [pc, #96]	; (80009e4 <MX_GPIO_Init+0x280>)
<<<<<<< HEAD
 8000982:	f002 f979 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
=======
 8000982:	f002 f917 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8000986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800098a:	61fb      	str	r3, [r7, #28]
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_GPIO_Init+0x28c>)
 800098e:	623b      	str	r3, [r7, #32]
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4812      	ldr	r0, [pc, #72]	; (80009e4 <MX_GPIO_Init+0x280>)
<<<<<<< HEAD
 800099c:	f002 f96c 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
=======
 800099c:	f002 f90a 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 80009a0:	2301      	movs	r3, #1
 80009a2:	61fb      	str	r3, [r7, #28]
 80009a4:	2301      	movs	r3, #1
 80009a6:	623b      	str	r3, [r7, #32]
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	480a      	ldr	r0, [pc, #40]	; (80009e0 <MX_GPIO_Init+0x27c>)
<<<<<<< HEAD
 80009b8:	f002 f95e 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
=======
 80009b8:	f002 f8fc 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 80009bc:	2302      	movs	r3, #2
 80009be:	61fb      	str	r3, [r7, #28]
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_GPIO_Init+0x28c>)
 80009c2:	623b      	str	r3, [r7, #32]
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_GPIO_Init+0x27c>)
<<<<<<< HEAD
 80009d0:	f002 f952 	bl	8002c78 <HAL_GPIO_Init>

}
=======
 80009d0:	f002 f8f0 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 80009d4:	bf00      	nop
 80009d6:	3730      	adds	r7, #48	; 0x30
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021000 	.word	0x40021000
 80009e0:	48001000 	.word	0x48001000
 80009e4:	48000400 	.word	0x48000400
 80009e8:	48000800 	.word	0x48000800
 80009ec:	48000c00 	.word	0x48000c00
 80009f0:	10120000 	.word	0x10120000

080009f4 <MX_I2C1_Init>:
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_I2C1_Init+0x74>)
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <MX_I2C1_Init+0x78>)
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <MX_I2C1_Init+0x7c>)
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
 8000a2e:	480e      	ldr	r0, [pc, #56]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a30:	f003 ff1a 	bl	8004868 <HAL_I2C_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C1_Init+0x4a>
 8000a3a:	f000 fa73 	bl	8000f24 <Error_Handler>
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a42:	f004 fa7d 	bl	8004f40 <HAL_I2CEx_ConfigAnalogFilter>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_I2C1_Init+0x5c>
 8000a4c:	f000 fa6a 	bl	8000f24 <Error_Handler>
 8000a50:	2100      	movs	r1, #0
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a54:	f004 fabf 	bl	8004fd6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_I2C1_Init+0x6e>
 8000a5e:	f000 fa61 	bl	8000f24 <Error_Handler>
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000504 	.word	0x20000504
 8000a6c:	40005400 	.word	0x40005400
 8000a70:	00404c74 	.word	0x00404c74

08000a74 <MX_I2C2_Init>:
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <MX_I2C2_Init+0x78>)
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000a80:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <MX_I2C2_Init+0x7c>)
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	61da      	str	r2, [r3, #28]
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	621a      	str	r2, [r3, #32]
 8000aae:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000ab0:	f003 feda 	bl	8004868 <HAL_I2C_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_I2C2_Init+0x4a>
 8000aba:	f000 fa33 	bl	8000f24 <Error_Handler>
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000ac2:	f004 fa3d 	bl	8004f40 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_I2C2_Init+0x5c>
 8000acc:	f000 fa2a 	bl	8000f24 <Error_Handler>
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000ad4:	f004 fa7f 	bl	8004fd6 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_I2C2_Init+0x6e>
 8000ade:	f000 fa21 	bl	8000f24 <Error_Handler>
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000550 	.word	0x20000550
 8000aec:	40005800 	.word	0x40005800
 8000af0:	00404c74 	.word	0x00404c74

08000af4 <HAL_I2C_MspInit>:
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	; 0x30
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a2e      	ldr	r2, [pc, #184]	; (8000bcc <HAL_I2C_MspInit+0xd8>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d128      	bne.n	8000b68 <HAL_I2C_MspInit+0x74>
 8000b16:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <HAL_I2C_MspInit+0xdc>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a2d      	ldr	r2, [pc, #180]	; (8000bd0 <HAL_I2C_MspInit+0xdc>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <HAL_I2C_MspInit+0xdc>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	23c0      	movs	r3, #192	; 0xc0
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	2312      	movs	r3, #18
 8000b34:	623b      	str	r3, [r7, #32]
 8000b36:	2301      	movs	r3, #1
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b3e:	2304      	movs	r3, #4
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4822      	ldr	r0, [pc, #136]	; (8000bd4 <HAL_I2C_MspInit+0xe0>)
<<<<<<< HEAD
 8000b4a:	f002 f895 	bl	8002c78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
=======
 8000b4a:	f002 f833 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <HAL_I2C_MspInit+0xdc>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b52:	4a1f      	ldr	r2, [pc, #124]	; (8000bd0 <HAL_I2C_MspInit+0xdc>)
 8000b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b58:	6593      	str	r3, [r2, #88]	; 0x58
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <HAL_I2C_MspInit+0xdc>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	e02d      	b.n	8000bc4 <HAL_I2C_MspInit+0xd0>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a1a      	ldr	r2, [pc, #104]	; (8000bd8 <HAL_I2C_MspInit+0xe4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d128      	bne.n	8000bc4 <HAL_I2C_MspInit+0xd0>
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_I2C_MspInit+0xdc>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <HAL_I2C_MspInit+0xdc>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_I2C_MspInit+0xdc>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b8e:	61fb      	str	r3, [r7, #28]
 8000b90:	2312      	movs	r3, #18
 8000b92:	623b      	str	r3, [r7, #32]
 8000b94:	2301      	movs	r3, #1
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
 8000b98:	2303      	movs	r3, #3
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <HAL_I2C_MspInit+0xe0>)
<<<<<<< HEAD
 8000ba8:	f002 f866 	bl	8002c78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
=======
 8000ba8:	f002 f804 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_I2C_MspInit+0xdc>)
 8000bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_I2C_MspInit+0xdc>)
 8000bb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bb6:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_I2C_MspInit+0xdc>)
 8000bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	bf00      	nop
 8000bc6:	3730      	adds	r7, #48	; 0x30
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40005400 	.word	0x40005400
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	48000400 	.word	0x48000400
 8000bd8:	40005800 	.word	0x40005800

08000bdc <MX_LCD_Init>:
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_LCD_Init+0x68>)
 8000be2:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <MX_LCD_Init+0x6c>)
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_LCD_Init+0x68>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_LCD_Init+0x68>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_LCD_Init+0x68>)
 8000bf4:	220c      	movs	r2, #12
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_LCD_Init+0x68>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_LCD_Init+0x68>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_LCD_Init+0x68>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_LCD_Init+0x68>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_LCD_Init+0x68>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_LCD_Init+0x68>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_LCD_Init+0x68>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	629a      	str	r2, [r3, #40]	; 0x28
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_LCD_Init+0x68>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_LCD_Init+0x68>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_LCD_Init+0x68>)
 8000c30:	f004 fa1e 	bl	8005070 <HAL_LCD_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_LCD_Init+0x62>
 8000c3a:	f000 f973 	bl	8000f24 <Error_Handler>
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000059c 	.word	0x2000059c
 8000c48:	40002400 	.word	0x40002400

08000c4c <HAL_LCD_MspInit>:
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	; 0x30
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a44      	ldr	r2, [pc, #272]	; (8000d7c <HAL_LCD_MspInit+0x130>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	f040 8081 	bne.w	8000d72 <HAL_LCD_MspInit+0x126>
 8000c70:	4b43      	ldr	r3, [pc, #268]	; (8000d80 <HAL_LCD_MspInit+0x134>)
 8000c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c74:	4a42      	ldr	r2, [pc, #264]	; (8000d80 <HAL_LCD_MspInit+0x134>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c7c:	4b40      	ldr	r3, [pc, #256]	; (8000d80 <HAL_LCD_MspInit+0x134>)
 8000c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	4b3d      	ldr	r3, [pc, #244]	; (8000d80 <HAL_LCD_MspInit+0x134>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8c:	4a3c      	ldr	r2, [pc, #240]	; (8000d80 <HAL_LCD_MspInit+0x134>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c94:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <HAL_LCD_MspInit+0x134>)
 8000c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <HAL_LCD_MspInit+0x134>)
 8000ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca4:	4a36      	ldr	r2, [pc, #216]	; (8000d80 <HAL_LCD_MspInit+0x134>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cac:	4b34      	ldr	r3, [pc, #208]	; (8000d80 <HAL_LCD_MspInit+0x134>)
 8000cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	4b31      	ldr	r3, [pc, #196]	; (8000d80 <HAL_LCD_MspInit+0x134>)
 8000cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbc:	4a30      	ldr	r2, [pc, #192]	; (8000d80 <HAL_LCD_MspInit+0x134>)
 8000cbe:	f043 0302 	orr.w	r3, r3, #2
 8000cc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc4:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <HAL_LCD_MspInit+0x134>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <HAL_LCD_MspInit+0x134>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd4:	4a2a      	ldr	r2, [pc, #168]	; (8000d80 <HAL_LCD_MspInit+0x134>)
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cdc:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <HAL_LCD_MspInit+0x134>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce0:	f003 0308 	and.w	r3, r3, #8
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000cec:	61fb      	str	r3, [r7, #28]
 8000cee:	2302      	movs	r3, #2
 8000cf0:	623b      	str	r3, [r7, #32]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cfa:	230b      	movs	r3, #11
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	481f      	ldr	r0, [pc, #124]	; (8000d84 <HAL_LCD_MspInit+0x138>)
<<<<<<< HEAD
 8000d06:	f001 ffb7 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
=======
 8000d06:	f001 ff55 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8000d0a:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000d0e:	61fb      	str	r3, [r7, #28]
 8000d10:	2302      	movs	r3, #2
 8000d12:	623b      	str	r3, [r7, #32]
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d1c:	230b      	movs	r3, #11
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< HEAD
 8000d2a:	f001 ffa5 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
=======
 8000d2a:	f001 ff43 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8000d2e:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000d32:	61fb      	str	r3, [r7, #28]
 8000d34:	2302      	movs	r3, #2
 8000d36:	623b      	str	r3, [r7, #32]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d40:	230b      	movs	r3, #11
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480f      	ldr	r0, [pc, #60]	; (8000d88 <HAL_LCD_MspInit+0x13c>)
<<<<<<< HEAD
 8000d4c:	f001 ff94 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
=======
 8000d4c:	f001 ff32 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8000d50:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	2302      	movs	r3, #2
 8000d58:	623b      	str	r3, [r7, #32]
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d62:	230b      	movs	r3, #11
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4807      	ldr	r0, [pc, #28]	; (8000d8c <HAL_LCD_MspInit+0x140>)
<<<<<<< HEAD
 8000d6e:	f001 ff83 	bl	8002c78 <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
=======
 8000d6e:	f001 ff21 	bl	8002bb4 <HAL_GPIO_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8000d72:	bf00      	nop
 8000d74:	3730      	adds	r7, #48	; 0x30
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40002400 	.word	0x40002400
 8000d80:	40021000 	.word	0x40021000
 8000d84:	48000800 	.word	0x48000800
 8000d88:	48000400 	.word	0x48000400
 8000d8c:	48000c00 	.word	0x48000c00

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
<<<<<<< HEAD
  HAL_Init();
 8000d94:	f001 fdac 	bl	80028f0 <HAL_Init>
=======

	HAL_Init();
 8000d94:	f001 fd4a 	bl	800282c <HAL_Init>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f81a 	bl	8000dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9c:	f7ff fce2 	bl	8000764 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000da0:	f7ff fe28 	bl	80009f4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000da4:	f7ff fe66 	bl	8000a74 <MX_I2C2_Init>
  MX_LCD_Init();
 8000da8:	f7ff ff18 	bl	8000bdc <MX_LCD_Init>
  MX_QUADSPI_Init();
 8000dac:	f000 fe3a 	bl	8001a24 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000db0:	f000 ff1a 	bl	8001be8 <MX_SAI1_Init>
  MX_SPI2_Init();
 8000db4:	f001 f838 	bl	8001e28 <MX_SPI2_Init>
  MX_USB_HOST_Init();
 8000db8:	f00a fb6c 	bl	800b494 <MX_USB_HOST_Init>
  MX_UART4_Init();
 8000dbc:	f001 fcfc 	bl	80027b8 <MX_UART4_Init>
  MX_RTC_Init();
 8000dc0:	f000 fe9a 	bl	8001af8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
  Test_program();
#else
  project();
 8000dc4:	f000 f8b6 	bl	8000f34 <project>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000dc8:	f00a fb8a 	bl	800b4e0 <MX_USB_HOST_Process>
 8000dcc:	e7fc      	b.n	8000dc8 <main+0x38>
	...

08000dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b0b8      	sub	sp, #224	; 0xe0
 8000dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dda:	2244      	movs	r2, #68	; 0x44
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f00a fec2 	bl	800bb68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df4:	463b      	mov	r3, r7
 8000df6:	2288      	movs	r2, #136	; 0x88
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f00a feb4 	bl	800bb68 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000e00:	f004 faa6 	bl	8005350 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e04:	4b45      	ldr	r3, [pc, #276]	; (8000f1c <SystemClock_Config+0x14c>)
 8000e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e0a:	4a44      	ldr	r2, [pc, #272]	; (8000f1c <SystemClock_Config+0x14c>)
 8000e0c:	f023 0318 	bic.w	r3, r3, #24
 8000e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000e14:	231c      	movs	r3, #28
 8000e16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e20:	2301      	movs	r3, #1
 8000e22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e26:	2301      	movs	r3, #1
 8000e28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e32:	2360      	movs	r3, #96	; 0x60
 8000e34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e44:	2301      	movs	r3, #1
 8000e46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000e4a:	2314      	movs	r3, #20
 8000e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e50:	2307      	movs	r3, #7
 8000e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e56:	2302      	movs	r3, #2
 8000e58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e66:	4618      	mov	r0, r3
 8000e68:	f004 fbbe 	bl	80055e8 <HAL_RCC_OscConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e72:	f000 f857 	bl	8000f24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e76:	230f      	movs	r3, #15
 8000e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e94:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e98:	2101      	movs	r1, #1
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f004 ff54 	bl	8005d48 <HAL_RCC_ClockConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000ea6:	f000 f83d 	bl	8000f24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <SystemClock_Config+0x150>)
 8000eac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000ec6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000eca:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000ed4:	2318      	movs	r3, #24
 8000ed6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ed8:	2307      	movs	r3, #7
 8000eda:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 8000ee4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ee8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eea:	463b      	mov	r3, r7
 8000eec:	4618      	mov	r0, r3
 8000eee:	f005 f92f 	bl	8006150 <HAL_RCCEx_PeriphCLKConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000ef8:	f000 f814 	bl	8000f24 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000efc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f00:	f004 fa44 	bl	800538c <HAL_PWREx_ControlVoltageScaling>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0x13e>
  {
    Error_Handler();
 8000f0a:	f000 f80b 	bl	8000f24 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f0e:	f006 f87d 	bl	800700c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f12:	bf00      	nop
 8000f14:	37e0      	adds	r7, #224	; 0xe0
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	000228c8 	.word	0x000228c8

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <project>:
#include "ssd1306.h"

/** @brief project, the main program
@author  Daniel Gripenstedt*/
void project()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
	/*initiate stuff*/
	BSP_LCD_GLASS_Init();
 8000f3a:	f001 fa5b 	bl	80023f4 <BSP_LCD_GLASS_Init>
	BSP_LED_Init(LED4);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f001 fa0a 	bl	8002358 <BSP_LED_Init>
	BSP_LED_Init(LED5);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f001 fa07 	bl	8002358 <BSP_LED_Init>
	ssd1306_Init();
 8000f4a:	f001 f829 	bl	8001fa0 <ssd1306_Init>
	HAL_Delay(1000);
 8000f4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f52:	f001 fd45 	bl	80029e0 <HAL_Delay>
	uint8_t TX_IP_OF [] = "AT+CIFSR\r\n";	//ip adress of esp
 8000f56:	4a66      	ldr	r2, [pc, #408]	; (80010f0 <project+0x1bc>)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f5c:	c303      	stmia	r3!, {r0, r1}
 8000f5e:	801a      	strh	r2, [r3, #0]
 8000f60:	3302      	adds	r3, #2
 8000f62:	0c12      	lsrs	r2, r2, #16
 8000f64:	701a      	strb	r2, [r3, #0]
	static RTC_TimeTypeDef sTime;
	static RTC_DateTypeDef sDate;
	uint8_t prev_second;
	uint8_t second_count = 60;	//counter varible for how many seconds has pasted since the last message
 8000f66:	233c      	movs	r3, #60	; 0x3c
 8000f68:	73bb      	strb	r3, [r7, #14]
	const uint8_t TIME_INTERVAL = 60;
 8000f6a:	233c      	movs	r3, #60	; 0x3c
 8000f6c:	733b      	strb	r3, [r7, #12]
	const uint8_t QR_DELAY = 10;
 8000f6e:	230a      	movs	r3, #10
 8000f70:	72fb      	strb	r3, [r7, #11]
	uint8_t value = 0xff;
 8000f72:	23ff      	movs	r3, #255	; 0xff
 8000f74:	737b      	strb	r3, [r7, #13]

	HAL_Delay(1000);
 8000f76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f7a:	f001 fd31 	bl	80029e0 <HAL_Delay>
	//if (esp_find_ok(&TX_IP_OF, sizeof(TX_IP_OF)) == false)
	if (esp_ok() == false)
 8000f7e:	f000 fcc5 	bl	800190c <esp_ok>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <project+0x58>
	{
		esp_error_handler();	//handle esp error
 8000f88:	f000 fd2e 	bl	80019e8 <esp_error_handler>
	}
	//connect_WIFI();	//connect esp to router via wifi, remove comment if the ESP is not already connected. The ESP will remember the network

	/*set up the time*/
	HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	4959      	ldr	r1, [pc, #356]	; (80010f4 <project+0x1c0>)
 8000f90:	4859      	ldr	r0, [pc, #356]	; (80010f8 <project+0x1c4>)
 8000f92:	f006 fc08 	bl	80077a6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BIN);
 8000f96:	2200      	movs	r2, #0
 8000f98:	4958      	ldr	r1, [pc, #352]	; (80010fc <project+0x1c8>)
 8000f9a:	4857      	ldr	r0, [pc, #348]	; (80010f8 <project+0x1c4>)
 8000f9c:	f006 fce6 	bl	800796c <HAL_RTC_GetDate>

	while(1) //super loop
	{
		if (message_timer(sTime.Seconds, prev_second) == true)	//if a second has passed, increment second_count
 8000fa0:	4b54      	ldr	r3, [pc, #336]	; (80010f4 <project+0x1c0>)
 8000fa2:	789b      	ldrb	r3, [r3, #2]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4610      	mov	r0, r2
 8000fac:	f000 fd06 	bl	80019bc <message_timer>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d102      	bne.n	8000fbc <project+0x88>
		{
			second_count++;
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	73bb      	strb	r3, [r7, #14]
		}

		if (second_count >= TIME_INTERVAL)	//if 5 or more seconds has passed, request a new message and display it on the OLED
 8000fbc:	7bba      	ldrb	r2, [r7, #14]
 8000fbe:	7b3b      	ldrb	r3, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d30a      	bcc.n	8000fda <project+0xa6>
		{
			if (esp_ok() == false)
 8000fc4:	f000 fca2 	bl	800190c <esp_ok>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <project+0x9e>
			{
				esp_error_handler();	//handle esp error
 8000fce:	f000 fd0b 	bl	80019e8 <esp_error_handler>
			}

			second_count = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73bb      	strb	r3, [r7, #14]
			esp_as_TCP();
 8000fd6:	f000 f899 	bl	800110c <esp_as_TCP>
		}

		prev_second = sTime.Seconds;
 8000fda:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <project+0x1c0>)
 8000fdc:	789b      	ldrb	r3, [r3, #2]
 8000fde:	73fb      	strb	r3, [r7, #15]
		HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4944      	ldr	r1, [pc, #272]	; (80010f4 <project+0x1c0>)
 8000fe4:	4844      	ldr	r0, [pc, #272]	; (80010f8 <project+0x1c4>)
 8000fe6:	f006 fbde 	bl	80077a6 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BIN);
 8000fea:	2200      	movs	r2, #0
 8000fec:	4943      	ldr	r1, [pc, #268]	; (80010fc <project+0x1c8>)
 8000fee:	4842      	ldr	r0, [pc, #264]	; (80010f8 <project+0x1c4>)
 8000ff0:	f006 fcbc 	bl	800796c <HAL_RTC_GetDate>

		if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3) == 1)
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffa:	f001 ffe5 	bl	8002fc8 <HAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b01      	cmp	r3, #1
 8001002:	d1cd      	bne.n	8000fa0 <project+0x6c>
		{
			second_count = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	73bb      	strb	r3, [r7, #14]
			HAL_Delay(300);
 8001008:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800100c:	f001 fce8 	bl	80029e0 <HAL_Delay>
			menu_QR();
 8001010:	f7ff fb8a 	bl	8000728 <menu_QR>
			while(1)
				{
				value = value - 4;
 8001014:	7b7b      	ldrb	r3, [r7, #13]
 8001016:	3b04      	subs	r3, #4
 8001018:	737b      	strb	r3, [r7, #13]
				ssd1306_WriteCommand(0x81);
 800101a:	2081      	movs	r0, #129	; 0x81
 800101c:	f000 ff8e 	bl	8001f3c <ssd1306_WriteCommand>
				ssd1306_WriteCommand(value);
 8001020:	7b7b      	ldrb	r3, [r7, #13]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 ff8a 	bl	8001f3c <ssd1306_WriteCommand>
				HAL_Delay(100);
 8001028:	2064      	movs	r0, #100	; 0x64
 800102a:	f001 fcd9 	bl	80029e0 <HAL_Delay>
					if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3) == 1) {
 800102e:	2108      	movs	r1, #8
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f001 ffc8 	bl	8002fc8 <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	2b01      	cmp	r3, #1
 800103c:	d109      	bne.n	8001052 <project+0x11e>
						value = 0xff;
 800103e:	23ff      	movs	r3, #255	; 0xff
 8001040:	737b      	strb	r3, [r7, #13]
					ssd1306_WriteCommand(0x81);
 8001042:	2081      	movs	r0, #129	; 0x81
 8001044:	f000 ff7a 	bl	8001f3c <ssd1306_WriteCommand>
					ssd1306_WriteCommand(value);
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	4618      	mov	r0, r3
 800104c:	f000 ff76 	bl	8001f3c <ssd1306_WriteCommand>
					break;
 8001050:	e029      	b.n	80010a6 <project+0x172>
					}
					if (message_timer(sTime.Seconds, prev_second) == true)	//if a second has passed, increment second_count
 8001052:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <project+0x1c0>)
 8001054:	789b      	ldrb	r3, [r3, #2]
 8001056:	461a      	mov	r2, r3
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	4619      	mov	r1, r3
 800105c:	4610      	mov	r0, r2
 800105e:	f000 fcad 	bl	80019bc <message_timer>
 8001062:	4603      	mov	r3, r0
 8001064:	2b01      	cmp	r3, #1
 8001066:	d102      	bne.n	800106e <project+0x13a>
							{
								second_count++;
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	3301      	adds	r3, #1
 800106c:	73bb      	strb	r3, [r7, #14]
							}

							if (second_count >= QR_DELAY )	//if 5 or more seconds has passed, request a new message and display it on the OLED
 800106e:	7bba      	ldrb	r2, [r7, #14]
 8001070:	7afb      	ldrb	r3, [r7, #11]
 8001072:	429a      	cmp	r2, r3
 8001074:	d309      	bcc.n	800108a <project+0x156>
							{
								value = 0xff;
 8001076:	23ff      	movs	r3, #255	; 0xff
 8001078:	737b      	strb	r3, [r7, #13]
								ssd1306_WriteCommand(0x81);
 800107a:	2081      	movs	r0, #129	; 0x81
 800107c:	f000 ff5e 	bl	8001f3c <ssd1306_WriteCommand>
								ssd1306_WriteCommand(value);
 8001080:	7b7b      	ldrb	r3, [r7, #13]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 ff5a 	bl	8001f3c <ssd1306_WriteCommand>
								break;
 8001088:	e00d      	b.n	80010a6 <project+0x172>
							}

					prev_second = sTime.Seconds;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <project+0x1c0>)
 800108c:	789b      	ldrb	r3, [r3, #2]
 800108e:	73fb      	strb	r3, [r7, #15]
					HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 8001090:	2200      	movs	r2, #0
 8001092:	4918      	ldr	r1, [pc, #96]	; (80010f4 <project+0x1c0>)
 8001094:	4818      	ldr	r0, [pc, #96]	; (80010f8 <project+0x1c4>)
 8001096:	f006 fb86 	bl	80077a6 <HAL_RTC_GetTime>
					HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BIN);
 800109a:	2200      	movs	r2, #0
 800109c:	4917      	ldr	r1, [pc, #92]	; (80010fc <project+0x1c8>)
 800109e:	4816      	ldr	r0, [pc, #88]	; (80010f8 <project+0x1c4>)
 80010a0:	f006 fc64 	bl	800796c <HAL_RTC_GetDate>
				value = value - 4;
 80010a4:	e7b6      	b.n	8001014 <project+0xe0>
				}
			if (esp_ok() == false)
 80010a6:	f000 fc31 	bl	800190c <esp_ok>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <project+0x180>
			{
				esp_error_handler();	//handle esp error
 80010b0:	f000 fc9a 	bl	80019e8 <esp_error_handler>
			}
			ssd1306_Fill(Black); //reset screen
 80010b4:	2000      	movs	r0, #0
 80010b6:	f000 ffe1 	bl	800207c <ssd1306_Fill>
			ssd1306_SetCursor(2, 12);
 80010ba:	210c      	movs	r1, #12
 80010bc:	2002      	movs	r0, #2
 80010be:	f001 f933 	bl	8002328 <ssd1306_SetCursor>
			ssd1306_WriteString("Loading old" , Font_7x10, White);
 80010c2:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <project+0x1cc>)
 80010c4:	2301      	movs	r3, #1
 80010c6:	ca06      	ldmia	r2, {r1, r2}
 80010c8:	480e      	ldr	r0, [pc, #56]	; (8001104 <project+0x1d0>)
 80010ca:	f001 f907 	bl	80022dc <ssd1306_WriteString>
			ssd1306_SetCursor(2, 22);
 80010ce:	2116      	movs	r1, #22
 80010d0:	2002      	movs	r0, #2
 80010d2:	f001 f929 	bl	8002328 <ssd1306_SetCursor>
			ssd1306_WriteString("message" , Font_7x10, White);
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <project+0x1cc>)
 80010d8:	2301      	movs	r3, #1
 80010da:	ca06      	ldmia	r2, {r1, r2}
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <project+0x1d4>)
 80010de:	f001 f8fd 	bl	80022dc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80010e2:	f000 ffed 	bl	80020c0 <ssd1306_UpdateScreen>
			second_count = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	73bb      	strb	r3, [r7, #14]
			esp_as_TCP();
 80010ea:	f000 f80f 	bl	800110c <esp_as_TCP>
		if (message_timer(sTime.Seconds, prev_second) == true)	//if a second has passed, increment second_count
<<<<<<< HEAD
 80010ee:	e757      	b.n	8000fa0 <project+0x6c>
 80010f0:	0800c3b8 	.word	0x0800c3b8
 80010f4:	200000cc 	.word	0x200000cc
 80010f8:	2000061c 	.word	0x2000061c
 80010fc:	200000e0 	.word	0x200000e0
 8001100:	20000008 	.word	0x20000008
 8001104:	0800c3a4 	.word	0x0800c3a4
 8001108:	0800c3b0 	.word	0x0800c3b0

0800110c <esp_as_TCP>:
=======
 8001020:	e7b0      	b.n	8000f84 <project+0x50>
 8001022:	bf00      	nop
 8001024:	0800c2d4 	.word	0x0800c2d4
 8001028:	200000cc 	.word	0x200000cc
 800102c:	20000680 	.word	0x20000680
 8001030:	200000e0 	.word	0x200000e0

08001034 <esp_as_TCP>:
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
/** @brief esp_as_TCP, set up a tcp connection
 * to a server
@author  Daniel Gripenstedt, Arthur Simonsson, Botan Cosar
@return void */
void esp_as_TCP()
{
 800110c:	b5b0      	push	{r4, r5, r7, lr}
 800110e:	b0e4      	sub	sp, #400	; 0x190
 8001110:	af00      	add	r7, sp, #0
		uint8_t TX_DOMAIN_NAME [] = "AT+CIPSTART=\"TCP\",\"35.228.147.153\",8080\r\n";
 8001112:	4b36      	ldr	r3, [pc, #216]	; (80011ec <esp_as_TCP+0xe0>)
 8001114:	f507 74b2 	add.w	r4, r7, #356	; 0x164
 8001118:	461d      	mov	r5, r3
 800111a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001122:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001126:	c403      	stmia	r4!, {r0, r1}
 8001128:	8022      	strh	r2, [r4, #0]
		uint8_t RX_DOMAIN_NAME [100];
		HAL_UART_Transmit(&huart4, (uint8_t*)TX_DOMAIN_NAME, sizeof (TX_DOMAIN_NAME), 100);	//set up TCP connection
 800112a:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 800112e:	2364      	movs	r3, #100	; 0x64
 8001130:	222a      	movs	r2, #42	; 0x2a
 8001132:	482f      	ldr	r0, [pc, #188]	; (80011f0 <esp_as_TCP+0xe4>)
 8001134:	f006 ffaa 	bl	800808c <HAL_UART_Transmit>
		HAL_UART_Receive(&huart4, (uint8_t*)RX_DOMAIN_NAME, 100, 1000);
 8001138:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800113c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001140:	2264      	movs	r2, #100	; 0x64
 8001142:	482b      	ldr	r0, [pc, #172]	; (80011f0 <esp_as_TCP+0xe4>)
 8001144:	f007 f835 	bl	80081b2 <HAL_UART_Receive>

		uint8_t TX_SEND [] = "AT+CIPSEND=9\r\n";
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <esp_as_TCP+0xe8>)
 800114a:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 800114e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001150:	c407      	stmia	r4!, {r0, r1, r2}
 8001152:	8023      	strh	r3, [r4, #0]
 8001154:	3402      	adds	r4, #2
 8001156:	0c1b      	lsrs	r3, r3, #16
 8001158:	7023      	strb	r3, [r4, #0]
		uint8_t TX_M [] = "welcome\r\n";
 800115a:	4a27      	ldr	r2, [pc, #156]	; (80011f8 <esp_as_TCP+0xec>)
 800115c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001160:	ca07      	ldmia	r2, {r0, r1, r2}
 8001162:	c303      	stmia	r3!, {r0, r1}
 8001164:	801a      	strh	r2, [r3, #0]
		uint8_t RX_SEND [50];
		uint8_t RX_M [100];
		HAL_UART_Transmit(&huart4, (uint8_t*)TX_SEND, (sizeof (TX_SEND) - 1), 100);	//prepare to send data over TCP
 8001166:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 800116a:	2364      	movs	r3, #100	; 0x64
 800116c:	220e      	movs	r2, #14
 800116e:	4820      	ldr	r0, [pc, #128]	; (80011f0 <esp_as_TCP+0xe4>)
 8001170:	f006 ff8c 	bl	800808c <HAL_UART_Transmit>
		HAL_UART_Receive(&huart4, (uint8_t*)RX_SEND, 50, 100);
 8001174:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8001178:	2364      	movs	r3, #100	; 0x64
 800117a:	2232      	movs	r2, #50	; 0x32
 800117c:	481c      	ldr	r0, [pc, #112]	; (80011f0 <esp_as_TCP+0xe4>)
 800117e:	f007 f818 	bl	80081b2 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart4, (uint8_t*)TX_M, (sizeof (TX_M) - 1), 100);	//Send data over TCP
 8001182:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	2209      	movs	r2, #9
 800118a:	4819      	ldr	r0, [pc, #100]	; (80011f0 <esp_as_TCP+0xe4>)
 800118c:	f006 ff7e 	bl	800808c <HAL_UART_Transmit>
		HAL_UART_Receive(&huart4, (uint8_t*)RX_M, 100, 1000);
 8001190:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001198:	2264      	movs	r2, #100	; 0x64
 800119a:	4815      	ldr	r0, [pc, #84]	; (80011f0 <esp_as_TCP+0xe4>)
 800119c:	f007 f809 	bl	80081b2 <HAL_UART_Receive>

		uint8_t TX_END_TCP [] = "AT+CIPCLOSE\r\n";
 80011a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011a4:	4a15      	ldr	r2, [pc, #84]	; (80011fc <esp_as_TCP+0xf0>)
 80011a6:	461c      	mov	r4, r3
 80011a8:	4613      	mov	r3, r2
 80011aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ac:	c407      	stmia	r4!, {r0, r1, r2}
 80011ae:	8023      	strh	r3, [r4, #0]
		uint8_t RX_END_TCP [60];
		HAL_UART_Transmit(&huart4, (uint8_t*)TX_END_TCP, (sizeof (TX_END_TCP) - 1), 500);	//Close TCP connection
 80011b0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80011b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011b8:	220d      	movs	r2, #13
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <esp_as_TCP+0xe4>)
 80011bc:	f006 ff66 	bl	800808c <HAL_UART_Transmit>
		HAL_UART_Receive(&huart4, (uint8_t*)RX_END_TCP, 60, 1000);
 80011c0:	4639      	mov	r1, r7
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	223c      	movs	r2, #60	; 0x3c
 80011c8:	4809      	ldr	r0, [pc, #36]	; (80011f0 <esp_as_TCP+0xe4>)
 80011ca:	f006 fff2 	bl	80081b2 <HAL_UART_Receive>
		HAL_Delay(100);
 80011ce:	2064      	movs	r0, #100	; 0x64
 80011d0:	f001 fc06 	bl	80029e0 <HAL_Delay>

	print_oled_message(&RX_M, sizeof(RX_M));
 80011d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011d8:	2164      	movs	r1, #100	; 0x64
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f810 	bl	8001200 <print_oled_message>
}/*End of function esp_as_TCP*/
<<<<<<< HEAD
 80011e0:	bf00      	nop
 80011e2:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	0800c450 	.word	0x0800c450
 80011f0:	200007f8 	.word	0x200007f8
 80011f4:	0800c47c 	.word	0x0800c47c
 80011f8:	0800c48c 	.word	0x0800c48c
 80011fc:	0800c498 	.word	0x0800c498

08001200 <print_oled_message>:
 * (that is, if a word goes outside of the display, that word
 * will be written on the next row)
=======
 8001136:	4618      	mov	r0, r3
 8001138:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 800113c:	46bd      	mov	sp, r7
 800113e:	bdb0      	pop	{r4, r5, r7, pc}
 8001140:	0800c360 	.word	0x0800c360
 8001144:	2000085c 	.word	0x2000085c
 8001148:	0800c38c 	.word	0x0800c38c
 800114c:	0800c39c 	.word	0x0800c39c
 8001150:	0800c3a8 	.word	0x0800c3a8
 8001154:	200000e4 	.word	0x200000e4

08001158 <print_oled_message>:
 * returned by the server
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 * @param uint8_t *arr, uint8_t size
@author  Daniel Gripenstedt */
void print_oled_message (uint8_t *arr, uint8_t size)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b0c8      	sub	sp, #288	; 0x120
 8001204:	af00      	add	r7, sp, #0
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	6018      	str	r0, [r3, #0]
 800120a:	460a      	mov	r2, r1
 800120c:	1cfb      	adds	r3, r7, #3
 800120e:	701a      	strb	r2, [r3, #0]
	ssd1306_Fill(Black); //reset screen
 8001210:	2000      	movs	r0, #0
 8001212:	f000 ff33 	bl	800207c <ssd1306_Fill>
	ssd1306_SetCursor(2, 54);
 8001216:	2136      	movs	r1, #54	; 0x36
 8001218:	2002      	movs	r0, #2
 800121a:	f001 f885 	bl	8002328 <ssd1306_SetCursor>
	ssd1306_WriteString("-> Leave a message" , Font_7x10, White);
 800121e:	4ae4      	ldr	r2, [pc, #912]	; (80015b0 <print_oled_message+0x3b0>)
 8001220:	2301      	movs	r3, #1
 8001222:	ca06      	ldmia	r2, {r1, r2}
 8001224:	48e3      	ldr	r0, [pc, #908]	; (80015b4 <print_oled_message+0x3b4>)
 8001226:	f001 f859 	bl	80022dc <ssd1306_WriteString>
	uint8_t count = -1;	//how many characters of the message
 800122a:	23ff      	movs	r3, #255	; 0xff
 800122c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
	uint8_t extra_char = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		uint8_t i;
		for (i = 30; i < (size - 1); i++)	//find number of characters
 8001236:	231e      	movs	r3, #30
 8001238:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800123c:	e00c      	b.n	8001258 <print_oled_message+0x58>
		{
			if (*(arr + i) == ':') {break;}
 800123e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001242:	1d3a      	adds	r2, r7, #4
 8001244:	6812      	ldr	r2, [r2, #0]
 8001246:	4413      	add	r3, r2
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b3a      	cmp	r3, #58	; 0x3a
 800124c:	d00c      	beq.n	8001268 <print_oled_message+0x68>
		for (i = 30; i < (size - 1); i++)	//find number of characters
 800124e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001252:	3301      	adds	r3, #1
 8001254:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8001258:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 800125c:	1cfb      	adds	r3, r7, #3
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	3b01      	subs	r3, #1
 8001262:	429a      	cmp	r2, r3
 8001264:	dbeb      	blt.n	800123e <print_oled_message+0x3e>
 8001266:	e000      	b.n	800126a <print_oled_message+0x6a>
			if (*(arr + i) == ':') {break;}
 8001268:	bf00      	nop
		}

		for (uint8_t j = (i + 1); j < (size - 1); j++)	//find number of characters
 800126a:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800126e:	3301      	adds	r3, #1
 8001270:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 8001274:	e011      	b.n	800129a <print_oled_message+0x9a>
			{
				count++;
 8001276:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800127a:	3301      	adds	r3, #1
 800127c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
				if (*(arr + j) == '~') {break;}
 8001280:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8001284:	1d3a      	adds	r2, r7, #4
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	4413      	add	r3, r2
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b7e      	cmp	r3, #126	; 0x7e
 800128e:	d00c      	beq.n	80012aa <print_oled_message+0xaa>
		for (uint8_t j = (i + 1); j < (size - 1); j++)	//find number of characters
 8001290:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8001294:	3301      	adds	r3, #1
 8001296:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 800129a:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 800129e:	1cfb      	adds	r3, r7, #3
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	429a      	cmp	r2, r3
 80012a6:	dbe6      	blt.n	8001276 <print_oled_message+0x76>
 80012a8:	e000      	b.n	80012ac <print_oled_message+0xac>
				if (*(arr + j) == '~') {break;}
 80012aa:	bf00      	nop
			}
		uint8_t message [count];	//new message
 80012ac:	f897 411e 	ldrb.w	r4, [r7, #286]	; 0x11e
 80012b0:	466b      	mov	r3, sp
 80012b2:	461d      	mov	r5, r3
 80012b4:	4623      	mov	r3, r4
 80012b6:	3b01      	subs	r3, #1
 80012b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80012bc:	b2e0      	uxtb	r0, r4
 80012be:	f04f 0100 	mov.w	r1, #0
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	00cb      	lsls	r3, r1, #3
 80012cc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80012d0:	00c2      	lsls	r2, r0, #3
 80012d2:	b2e0      	uxtb	r0, r4
 80012d4:	f04f 0100 	mov.w	r1, #0
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	00cb      	lsls	r3, r1, #3
 80012e2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80012e6:	00c2      	lsls	r2, r0, #3
 80012e8:	4623      	mov	r3, r4
 80012ea:	3307      	adds	r3, #7
 80012ec:	08db      	lsrs	r3, r3, #3
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	ebad 0d03 	sub.w	sp, sp, r3
 80012f4:	466b      	mov	r3, sp
 80012f6:	3300      	adds	r3, #0
 80012f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

		for (uint8_t k = 0; k < sizeof(message); k++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 8001302:	e015      	b.n	8001330 <print_oled_message+0x130>
		{
			message [k] = (*(arr + i + 1));
 8001304:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001308:	3301      	adds	r3, #1
 800130a:	1d3a      	adds	r2, r7, #4
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	441a      	add	r2, r3
 8001310:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8001314:	7811      	ldrb	r1, [r2, #0]
 8001316:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800131a:	54d1      	strb	r1, [r2, r3]
			i++;
 800131c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001320:	3301      	adds	r3, #1
 8001322:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
		for (uint8_t k = 0; k < sizeof(message); k++)
 8001326:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800132a:	3301      	adds	r3, #1
 800132c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 8001330:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8001334:	42a3      	cmp	r3, r4
 8001336:	d3e5      	bcc.n	8001304 <print_oled_message+0x104>
		}

		uint8_t message_size = sizeof(message);
 8001338:	4623      	mov	r3, r4
 800133a:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
		if (sizeof(message) <= 21)
 800133e:	2c15      	cmp	r4, #21
 8001340:	d829      	bhi.n	8001396 <print_oled_message+0x196>
		{
			char cbuff [21];
			sprintf(cbuff, message);
 8001342:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001346:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f00a fccb 	bl	800bce8 <siprintf>

			for (uint8_t i = sizeof(message); i <= 21; i++)
 8001352:	4623      	mov	r3, r4
 8001354:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 8001358:	e00c      	b.n	8001374 <print_oled_message+0x174>
			{
				cbuff[i] = ' ';
 800135a:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 800135e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001362:	4413      	add	r3, r2
 8001364:	2220      	movs	r2, #32
 8001366:	f803 2c38 	strb.w	r2, [r3, #-56]
			for (uint8_t i = sizeof(message); i <= 21; i++)
 800136a:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 800136e:	3301      	adds	r3, #1
 8001370:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 8001374:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8001378:	2b15      	cmp	r3, #21
 800137a:	d9ee      	bls.n	800135a <print_oled_message+0x15a>
			}
			ssd1306_SetCursor(2, 2);
 800137c:	2102      	movs	r1, #2
 800137e:	2002      	movs	r0, #2
 8001380:	f000 ffd2 	bl	8002328 <ssd1306_SetCursor>
			ssd1306_WriteString(cbuff, Font_6x8, White);
 8001384:	4a8c      	ldr	r2, [pc, #560]	; (80015b8 <print_oled_message+0x3b8>)
 8001386:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 800138a:	2301      	movs	r3, #1
 800138c:	ca06      	ldmia	r2, {r1, r2}
 800138e:	f000 ffa5 	bl	80022dc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001392:	f000 fe95 	bl	80020c0 <ssd1306_UpdateScreen>
		}
		if ((sizeof(message) > 21) && (sizeof(message) <= 41))
 8001396:	2c15      	cmp	r4, #21
 8001398:	f240 80f1 	bls.w	800157e <print_oled_message+0x37e>
 800139c:	2c29      	cmp	r4, #41	; 0x29
 800139e:	f200 80ee 	bhi.w	800157e <print_oled_message+0x37e>
		{
			uint8_t m_row1 [20];
			char c_row1 [20];
			uint8_t m_row2 [20];
			char c_row2 [20];
			uint8_t space = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
			uint8_t pos1 = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			uint8_t pos2 = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
			uint8_t k;

			for (k = 0; k <= 20; k++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80013ba:	e01b      	b.n	80013f4 <print_oled_message+0x1f4>
			{
				m_row1[k] = (message[k]);
 80013bc:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 80013c0:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80013c4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80013c8:	5c8a      	ldrb	r2, [r1, r2]
 80013ca:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80013ce:	440b      	add	r3, r1
 80013d0:	f803 2c4c 	strb.w	r2, [r3, #-76]
				if (message[k] == ' ')
 80013d4:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80013d8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80013dc:	5cd3      	ldrb	r3, [r2, r3]
 80013de:	2b20      	cmp	r3, #32
 80013e0:	d103      	bne.n	80013ea <print_oled_message+0x1ea>
					space = k;
 80013e2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80013e6:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
			for (k = 0; k <= 20; k++)
 80013ea:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80013ee:	3301      	adds	r3, #1
 80013f0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80013f4:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80013f8:	2b14      	cmp	r3, #20
 80013fa:	d9df      	bls.n	80013bc <print_oled_message+0x1bc>
			}

			if (message[k - 1] != ' ' && message[k] != ' ')
 80013fc:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8001400:	3b01      	subs	r3, #1
 8001402:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	2b20      	cmp	r3, #32
 800140a:	d04c      	beq.n	80014a6 <print_oled_message+0x2a6>
 800140c:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8001410:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001414:	5cd3      	ldrb	r3, [r2, r3]
 8001416:	2b20      	cmp	r3, #32
 8001418:	d045      	beq.n	80014a6 <print_oled_message+0x2a6>
			{
				k = 20 - space;
 800141a:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 800141e:	f1c3 0314 	rsb	r3, r3, #20
 8001422:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				for(uint8_t i = space; i < 20; i++)
 8001426:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 800142a:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 800142e:	e027      	b.n	8001480 <print_oled_message+0x280>
				{
					m_row2[pos1++] = m_row1[space + 1];
 8001430:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800143a:	1c59      	adds	r1, r3, #1
 800143c:	f887 1117 	strb.w	r1, [r7, #279]	; 0x117
 8001440:	4619      	mov	r1, r3
 8001442:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001446:	4413      	add	r3, r2
 8001448:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 800144c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001450:	440b      	add	r3, r1
 8001452:	f803 2c74 	strb.w	r2, [r3, #-116]
					m_row1[space++] = ' ';
 8001456:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 800145a:	1c5a      	adds	r2, r3, #1
 800145c:	f887 2118 	strb.w	r2, [r7, #280]	; 0x118
 8001460:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001464:	4413      	add	r3, r2
 8001466:	2220      	movs	r2, #32
 8001468:	f803 2c4c 	strb.w	r2, [r3, #-76]
					message_size++;
 800146c:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8001470:	3301      	adds	r3, #1
 8001472:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
				for(uint8_t i = space; i < 20; i++)
 8001476:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800147a:	3301      	adds	r3, #1
 800147c:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 8001480:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001484:	2b13      	cmp	r3, #19
 8001486:	d9d3      	bls.n	8001430 <print_oled_message+0x230>
				}
				m_row1[space++] = ' ';
 8001488:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	f887 2118 	strb.w	r2, [r7, #280]	; 0x118
 8001492:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001496:	4413      	add	r3, r2
 8001498:	2220      	movs	r2, #32
 800149a:	f803 2c4c 	strb.w	r2, [r3, #-76]
				pos2 = 21;
 800149e:	2315      	movs	r3, #21
 80014a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80014a4:	e005      	b.n	80014b2 <print_oled_message+0x2b2>
			}
			else
			{
				k = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				pos2 = 22;
 80014ac:	2316      	movs	r3, #22
 80014ae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
			}
			sprintf(c_row1, m_row1);
 80014b2:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80014b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f00a fc13 	bl	800bce8 <siprintf>
			ssd1306_SetCursor(2, 2);
 80014c2:	2102      	movs	r1, #2
 80014c4:	2002      	movs	r0, #2
 80014c6:	f000 ff2f 	bl	8002328 <ssd1306_SetCursor>
			ssd1306_WriteString(c_row1, Font_6x8, White);
 80014ca:	4a3b      	ldr	r2, [pc, #236]	; (80015b8 <print_oled_message+0x3b8>)
 80014cc:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80014d0:	2301      	movs	r3, #1
 80014d2:	ca06      	ldmia	r2, {r1, r2}
 80014d4:	f000 ff02 	bl	80022dc <ssd1306_WriteString>

			for (k = k; k <= message_size - 21; k++)
 80014d8:	e014      	b.n	8001504 <print_oled_message+0x304>
				m_row2[k] = (message[pos2++]);
 80014da:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
 80014e4:	4619      	mov	r1, r3
 80014e6:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80014ea:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80014ee:	5c52      	ldrb	r2, [r2, r1]
 80014f0:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80014f4:	440b      	add	r3, r1
 80014f6:	f803 2c74 	strb.w	r2, [r3, #-116]
			for (k = k; k <= message_size - 21; k++)
 80014fa:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80014fe:	3301      	adds	r3, #1
 8001500:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8001504:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 8001508:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 800150c:	3b15      	subs	r3, #21
 800150e:	429a      	cmp	r2, r3
 8001510:	dde3      	ble.n	80014da <print_oled_message+0x2da>

			sprintf(c_row2, m_row2);
 8001512:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001516:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f00a fbe3 	bl	800bce8 <siprintf>

			if (message[21] == ' ')
 8001522:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001526:	7d5b      	ldrb	r3, [r3, #21]
 8001528:	2b20      	cmp	r3, #32
 800152a:	d104      	bne.n	8001536 <print_oled_message+0x336>
				message_size--;
 800152c:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8001530:	3b01      	subs	r3, #1
 8001532:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

			for (uint8_t i = message_size - 21; i <= 20; i++)
 8001536:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 800153a:	3b15      	subs	r3, #21
 800153c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
 8001540:	e00c      	b.n	800155c <print_oled_message+0x35c>
					c_row2[i] = ' ';
 8001542:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8001546:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800154a:	4413      	add	r3, r2
 800154c:	2220      	movs	r2, #32
 800154e:	f803 2c88 	strb.w	r2, [r3, #-136]
			for (uint8_t i = message_size - 21; i <= 20; i++)
 8001552:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8001556:	3301      	adds	r3, #1
 8001558:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
 800155c:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8001560:	2b14      	cmp	r3, #20
 8001562:	d9ee      	bls.n	8001542 <print_oled_message+0x342>

			ssd1306_SetCursor(2, 12);
 8001564:	210c      	movs	r1, #12
 8001566:	2002      	movs	r0, #2
 8001568:	f000 fede 	bl	8002328 <ssd1306_SetCursor>
			ssd1306_WriteString(c_row2,Font_6x8, White);
 800156c:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <print_oled_message+0x3b8>)
 800156e:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001572:	2301      	movs	r3, #1
 8001574:	ca06      	ldmia	r2, {r1, r2}
 8001576:	f000 feb1 	bl	80022dc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800157a:	f000 fda1 	bl	80020c0 <ssd1306_UpdateScreen>
		}

		if (message_size >= 43)
 800157e:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8001582:	2b2a      	cmp	r3, #42	; 0x2a
 8001584:	f240 81ba 	bls.w	80018fc <print_oled_message+0x6fc>
			uint8_t m_row1 [21];
			char c_row1 [21];
			uint8_t m_row2 [21];
			uint8_t m_row3 [21];
			char c_row2 [21];
			uint8_t space = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
			uint8_t pos1 = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
			uint8_t pos2 = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
			uint8_t pos3 = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			uint8_t k;
			uint8_t space2 = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d

			for (k = 0; k <= 20; k++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80015ac:	e022      	b.n	80015f4 <print_oled_message+0x3f4>
 80015ae:	bf00      	nop
 80015b0:	20000008 	.word	0x20000008
 80015b4:	0800c4a8 	.word	0x0800c4a8
 80015b8:	20000000 	.word	0x20000000
			{
				m_row1[k] = (message[k]);
 80015bc:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 80015c0:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80015c4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80015c8:	5c8a      	ldrb	r2, [r1, r2]
 80015ca:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80015ce:	440b      	add	r3, r1
 80015d0:	f803 2ca0 	strb.w	r2, [r3, #-160]
				if (message[k] == ' ')
 80015d4:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80015d8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80015dc:	5cd3      	ldrb	r3, [r2, r3]
 80015de:	2b20      	cmp	r3, #32
 80015e0:	d103      	bne.n	80015ea <print_oled_message+0x3ea>
				space = k;
 80015e2:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80015e6:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
			for (k = 0; k <= 20; k++)
 80015ea:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80015ee:	3301      	adds	r3, #1
 80015f0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80015f4:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80015f8:	2b14      	cmp	r3, #20
 80015fa:	d9df      	bls.n	80015bc <print_oled_message+0x3bc>
			}

			if ((message[k - 1] != ' ') && (message[k] != ' '))
 80015fc:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001600:	3b01      	subs	r3, #1
 8001602:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001606:	5cd3      	ldrb	r3, [r2, r3]
 8001608:	2b20      	cmp	r3, #32
 800160a:	d052      	beq.n	80016b2 <print_oled_message+0x4b2>
 800160c:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001610:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001614:	5cd3      	ldrb	r3, [r2, r3]
 8001616:	2b20      	cmp	r3, #32
 8001618:	d04b      	beq.n	80016b2 <print_oled_message+0x4b2>
			{
				k = 20 - space;
 800161a:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 800161e:	f1c3 0314 	rsb	r3, r3, #20
 8001622:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
				for(uint8_t i = space + 1; i <= 20; i++)
 8001626:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 800162a:	3301      	adds	r3, #1
 800162c:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8001630:	e02c      	b.n	800168c <print_oled_message+0x48c>
				{
					m_row2[pos1++] = m_row1[space + 1];
 8001632:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 800163c:	1c59      	adds	r1, r3, #1
 800163e:	f887 1111 	strb.w	r1, [r7, #273]	; 0x111
 8001642:	4619      	mov	r1, r3
 8001644:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001648:	4413      	add	r3, r2
 800164a:	f813 2ca0 	ldrb.w	r2, [r3, #-160]
 800164e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001652:	440b      	add	r3, r1
 8001654:	f803 2cd0 	strb.w	r2, [r3, #-208]
					m_row1[space++] = ' ';
 8001658:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	f887 2112 	strb.w	r2, [r7, #274]	; 0x112
 8001662:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001666:	4413      	add	r3, r2
 8001668:	2220      	movs	r2, #32
 800166a:	f803 2ca0 	strb.w	r2, [r3, #-160]
					extra_char++;
 800166e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8001672:	3301      	adds	r3, #1
 8001674:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
					message_size++;
 8001678:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 800167c:	3301      	adds	r3, #1
 800167e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
				for(uint8_t i = space + 1; i <= 20; i++)
 8001682:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8001686:	3301      	adds	r3, #1
 8001688:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800168c:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8001690:	2b14      	cmp	r3, #20
 8001692:	d9ce      	bls.n	8001632 <print_oled_message+0x432>
				}
				m_row1[space++] = ' ';
 8001694:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	f887 2112 	strb.w	r2, [r7, #274]	; 0x112
 800169e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80016a2:	4413      	add	r3, r2
 80016a4:	2220      	movs	r2, #32
 80016a6:	f803 2ca0 	strb.w	r2, [r3, #-160]
				pos2 = 21;
 80016aa:	2315      	movs	r3, #21
 80016ac:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
 80016b0:	e005      	b.n	80016be <print_oled_message+0x4be>
			}
			else
			{
				k = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
				pos2 = 21;
 80016b8:	2315      	movs	r3, #21
 80016ba:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
			}
			if (message[21] == ' ')
 80016be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80016c2:	7d5b      	ldrb	r3, [r3, #21]
 80016c4:	2b20      	cmp	r3, #32
 80016c6:	d109      	bne.n	80016dc <print_oled_message+0x4dc>
			{
				message_size--;
 80016c8:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80016cc:	3b01      	subs	r3, #1
 80016ce:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
				pos2++;
 80016d2:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 80016d6:	3301      	adds	r3, #1
 80016d8:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
			}


			sprintf(c_row1, m_row1);
 80016dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80016e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f00a fafe 	bl	800bce8 <siprintf>
			ssd1306_SetCursor(2, 2);
 80016ec:	2102      	movs	r1, #2
 80016ee:	2002      	movs	r0, #2
 80016f0:	f000 fe1a 	bl	8002328 <ssd1306_SetCursor>
			ssd1306_WriteString(c_row1, Font_6x8, White);
 80016f4:	4a84      	ldr	r2, [pc, #528]	; (8001908 <print_oled_message+0x708>)
 80016f6:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80016fa:	2301      	movs	r3, #1
 80016fc:	ca06      	ldmia	r2, {r1, r2}
 80016fe:	f000 fded 	bl	80022dc <ssd1306_WriteString>

			for (k = k; k <= 20; k++)
 8001702:	e021      	b.n	8001748 <print_oled_message+0x548>
			{
				m_row2[k] = (message[pos2++]);
 8001704:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	f887 2110 	strb.w	r2, [r7, #272]	; 0x110
 800170e:	4619      	mov	r1, r3
 8001710:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001714:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001718:	5c52      	ldrb	r2, [r2, r1]
 800171a:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800171e:	440b      	add	r3, r1
 8001720:	f803 2cd0 	strb.w	r2, [r3, #-208]
				if (m_row2[k] == ' ')
 8001724:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001728:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800172c:	4413      	add	r3, r2
 800172e:	f813 3cd0 	ldrb.w	r3, [r3, #-208]
 8001732:	2b20      	cmp	r3, #32
 8001734:	d103      	bne.n	800173e <print_oled_message+0x53e>
				space = k;
 8001736:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800173a:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
			for (k = k; k <= 20; k++)
 800173e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001742:	3301      	adds	r3, #1
 8001744:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8001748:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800174c:	2b14      	cmp	r3, #20
 800174e:	d9d9      	bls.n	8001704 <print_oled_message+0x504>
			}

			sprintf(c_row2, m_row2);
 8001750:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f00a fac4 	bl	800bce8 <siprintf>

			if ((m_row2[k - 1] != ' ') && (message[21 + k - extra_char] != ' '))
 8001760:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001764:	3b01      	subs	r3, #1
 8001766:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800176a:	4413      	add	r3, r2
 800176c:	f813 3cd0 	ldrb.w	r3, [r3, #-208]
 8001770:	2b20      	cmp	r3, #32
 8001772:	d019      	beq.n	80017a8 <print_oled_message+0x5a8>
 8001774:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001778:	f103 0215 	add.w	r2, r3, #21
 800177c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001786:	5cd3      	ldrb	r3, [r2, r3]
 8001788:	2b20      	cmp	r3, #32
 800178a:	d00d      	beq.n	80017a8 <print_oled_message+0x5a8>
			{
				space2 = 20 - space;
 800178c:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8001790:	f1c3 0314 	rsb	r3, r3, #20
 8001794:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
				pos3 = pos2 - space2;
 8001798:	f897 2110 	ldrb.w	r2, [r7, #272]	; 0x110
 800179c:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80017a6:	e006      	b.n	80017b6 <print_oled_message+0x5b6>
			}

			else
			{
				k = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
				pos3 = pos2;
 80017ae:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 80017b2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			}

			if ((m_row2[20] != ' ') && (m_row2[21] != ' '))
 80017b6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80017ba:	2b20      	cmp	r3, #32
 80017bc:	d02f      	beq.n	800181e <print_oled_message+0x61e>
 80017be:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80017c2:	2b20      	cmp	r3, #32
 80017c4:	d02b      	beq.n	800181e <print_oled_message+0x61e>
			{
				k = space2;
 80017c6:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80017ca:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
				for(uint8_t i = space; i <= 20; i++)
 80017ce:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 80017d2:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 80017d6:	e019      	b.n	800180c <print_oled_message+0x60c>
				{
					c_row2[space] = ' ';
 80017d8:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 80017dc:	f107 0220 	add.w	r2, r7, #32
 80017e0:	2120      	movs	r1, #32
 80017e2:	54d1      	strb	r1, [r2, r3]
					space++;
 80017e4:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 80017e8:	3301      	adds	r3, #1
 80017ea:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
					message_size++;
 80017ee:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80017f2:	3301      	adds	r3, #1
 80017f4:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
					extra_char++;
 80017f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80017fc:	3301      	adds	r3, #1
 80017fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				for(uint8_t i = space; i <= 20; i++)
 8001802:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8001806:	3301      	adds	r3, #1
 8001808:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 800180c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8001810:	2b14      	cmp	r3, #20
 8001812:	d9e1      	bls.n	80017d8 <print_oled_message+0x5d8>
				}
				message_size--;
 8001814:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8001818:	3b01      	subs	r3, #1
 800181a:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
			}

			if (message[42 - extra_char] == ' ')
 800181e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8001822:	f1c3 032a 	rsb	r3, r3, #42	; 0x2a
 8001826:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800182a:	5cd3      	ldrb	r3, [r2, r3]
 800182c:	2b20      	cmp	r3, #32
 800182e:	d10e      	bne.n	800184e <print_oled_message+0x64e>
			{
				pos3++;
 8001830:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001834:	3301      	adds	r3, #1
 8001836:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
				message_size--;
 800183a:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 800183e:	3b01      	subs	r3, #1
 8001840:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
				extra_char--;
 8001844:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8001848:	3b01      	subs	r3, #1
 800184a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			}
				ssd1306_SetCursor(2, 12);
 800184e:	210c      	movs	r1, #12
 8001850:	2002      	movs	r0, #2
 8001852:	f000 fd69 	bl	8002328 <ssd1306_SetCursor>
				ssd1306_WriteString(c_row2,Font_6x8, White);
 8001856:	4a2c      	ldr	r2, [pc, #176]	; (8001908 <print_oled_message+0x708>)
 8001858:	f107 0020 	add.w	r0, r7, #32
 800185c:	2301      	movs	r3, #1
 800185e:	ca06      	ldmia	r2, {r1, r2}
 8001860:	f000 fd3c 	bl	80022dc <ssd1306_WriteString>

			char c_row3 [20];
			pos3--;
 8001864:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001868:	3b01      	subs	r3, #1
 800186a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			for (k = 0; k <= 20; k++)
 800186e:	2300      	movs	r3, #0
 8001870:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8001874:	e014      	b.n	80018a0 <print_oled_message+0x6a0>
				m_row3[k] = message[pos3++];
 8001876:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8001880:	4619      	mov	r1, r3
 8001882:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001886:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800188a:	5c52      	ldrb	r2, [r2, r1]
 800188c:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8001890:	440b      	add	r3, r1
 8001892:	f803 2ce8 	strb.w	r2, [r3, #-232]
			for (k = 0; k <= 20; k++)
 8001896:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800189a:	3301      	adds	r3, #1
 800189c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80018a0:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80018a4:	2b14      	cmp	r3, #20
 80018a6:	d9e6      	bls.n	8001876 <print_oled_message+0x676>
			sprintf(c_row3, m_row3);
 80018a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f00a fa18 	bl	800bce8 <siprintf>

			for (uint8_t i = message_size - 42; i <= 20; i++)
 80018b8:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80018bc:	3b2a      	subs	r3, #42	; 0x2a
 80018be:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 80018c2:	e00a      	b.n	80018da <print_oled_message+0x6da>
				c_row3[i] = ' ';
 80018c4:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80018c8:	f107 020c 	add.w	r2, r7, #12
 80018cc:	2120      	movs	r1, #32
 80018ce:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = message_size - 42; i <= 20; i++)
 80018d0:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80018d4:	3301      	adds	r3, #1
 80018d6:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 80018da:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80018de:	2b14      	cmp	r3, #20
 80018e0:	d9f0      	bls.n	80018c4 <print_oled_message+0x6c4>

			ssd1306_SetCursor(2, 22);
 80018e2:	2116      	movs	r1, #22
 80018e4:	2002      	movs	r0, #2
 80018e6:	f000 fd1f 	bl	8002328 <ssd1306_SetCursor>
			ssd1306_WriteString(c_row3,Font_6x8, White);
 80018ea:	4a07      	ldr	r2, [pc, #28]	; (8001908 <print_oled_message+0x708>)
 80018ec:	f107 000c 	add.w	r0, r7, #12
 80018f0:	2301      	movs	r3, #1
 80018f2:	ca06      	ldmia	r2, {r1, r2}
 80018f4:	f000 fcf2 	bl	80022dc <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80018f8:	f000 fbe2 	bl	80020c0 <ssd1306_UpdateScreen>
 80018fc:	46ad      	mov	sp, r5
		}

}/*End of function print_oled_message*/
 80018fe:	bf00      	nop
 8001900:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8001904:	46bd      	mov	sp, r7
 8001906:	bdb0      	pop	{r4, r5, r7, pc}
 8001908:	20000000 	.word	0x20000000

0800190c <esp_ok>:

/** @brief esp_ok, check if the esp is working
@author  Daniel Gripenstedt
@return uint8_t bool*/
bool esp_ok ()
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08c      	sub	sp, #48	; 0x30
 8001910:	af00      	add	r7, sp, #0
	uint8_t RX_Recive [20];
	uint8_t AT_OK [] = "AT\r\r\n\r\nOK";
 8001912:	4a27      	ldr	r2, [pc, #156]	; (80019b0 <esp_ok+0xa4>)
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	ca07      	ldmia	r2, {r0, r1, r2}
 800191a:	c303      	stmia	r3!, {r0, r1}
 800191c:	801a      	strh	r2, [r3, #0]
	uint8_t AT [] = "AT\r\n";
 800191e:	4a25      	ldr	r2, [pc, #148]	; (80019b4 <esp_ok+0xa8>)
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001926:	6018      	str	r0, [r3, #0]
 8001928:	3304      	adds	r3, #4
 800192a:	7019      	strb	r1, [r3, #0]
	HAL_UART_Transmit(&huart4, (uint8_t*)AT, 4, 100);
 800192c:	1d39      	adds	r1, r7, #4
 800192e:	2364      	movs	r3, #100	; 0x64
 8001930:	2204      	movs	r2, #4
 8001932:	4821      	ldr	r0, [pc, #132]	; (80019b8 <esp_ok+0xac>)
 8001934:	f006 fbaa 	bl	800808c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart4, (uint8_t*)RX_Recive, 20, 1000);
 8001938:	f107 0118 	add.w	r1, r7, #24
 800193c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001940:	2214      	movs	r2, #20
 8001942:	481d      	ldr	r0, [pc, #116]	; (80019b8 <esp_ok+0xac>)
 8001944:	f006 fc35 	bl	80081b2 <HAL_UART_Receive>

	for (uint8_t i = 0; i < 9; i++)
 8001948:	2300      	movs	r3, #0
 800194a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800194e:	e023      	b.n	8001998 <esp_ok+0x8c>
	{
		if (RX_Recive[i] != AT_OK[i])
 8001950:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001954:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001958:	4413      	add	r3, r2
 800195a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800195e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001962:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001966:	440b      	add	r3, r1
 8001968:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800196c:	429a      	cmp	r2, r3
 800196e:	d118      	bne.n	80019a2 <esp_ok+0x96>
		{
			break;
		}
		if ((RX_Recive[0] == 'A') && (RX_Recive[1] == 'T') && (RX_Recive[7] == 'O') && (RX_Recive[8] == 'K'))
 8001970:	7e3b      	ldrb	r3, [r7, #24]
 8001972:	2b41      	cmp	r3, #65	; 0x41
 8001974:	d10b      	bne.n	800198e <esp_ok+0x82>
 8001976:	7e7b      	ldrb	r3, [r7, #25]
 8001978:	2b54      	cmp	r3, #84	; 0x54
 800197a:	d108      	bne.n	800198e <esp_ok+0x82>
 800197c:	7ffb      	ldrb	r3, [r7, #31]
 800197e:	2b4f      	cmp	r3, #79	; 0x4f
 8001980:	d105      	bne.n	800198e <esp_ok+0x82>
 8001982:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001986:	2b4b      	cmp	r3, #75	; 0x4b
 8001988:	d101      	bne.n	800198e <esp_ok+0x82>
		{
			return true;
 800198a:	2301      	movs	r3, #1
 800198c:	e00b      	b.n	80019a6 <esp_ok+0x9a>
	for (uint8_t i = 0; i < 9; i++)
 800198e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001992:	3301      	adds	r3, #1
 8001994:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800199c:	2b08      	cmp	r3, #8
 800199e:	d9d7      	bls.n	8001950 <esp_ok+0x44>
 80019a0:	e000      	b.n	80019a4 <esp_ok+0x98>
			break;
 80019a2:	bf00      	nop
		}
	}
		return false;
 80019a4:	2300      	movs	r3, #0
}/*End of function esp_ok*/
<<<<<<< HEAD
 80019a6:	4618      	mov	r0, r3
 80019a8:	3730      	adds	r7, #48	; 0x30
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	0800c4bc 	.word	0x0800c4bc
 80019b4:	0800c3c4 	.word	0x0800c3c4
 80019b8:	200007f8 	.word	0x200007f8

080019bc <message_timer>:
=======
 80018e2:	4618      	mov	r0, r3
 80018e4:	3730      	adds	r7, #48	; 0x30
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	0800c3b8 	.word	0x0800c3b8
 80018f0:	0800c2e0 	.word	0x0800c2e0
 80018f4:	2000085c 	.word	0x2000085c

080018f8 <message_timer>:
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 * to request a message
 * @param uint8_t second, uint8_t prev_second
@author  Daniel Gripenstedt
@return bool*/
bool message_timer (uint8_t second, uint8_t prev_second)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	460a      	mov	r2, r1
 80019c6:	71fb      	strb	r3, [r7, #7]
 80019c8:	4613      	mov	r3, r2
 80019ca:	71bb      	strb	r3, [r7, #6]

	if(second != prev_second)
 80019cc:	79fa      	ldrb	r2, [r7, #7]
 80019ce:	79bb      	ldrb	r3, [r7, #6]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <message_timer+0x1c>
	{
		return true;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <message_timer+0x1e>
	}

	else
	{
		return false;
 80019d8:	2300      	movs	r3, #0
	}

}/*End of function message_timer*/
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <esp_error_handler>:
/** @brief esp_error_handler, handle esp error
 * by writing ESP ERROR on the OLED and then reset the MCU
@author  Daniel Gripenstedt
@return void */
void esp_error_handler()
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80019ec:	2000      	movs	r0, #0
 80019ee:	f000 fb45 	bl	800207c <ssd1306_Fill>
	ssd1306_SetCursor(2, 26);
 80019f2:	211a      	movs	r1, #26
 80019f4:	2002      	movs	r0, #2
 80019f6:	f000 fc97 	bl	8002328 <ssd1306_SetCursor>
	ssd1306_WriteString("ESP ERROR", Font_11x18, White);
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <esp_error_handler+0x34>)
 80019fc:	2301      	movs	r3, #1
 80019fe:	ca06      	ldmia	r2, {r1, r2}
 8001a00:	4807      	ldr	r0, [pc, #28]	; (8001a20 <esp_error_handler+0x38>)
 8001a02:	f000 fc6b 	bl	80022dc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001a06:	f000 fb5b 	bl	80020c0 <ssd1306_UpdateScreen>

	HAL_Delay(1000);
 8001a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a0e:	f000 ffe7 	bl	80029e0 <HAL_Delay>
	HAL_NVIC_SystemReset();
 8001a12:	f001 f920 	bl	8002c56 <HAL_NVIC_SystemReset>
}/*End of function esp_error_handler*/
<<<<<<< HEAD
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000010 	.word	0x20000010
 8001a20:	0800c4c8 	.word	0x0800c4c8

08001a24 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_QUADSPI_Init+0x44>)
 8001a2a:	4a10      	ldr	r2, [pc, #64]	; (8001a6c <MX_QUADSPI_Init+0x48>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_QUADSPI_Init+0x44>)
 8001a30:	22ff      	movs	r2, #255	; 0xff
 8001a32:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_QUADSPI_Init+0x44>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_QUADSPI_Init+0x44>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_QUADSPI_Init+0x44>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <MX_QUADSPI_Init+0x44>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_QUADSPI_Init+0x44>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_QUADSPI_Init+0x44>)
 8001a54:	f003 fd00 	bl	8005458 <HAL_QSPI_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001a5e:	f7ff fa61 	bl	8000f24 <Error_Handler>
  }

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200005d8 	.word	0x200005d8
 8001a6c:	a0001000 	.word	0xa0001000

08001a70 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a17      	ldr	r2, [pc, #92]	; (8001aec <HAL_QSPI_MspInit+0x7c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d128      	bne.n	8001ae4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <HAL_QSPI_MspInit+0x80>)
 8001a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a96:	4a16      	ldr	r2, [pc, #88]	; (8001af0 <HAL_QSPI_MspInit+0x80>)
 8001a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9c:	6513      	str	r3, [r2, #80]	; 0x50
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_QSPI_MspInit+0x80>)
 8001aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_QSPI_MspInit+0x80>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <HAL_QSPI_MspInit+0x80>)
 8001ab0:	f043 0310 	orr.w	r3, r3, #16
 8001ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_QSPI_MspInit+0x80>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 8001ac2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001ac6:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ad4:	230a      	movs	r3, #10
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4619      	mov	r1, r3
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <HAL_QSPI_MspInit+0x84>)
 8001ae0:	f001 f8ca 	bl	8002c78 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	3728      	adds	r7, #40	; 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	a0001000 	.word	0xa0001000
 8001af0:	40021000 	.word	0x40021000
 8001af4:	48001000 	.word	0x48001000

08001af8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <MX_RTC_Init+0xb0>)
 8001b12:	4a26      	ldr	r2, [pc, #152]	; (8001bac <MX_RTC_Init+0xb4>)
 8001b14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <MX_RTC_Init+0xb0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b1c:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <MX_RTC_Init+0xb0>)
 8001b1e:	227f      	movs	r2, #127	; 0x7f
 8001b20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b22:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <MX_RTC_Init+0xb0>)
 8001b24:	22ff      	movs	r2, #255	; 0xff
 8001b26:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b28:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <MX_RTC_Init+0xb0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <MX_RTC_Init+0xb0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b34:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <MX_RTC_Init+0xb0>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <MX_RTC_Init+0xb0>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b40:	4819      	ldr	r0, [pc, #100]	; (8001ba8 <MX_RTC_Init+0xb0>)
 8001b42:	f005 fd15 	bl	8007570 <HAL_RTC_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001b4c:	f7ff f9ea 	bl	8000f24 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	2201      	movs	r2, #1
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480f      	ldr	r0, [pc, #60]	; (8001ba8 <MX_RTC_Init+0xb0>)
 8001b6c:	f005 fd7e 	bl	800766c <HAL_RTC_SetTime>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001b76:	f7ff f9d5 	bl	8000f24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_RTC_Init+0xb0>)
 8001b92:	f005 fe64 	bl	800785e <HAL_RTC_SetDate>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001b9c:	f7ff f9c2 	bl	8000f24 <Error_Handler>
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	2000061c 	.word	0x2000061c
 8001bac:	40002800 	.word	0x40002800

08001bb0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_RTC_MspInit+0x30>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_RTC_MspInit+0x34>)
 8001bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <HAL_RTC_MspInit+0x34>)
 8001bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40002800 	.word	0x40002800
 8001be4:	40021000 	.word	0x40021000

08001be8 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001bec:	4b4d      	ldr	r3, [pc, #308]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001bee:	4a4e      	ldr	r2, [pc, #312]	; (8001d28 <MX_SAI1_Init+0x140>)
 8001bf0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001bf2:	4b4c      	ldr	r3, [pc, #304]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001bf8:	4b4a      	ldr	r3, [pc, #296]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001bfe:	4b49      	ldr	r3, [pc, #292]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c00:	2240      	movs	r2, #64	; 0x40
 8001c02:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001c04:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001c0a:	4b46      	ldr	r3, [pc, #280]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001c10:	4b44      	ldr	r3, [pc, #272]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c16:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001c1c:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c22:	4b40      	ldr	r3, [pc, #256]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001c28:	4b3e      	ldr	r3, [pc, #248]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c2a:	4a40      	ldr	r2, [pc, #256]	; (8001d2c <MX_SAI1_Init+0x144>)
 8001c2c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c34:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c3a:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c40:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001c46:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c48:	2208      	movs	r2, #8
 8001c4a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001c4c:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c52:	4b34      	ldr	r3, [pc, #208]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c58:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c5e:	4b31      	ldr	r3, [pc, #196]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001c64:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c6a:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001c70:	4b2c      	ldr	r3, [pc, #176]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001c76:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001c7c:	4829      	ldr	r0, [pc, #164]	; (8001d24 <MX_SAI1_Init+0x13c>)
 8001c7e:	f005 ff93 	bl	8007ba8 <HAL_SAI_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8001c88:	f7ff f94c 	bl	8000f24 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8001c8c:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001c8e:	4a29      	ldr	r2, [pc, #164]	; (8001d34 <MX_SAI1_Init+0x14c>)
 8001c90:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001c92:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001c98:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001c9e:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001ca0:	2240      	movs	r2, #64	; 0x40
 8001ca2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001caa:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001cd4:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001cdc:	2208      	movs	r2, #8
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001d10:	4807      	ldr	r0, [pc, #28]	; (8001d30 <MX_SAI1_Init+0x148>)
 8001d12:	f005 ff49 	bl	8007ba8 <HAL_SAI_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001d1c:	f7ff f902 	bl	8000f24 <Error_Handler>
  }

}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200006c4 	.word	0x200006c4
 8001d28:	40015404 	.word	0x40015404
 8001d2c:	0002ee00 	.word	0x0002ee00
 8001d30:	20000640 	.word	0x20000640
 8001d34:	40015424 	.word	0x40015424

08001d38 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08a      	sub	sp, #40	; 0x28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a33      	ldr	r2, [pc, #204]	; (8001e14 <HAL_SAI_MspInit+0xdc>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d135      	bne.n	8001db6 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001d4a:	4b33      	ldr	r3, [pc, #204]	; (8001e18 <HAL_SAI_MspInit+0xe0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10b      	bne.n	8001d6a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001d52:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <HAL_SAI_MspInit+0xe4>)
 8001d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d56:	4a31      	ldr	r2, [pc, #196]	; (8001e1c <HAL_SAI_MspInit+0xe4>)
 8001d58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d5e:	4b2f      	ldr	r3, [pc, #188]	; (8001e1c <HAL_SAI_MspInit+0xe4>)
 8001d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001d6a:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <HAL_SAI_MspInit+0xe0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	4a29      	ldr	r2, [pc, #164]	; (8001e18 <HAL_SAI_MspInit+0xe0>)
 8001d72:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B 
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 8001d74:	2374      	movs	r3, #116	; 0x74
 8001d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001d84:	230d      	movs	r3, #13
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4824      	ldr	r0, [pc, #144]	; (8001e20 <HAL_SAI_MspInit+0xe8>)
 8001d90:	f000 ff72 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8001d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001da6:	230d      	movs	r3, #13
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	481b      	ldr	r0, [pc, #108]	; (8001e20 <HAL_SAI_MspInit+0xe8>)
 8001db2:	f000 ff61 	bl	8002c78 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1a      	ldr	r2, [pc, #104]	; (8001e24 <HAL_SAI_MspInit+0xec>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d124      	bne.n	8001e0a <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001dc0:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <HAL_SAI_MspInit+0xe0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10b      	bne.n	8001de0 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <HAL_SAI_MspInit+0xe4>)
 8001dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dcc:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <HAL_SAI_MspInit+0xe4>)
 8001dce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dd2:	6613      	str	r3, [r2, #96]	; 0x60
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <HAL_SAI_MspInit+0xe4>)
 8001dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001de0:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <HAL_SAI_MspInit+0xe0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	3301      	adds	r3, #1
 8001de6:	4a0c      	ldr	r2, [pc, #48]	; (8001e18 <HAL_SAI_MspInit+0xe0>)
 8001de8:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE7     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df6:	2303      	movs	r3, #3
 8001df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001dfa:	230d      	movs	r3, #13
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	4806      	ldr	r0, [pc, #24]	; (8001e20 <HAL_SAI_MspInit+0xe8>)
 8001e06:	f000 ff37 	bl	8002c78 <HAL_GPIO_Init>

    }
}
 8001e0a:	bf00      	nop
 8001e0c:	3728      	adds	r7, #40	; 0x28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40015404 	.word	0x40015404
 8001e18:	200000e4 	.word	0x200000e4
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	48001000 	.word	0x48001000
 8001e24:	40015424 	.word	0x40015424

08001e28 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <MX_SPI2_Init+0x74>)
 8001e2e:	4a1c      	ldr	r2, [pc, #112]	; (8001ea0 <MX_SPI2_Init+0x78>)
 8001e30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <MX_SPI2_Init+0x74>)
 8001e34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e3a:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <MX_SPI2_Init+0x74>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e40:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <MX_SPI2_Init+0x74>)
 8001e42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001e46:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <MX_SPI2_Init+0x74>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <MX_SPI2_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_SPI2_Init+0x74>)
 8001e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <MX_SPI2_Init+0x74>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_SPI2_Init+0x74>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MX_SPI2_Init+0x74>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <MX_SPI2_Init+0x74>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_SPI2_Init+0x74>)
 8001e76:	2207      	movs	r2, #7
 8001e78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <MX_SPI2_Init+0x74>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <MX_SPI2_Init+0x74>)
 8001e82:	2208      	movs	r2, #8
 8001e84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_SPI2_Init+0x74>)
 8001e88:	f006 f828 	bl	8007edc <HAL_SPI_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e92:	f7ff f847 	bl	8000f24 <Error_Handler>
  }

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000748 	.word	0x20000748
 8001ea0:	40003800 	.word	0x40003800

08001ea4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a17      	ldr	r2, [pc, #92]	; (8001f20 <HAL_SPI_MspInit+0x7c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d127      	bne.n	8001f16 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <HAL_SPI_MspInit+0x80>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	4a16      	ldr	r2, [pc, #88]	; (8001f24 <HAL_SPI_MspInit+0x80>)
 8001ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed2:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <HAL_SPI_MspInit+0x80>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_SPI_MspInit+0x80>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <HAL_SPI_MspInit+0x80>)
 8001ee4:	f043 0308 	orr.w	r3, r3, #8
 8001ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <HAL_SPI_MspInit+0x80>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8001ef6:	231a      	movs	r3, #26
 8001ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f02:	2303      	movs	r3, #3
 8001f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f06:	2305      	movs	r3, #5
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <HAL_SPI_MspInit+0x84>)
 8001f12:	f000 feb1 	bl	8002c78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001f16:	bf00      	nop
 8001f18:	3728      	adds	r7, #40	; 0x28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40003800 	.word	0x40003800
 8001f24:	40021000 	.word	0x40021000
 8001f28:	48000c00 	.word	0x48000c00

08001f2c <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af04      	add	r7, sp, #16
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	9302      	str	r3, [sp, #8]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	1dfb      	adds	r3, r7, #7
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2301      	movs	r3, #1
 8001f56:	2200      	movs	r2, #0
 8001f58:	2178      	movs	r1, #120	; 0x78
 8001f5a:	4803      	ldr	r0, [pc, #12]	; (8001f68 <ssd1306_WriteCommand+0x2c>)
 8001f5c:	f002 fd14 	bl	8004988 <HAL_I2C_Mem_Write>
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000504 	.word	0x20000504

08001f6c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af04      	add	r7, sp, #16
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7e:	9202      	str	r2, [sp, #8]
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2301      	movs	r3, #1
 8001f88:	2240      	movs	r2, #64	; 0x40
 8001f8a:	2178      	movs	r1, #120	; 0x78
 8001f8c:	4803      	ldr	r0, [pc, #12]	; (8001f9c <ssd1306_WriteData+0x30>)
 8001f8e:	f002 fcfb 	bl	8004988 <HAL_I2C_Mem_Write>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000504 	.word	0x20000504

08001fa0 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8001fa4:	f7ff ffc2 	bl	8001f2c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001fa8:	2064      	movs	r0, #100	; 0x64
 8001faa:	f000 fd19 	bl	80029e0 <HAL_Delay>

    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8001fae:	20ae      	movs	r0, #174	; 0xae
 8001fb0:	f7ff ffc4 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001fb4:	2020      	movs	r0, #32
 8001fb6:	f7ff ffc1 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7ff ffbe 	bl	8001f3c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001fc0:	20b0      	movs	r0, #176	; 0xb0
 8001fc2:	f7ff ffbb 	bl	8001f3c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001fc6:	20c8      	movs	r0, #200	; 0xc8
 8001fc8:	f7ff ffb8 	bl	8001f3c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff ffb5 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001fd2:	2010      	movs	r0, #16
 8001fd4:	f7ff ffb2 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001fd8:	2040      	movs	r0, #64	; 0x40
 8001fda:	f7ff ffaf 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8001fde:	2081      	movs	r0, #129	; 0x81
 8001fe0:	f7ff ffac 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001fe4:	20ff      	movs	r0, #255	; 0xff
 8001fe6:	f7ff ffa9 	bl	8001f3c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001fea:	20a1      	movs	r0, #161	; 0xa1
 8001fec:	f7ff ffa6 	bl	8001f3c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001ff0:	20a6      	movs	r0, #166	; 0xa6
 8001ff2:	f7ff ffa3 	bl	8001f3c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001ff6:	20a8      	movs	r0, #168	; 0xa8
 8001ff8:	f7ff ffa0 	bl	8001f3c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001ffc:	203f      	movs	r0, #63	; 0x3f
 8001ffe:	f7ff ff9d 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002002:	20a4      	movs	r0, #164	; 0xa4
 8002004:	f7ff ff9a 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002008:	20d3      	movs	r0, #211	; 0xd3
 800200a:	f7ff ff97 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800200e:	2000      	movs	r0, #0
 8002010:	f7ff ff94 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002014:	20d5      	movs	r0, #213	; 0xd5
 8002016:	f7ff ff91 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800201a:	20f0      	movs	r0, #240	; 0xf0
 800201c:	f7ff ff8e 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002020:	20d9      	movs	r0, #217	; 0xd9
 8002022:	f7ff ff8b 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002026:	2022      	movs	r0, #34	; 0x22
 8002028:	f7ff ff88 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800202c:	20da      	movs	r0, #218	; 0xda
 800202e:	f7ff ff85 	bl	8001f3c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002032:	2012      	movs	r0, #18
 8002034:	f7ff ff82 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002038:	20db      	movs	r0, #219	; 0xdb
 800203a:	f7ff ff7f 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800203e:	2020      	movs	r0, #32
 8002040:	f7ff ff7c 	bl	8001f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002044:	208d      	movs	r0, #141	; 0x8d
 8002046:	f7ff ff79 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800204a:	2014      	movs	r0, #20
 800204c:	f7ff ff76 	bl	8001f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8002050:	20af      	movs	r0, #175	; 0xaf
 8002052:	f7ff ff73 	bl	8001f3c <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8002056:	2000      	movs	r0, #0
 8002058:	f000 f810 	bl	800207c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800205c:	f000 f830 	bl	80020c0 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <ssd1306_Init+0xd8>)
 8002062:	2200      	movs	r2, #0
 8002064:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002066:	4b04      	ldr	r3, [pc, #16]	; (8002078 <ssd1306_Init+0xd8>)
 8002068:	2200      	movs	r2, #0
 800206a:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800206c:	4b02      	ldr	r3, [pc, #8]	; (8002078 <ssd1306_Init+0xd8>)
 800206e:	2201      	movs	r2, #1
 8002070:	715a      	strb	r2, [r3, #5]
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200004e8 	.word	0x200004e8

0800207c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	e00d      	b.n	80020a8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <ssd1306_Fill+0x1a>
 8002092:	2100      	movs	r1, #0
 8002094:	e000      	b.n	8002098 <ssd1306_Fill+0x1c>
 8002096:	21ff      	movs	r1, #255	; 0xff
 8002098:	4a08      	ldr	r2, [pc, #32]	; (80020bc <ssd1306_Fill+0x40>)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4413      	add	r3, r2
 800209e:	460a      	mov	r2, r1
 80020a0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3301      	adds	r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ae:	d3ed      	bcc.n	800208c <ssd1306_Fill+0x10>
    }
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	200000e8 	.word	0x200000e8

080020c0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80020c6:	2300      	movs	r3, #0
 80020c8:	71fb      	strb	r3, [r7, #7]
 80020ca:	e016      	b.n	80020fa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	3b50      	subs	r3, #80	; 0x50
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff32 	bl	8001f3c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80020d8:	2000      	movs	r0, #0
 80020da:	f7ff ff2f 	bl	8001f3c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80020de:	2010      	movs	r0, #16
 80020e0:	f7ff ff2c 	bl	8001f3c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	01db      	lsls	r3, r3, #7
 80020e8:	4a07      	ldr	r2, [pc, #28]	; (8002108 <ssd1306_UpdateScreen+0x48>)
 80020ea:	4413      	add	r3, r2
 80020ec:	2180      	movs	r1, #128	; 0x80
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff3c 	bl	8001f6c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	3301      	adds	r3, #1
 80020f8:	71fb      	strb	r3, [r7, #7]
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	2b07      	cmp	r3, #7
 80020fe:	d9e5      	bls.n	80020cc <ssd1306_UpdateScreen+0xc>
    }
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	200000e8 	.word	0x200000e8

0800210c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
 8002116:	460b      	mov	r3, r1
 8002118:	71bb      	strb	r3, [r7, #6]
 800211a:	4613      	mov	r3, r2
 800211c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	2b00      	cmp	r3, #0
 8002124:	db48      	blt.n	80021b8 <ssd1306_DrawPixel+0xac>
 8002126:	79bb      	ldrb	r3, [r7, #6]
 8002128:	2b3f      	cmp	r3, #63	; 0x3f
 800212a:	d845      	bhi.n	80021b8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800212c:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <ssd1306_DrawPixel+0xb8>)
 800212e:	791b      	ldrb	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d006      	beq.n	8002142 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8002134:	797b      	ldrb	r3, [r7, #5]
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf0c      	ite	eq
 800213a:	2301      	moveq	r3, #1
 800213c:	2300      	movne	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if(color == White) {
 8002142:	797b      	ldrb	r3, [r7, #5]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d11a      	bne.n	800217e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002148:	79fa      	ldrb	r2, [r7, #7]
 800214a:	79bb      	ldrb	r3, [r7, #6]
 800214c:	08db      	lsrs	r3, r3, #3
 800214e:	b2d8      	uxtb	r0, r3
 8002150:	4603      	mov	r3, r0
 8002152:	01db      	lsls	r3, r3, #7
 8002154:	4413      	add	r3, r2
 8002156:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <ssd1306_DrawPixel+0xbc>)
 8002158:	5cd3      	ldrb	r3, [r2, r3]
 800215a:	b25a      	sxtb	r2, r3
 800215c:	79bb      	ldrb	r3, [r7, #6]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	2101      	movs	r1, #1
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	b25b      	sxtb	r3, r3
 800216a:	4313      	orrs	r3, r2
 800216c:	b259      	sxtb	r1, r3
 800216e:	79fa      	ldrb	r2, [r7, #7]
 8002170:	4603      	mov	r3, r0
 8002172:	01db      	lsls	r3, r3, #7
 8002174:	4413      	add	r3, r2
 8002176:	b2c9      	uxtb	r1, r1
 8002178:	4a13      	ldr	r2, [pc, #76]	; (80021c8 <ssd1306_DrawPixel+0xbc>)
 800217a:	54d1      	strb	r1, [r2, r3]
 800217c:	e01d      	b.n	80021ba <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800217e:	79fa      	ldrb	r2, [r7, #7]
 8002180:	79bb      	ldrb	r3, [r7, #6]
 8002182:	08db      	lsrs	r3, r3, #3
 8002184:	b2d8      	uxtb	r0, r3
 8002186:	4603      	mov	r3, r0
 8002188:	01db      	lsls	r3, r3, #7
 800218a:	4413      	add	r3, r2
 800218c:	4a0e      	ldr	r2, [pc, #56]	; (80021c8 <ssd1306_DrawPixel+0xbc>)
 800218e:	5cd3      	ldrb	r3, [r2, r3]
 8002190:	b25a      	sxtb	r2, r3
 8002192:	79bb      	ldrb	r3, [r7, #6]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	2101      	movs	r1, #1
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	b25b      	sxtb	r3, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	b25b      	sxtb	r3, r3
 80021a4:	4013      	ands	r3, r2
 80021a6:	b259      	sxtb	r1, r3
 80021a8:	79fa      	ldrb	r2, [r7, #7]
 80021aa:	4603      	mov	r3, r0
 80021ac:	01db      	lsls	r3, r3, #7
 80021ae:	4413      	add	r3, r2
 80021b0:	b2c9      	uxtb	r1, r1
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <ssd1306_DrawPixel+0xbc>)
 80021b4:	54d1      	strb	r1, [r2, r3]
 80021b6:	e000      	b.n	80021ba <ssd1306_DrawPixel+0xae>
        return;
 80021b8:	bf00      	nop
    }
}
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	200004e8 	.word	0x200004e8
 80021c8:	200000e8 	.word	0x200000e8

080021cc <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4604      	mov	r4, r0
 80021d4:	1d38      	adds	r0, r7, #4
 80021d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80021da:	461a      	mov	r2, r3
 80021dc:	4623      	mov	r3, r4
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	4613      	mov	r3, r2
 80021e2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	2b1f      	cmp	r3, #31
 80021e8:	d902      	bls.n	80021f0 <ssd1306_WriteChar+0x24>
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	2b7e      	cmp	r3, #126	; 0x7e
 80021ee:	d901      	bls.n	80021f4 <ssd1306_WriteChar+0x28>
        return 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e06d      	b.n	80022d0 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80021f4:	4b38      	ldr	r3, [pc, #224]	; (80022d8 <ssd1306_WriteChar+0x10c>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	793b      	ldrb	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	2b80      	cmp	r3, #128	; 0x80
 8002200:	dc06      	bgt.n	8002210 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002202:	4b35      	ldr	r3, [pc, #212]	; (80022d8 <ssd1306_WriteChar+0x10c>)
 8002204:	885b      	ldrh	r3, [r3, #2]
 8002206:	461a      	mov	r2, r3
 8002208:	797b      	ldrb	r3, [r7, #5]
 800220a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800220c:	2b40      	cmp	r3, #64	; 0x40
 800220e:	dd01      	ble.n	8002214 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002210:	2300      	movs	r3, #0
 8002212:	e05d      	b.n	80022d0 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002214:	2300      	movs	r3, #0
 8002216:	61fb      	str	r3, [r7, #28]
 8002218:	e04c      	b.n	80022b4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	3b20      	subs	r3, #32
 8002220:	7979      	ldrb	r1, [r7, #5]
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4619      	mov	r1, r3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	440b      	add	r3, r1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002234:	2300      	movs	r3, #0
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	e034      	b.n	80022a4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d012      	beq.n	8002270 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800224a:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <ssd1306_WriteChar+0x10c>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	4413      	add	r3, r2
 8002256:	b2d8      	uxtb	r0, r3
 8002258:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <ssd1306_WriteChar+0x10c>)
 800225a:	885b      	ldrh	r3, [r3, #2]
 800225c:	b2da      	uxtb	r2, r3
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	4413      	add	r3, r2
 8002264:	b2db      	uxtb	r3, r3
 8002266:	7bba      	ldrb	r2, [r7, #14]
 8002268:	4619      	mov	r1, r3
 800226a:	f7ff ff4f 	bl	800210c <ssd1306_DrawPixel>
 800226e:	e016      	b.n	800229e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <ssd1306_WriteChar+0x10c>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	4413      	add	r3, r2
 800227c:	b2d8      	uxtb	r0, r3
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <ssd1306_WriteChar+0x10c>)
 8002280:	885b      	ldrh	r3, [r3, #2]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	4413      	add	r3, r2
 800228a:	b2d9      	uxtb	r1, r3
 800228c:	7bbb      	ldrb	r3, [r7, #14]
 800228e:	2b00      	cmp	r3, #0
 8002290:	bf0c      	ite	eq
 8002292:	2301      	moveq	r3, #1
 8002294:	2300      	movne	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	f7ff ff37 	bl	800210c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	3301      	adds	r3, #1
 80022a2:	61bb      	str	r3, [r7, #24]
 80022a4:	793b      	ldrb	r3, [r7, #4]
 80022a6:	461a      	mov	r2, r3
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d3c5      	bcc.n	800223a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3301      	adds	r3, #1
 80022b2:	61fb      	str	r3, [r7, #28]
 80022b4:	797b      	ldrb	r3, [r7, #5]
 80022b6:	461a      	mov	r2, r3
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d3ad      	bcc.n	800221a <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <ssd1306_WriteChar+0x10c>)
 80022c0:	881a      	ldrh	r2, [r3, #0]
 80022c2:	793b      	ldrb	r3, [r7, #4]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <ssd1306_WriteChar+0x10c>)
 80022cc:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3724      	adds	r7, #36	; 0x24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd90      	pop	{r4, r7, pc}
 80022d8:	200004e8 	.word	0x200004e8

080022dc <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	1d38      	adds	r0, r7, #4
 80022e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80022ea:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80022ec:	e012      	b.n	8002314 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	7818      	ldrb	r0, [r3, #0]
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	1d3a      	adds	r2, r7, #4
 80022f6:	ca06      	ldmia	r2, {r1, r2}
 80022f8:	f7ff ff68 	bl	80021cc <ssd1306_WriteChar>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d002      	beq.n	800230e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	e008      	b.n	8002320 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3301      	adds	r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1e8      	bne.n	80022ee <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	781b      	ldrb	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	460a      	mov	r2, r1
 8002332:	71fb      	strb	r3, [r7, #7]
 8002334:	4613      	mov	r3, r2
 8002336:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	b29a      	uxth	r2, r3
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <ssd1306_SetCursor+0x2c>)
 800233e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002340:	79bb      	ldrb	r3, [r7, #6]
 8002342:	b29a      	uxth	r2, r3
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <ssd1306_SetCursor+0x2c>)
 8002346:	805a      	strh	r2, [r3, #2]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	200004e8 	.word	0x200004e8

08002358 <BSP_LED_Init>:
=======
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000010 	.word	0x20000010
 800195c:	0800c3c4 	.word	0x0800c3c4

08001960 <MX_QUADSPI_Init>:
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_QUADSPI_Init+0x44>)
 8001966:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <MX_QUADSPI_Init+0x48>)
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_QUADSPI_Init+0x44>)
 800196c:	22ff      	movs	r2, #255	; 0xff
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_QUADSPI_Init+0x44>)
 8001972:	2201      	movs	r2, #1
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_QUADSPI_Init+0x44>)
 8001978:	2200      	movs	r2, #0
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_QUADSPI_Init+0x44>)
 800197e:	2201      	movs	r2, #1
 8001980:	611a      	str	r2, [r3, #16]
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_QUADSPI_Init+0x44>)
 8001984:	2200      	movs	r2, #0
 8001986:	615a      	str	r2, [r3, #20]
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_QUADSPI_Init+0x44>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_QUADSPI_Init+0x44>)
 8001990:	f003 fd00 	bl	8005394 <HAL_QSPI_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_QUADSPI_Init+0x3e>
 800199a:	f7ff fac3 	bl	8000f24 <Error_Handler>
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000063c 	.word	0x2000063c
 80019a8:	a0001000 	.word	0xa0001000

080019ac <HAL_QSPI_MspInit>:
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <HAL_QSPI_MspInit+0x7c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d128      	bne.n	8001a20 <HAL_QSPI_MspInit+0x74>
 80019ce:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <HAL_QSPI_MspInit+0x80>)
 80019d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d2:	4a16      	ldr	r2, [pc, #88]	; (8001a2c <HAL_QSPI_MspInit+0x80>)
 80019d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d8:	6513      	str	r3, [r2, #80]	; 0x50
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <HAL_QSPI_MspInit+0x80>)
 80019dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_QSPI_MspInit+0x80>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ea:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <HAL_QSPI_MspInit+0x80>)
 80019ec:	f043 0310 	orr.w	r3, r3, #16
 80019f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_QSPI_MspInit+0x80>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	2302      	movs	r3, #2
 8001a06:	61bb      	str	r3, [r7, #24]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	623b      	str	r3, [r7, #32]
 8001a10:	230a      	movs	r3, #10
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <HAL_QSPI_MspInit+0x84>)
 8001a1c:	f001 f8ca 	bl	8002bb4 <HAL_GPIO_Init>
 8001a20:	bf00      	nop
 8001a22:	3728      	adds	r7, #40	; 0x28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	a0001000 	.word	0xa0001000
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	48001000 	.word	0x48001000

08001a34 <MX_RTC_Init>:
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <MX_RTC_Init+0xb0>)
 8001a4e:	4a26      	ldr	r2, [pc, #152]	; (8001ae8 <MX_RTC_Init+0xb4>)
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <MX_RTC_Init+0xb0>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <MX_RTC_Init+0xb0>)
 8001a5a:	227f      	movs	r2, #127	; 0x7f
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <MX_RTC_Init+0xb0>)
 8001a60:	22ff      	movs	r2, #255	; 0xff
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <MX_RTC_Init+0xb0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <MX_RTC_Init+0xb0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	615a      	str	r2, [r3, #20]
 8001a70:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <MX_RTC_Init+0xb0>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	619a      	str	r2, [r3, #24]
 8001a76:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <MX_RTC_Init+0xb0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	61da      	str	r2, [r3, #28]
 8001a7c:	4819      	ldr	r0, [pc, #100]	; (8001ae4 <MX_RTC_Init+0xb0>)
 8001a7e:	f005 fd15 	bl	80074ac <HAL_RTC_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_RTC_Init+0x58>
 8001a88:	f7ff fa4c 	bl	8000f24 <Error_Handler>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	713b      	strb	r3, [r7, #4]
 8001a90:	2300      	movs	r3, #0
 8001a92:	717b      	strb	r3, [r7, #5]
 8001a94:	2300      	movs	r3, #0
 8001a96:	71bb      	strb	r3, [r7, #6]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	480f      	ldr	r0, [pc, #60]	; (8001ae4 <MX_RTC_Init+0xb0>)
 8001aa8:	f005 fd7e 	bl	80075a8 <HAL_RTC_SetTime>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_RTC_Init+0x82>
 8001ab2:	f7ff fa37 	bl	8000f24 <Error_Handler>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	703b      	strb	r3, [r7, #0]
 8001aba:	2301      	movs	r3, #1
 8001abc:	707b      	strb	r3, [r7, #1]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	70bb      	strb	r3, [r7, #2]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	70fb      	strb	r3, [r7, #3]
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_RTC_Init+0xb0>)
 8001ace:	f005 fe64 	bl	800779a <HAL_RTC_SetDate>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_RTC_Init+0xa8>
 8001ad8:	f7ff fa24 	bl	8000f24 <Error_Handler>
 8001adc:	bf00      	nop
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000680 	.word	0x20000680
 8001ae8:	40002800 	.word	0x40002800

08001aec <HAL_RTC_MspInit>:
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <HAL_RTC_MspInit+0x30>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d107      	bne.n	8001b0e <HAL_RTC_MspInit+0x22>
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_RTC_MspInit+0x34>)
 8001b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b04:	4a06      	ldr	r2, [pc, #24]	; (8001b20 <HAL_RTC_MspInit+0x34>)
 8001b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40002800 	.word	0x40002800
 8001b20:	40021000 	.word	0x40021000

08001b24 <MX_SAI1_Init>:
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4b4d      	ldr	r3, [pc, #308]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b2a:	4a4e      	ldr	r2, [pc, #312]	; (8001c64 <MX_SAI1_Init+0x140>)
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
 8001b34:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	4b49      	ldr	r3, [pc, #292]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b3c:	2240      	movs	r2, #64	; 0x40
 8001b3e:	635a      	str	r2, [r3, #52]	; 0x34
 8001b40:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	639a      	str	r2, [r3, #56]	; 0x38
 8001b46:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b4c:	4b44      	ldr	r3, [pc, #272]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
 8001b58:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	615a      	str	r2, [r3, #20]
 8001b5e:	4b40      	ldr	r3, [pc, #256]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
 8001b64:	4b3e      	ldr	r3, [pc, #248]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b66:	4a40      	ldr	r2, [pc, #256]	; (8001c68 <MX_SAI1_Init+0x144>)
 8001b68:	61da      	str	r2, [r3, #28]
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24
 8001b76:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
 8001b7c:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b82:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b84:	2208      	movs	r2, #8
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
 8001b88:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	645a      	str	r2, [r3, #68]	; 0x44
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	649a      	str	r2, [r3, #72]	; 0x48
 8001b94:	4b32      	ldr	r3, [pc, #200]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b9a:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	651a      	str	r2, [r3, #80]	; 0x50
 8001ba0:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	655a      	str	r2, [r3, #84]	; 0x54
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	659a      	str	r2, [r3, #88]	; 0x58
 8001bac:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	661a      	str	r2, [r3, #96]	; 0x60
 8001bb8:	4829      	ldr	r0, [pc, #164]	; (8001c60 <MX_SAI1_Init+0x13c>)
 8001bba:	f005 ff93 	bl	8007ae4 <HAL_SAI_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_SAI1_Init+0xa4>
 8001bc4:	f7ff f9ae 	bl	8000f24 <Error_Handler>
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001bca:	4a29      	ldr	r2, [pc, #164]	; (8001c70 <MX_SAI1_Init+0x14c>)
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001bdc:	2240      	movs	r2, #64	; 0x40
 8001bde:	635a      	str	r2, [r3, #52]	; 0x34
 8001be0:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	639a      	str	r2, [r3, #56]	; 0x38
 8001be6:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bec:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001c18:	2208      	movs	r2, #8
 8001c1a:	641a      	str	r2, [r3, #64]	; 0x40
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	649a      	str	r2, [r3, #72]	; 0x48
 8001c28:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	651a      	str	r2, [r3, #80]	; 0x50
 8001c34:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	655a      	str	r2, [r3, #84]	; 0x54
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	659a      	str	r2, [r3, #88]	; 0x58
 8001c40:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	661a      	str	r2, [r3, #96]	; 0x60
 8001c4c:	4807      	ldr	r0, [pc, #28]	; (8001c6c <MX_SAI1_Init+0x148>)
 8001c4e:	f005 ff49 	bl	8007ae4 <HAL_SAI_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_SAI1_Init+0x138>
 8001c58:	f7ff f964 	bl	8000f24 <Error_Handler>
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000728 	.word	0x20000728
 8001c64:	40015404 	.word	0x40015404
 8001c68:	0002ee00 	.word	0x0002ee00
 8001c6c:	200006a4 	.word	0x200006a4
 8001c70:	40015424 	.word	0x40015424

08001c74 <HAL_SAI_MspInit>:
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a33      	ldr	r2, [pc, #204]	; (8001d50 <HAL_SAI_MspInit+0xdc>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d135      	bne.n	8001cf2 <HAL_SAI_MspInit+0x7e>
 8001c86:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <HAL_SAI_MspInit+0xe0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_SAI_MspInit+0x32>
 8001c8e:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <HAL_SAI_MspInit+0xe4>)
 8001c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c92:	4a31      	ldr	r2, [pc, #196]	; (8001d58 <HAL_SAI_MspInit+0xe4>)
 8001c94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c98:	6613      	str	r3, [r2, #96]	; 0x60
 8001c9a:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <HAL_SAI_MspInit+0xe4>)
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <HAL_SAI_MspInit+0xe0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	3301      	adds	r3, #1
 8001cac:	4a29      	ldr	r2, [pc, #164]	; (8001d54 <HAL_SAI_MspInit+0xe0>)
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	2374      	movs	r3, #116	; 0x74
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	623b      	str	r3, [r7, #32]
 8001cc0:	230d      	movs	r3, #13
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4824      	ldr	r0, [pc, #144]	; (8001d5c <HAL_SAI_MspInit+0xe8>)
 8001ccc:	f000 ff72 	bl	8002bb4 <HAL_GPIO_Init>
 8001cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	61bb      	str	r3, [r7, #24]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
 8001ce2:	230d      	movs	r3, #13
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	481b      	ldr	r0, [pc, #108]	; (8001d5c <HAL_SAI_MspInit+0xe8>)
 8001cee:	f000 ff61 	bl	8002bb4 <HAL_GPIO_Init>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a1a      	ldr	r2, [pc, #104]	; (8001d60 <HAL_SAI_MspInit+0xec>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d124      	bne.n	8001d46 <HAL_SAI_MspInit+0xd2>
 8001cfc:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_SAI_MspInit+0xe0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10b      	bne.n	8001d1c <HAL_SAI_MspInit+0xa8>
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_SAI_MspInit+0xe4>)
 8001d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d08:	4a13      	ldr	r2, [pc, #76]	; (8001d58 <HAL_SAI_MspInit+0xe4>)
 8001d0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_SAI_MspInit+0xe4>)
 8001d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_SAI_MspInit+0xe0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	3301      	adds	r3, #1
 8001d22:	4a0c      	ldr	r2, [pc, #48]	; (8001d54 <HAL_SAI_MspInit+0xe0>)
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	2303      	movs	r3, #3
 8001d34:	623b      	str	r3, [r7, #32]
 8001d36:	230d      	movs	r3, #13
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4806      	ldr	r0, [pc, #24]	; (8001d5c <HAL_SAI_MspInit+0xe8>)
 8001d42:	f000 ff37 	bl	8002bb4 <HAL_GPIO_Init>
 8001d46:	bf00      	nop
 8001d48:	3728      	adds	r7, #40	; 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40015404 	.word	0x40015404
 8001d54:	20000148 	.word	0x20000148
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	48001000 	.word	0x48001000
 8001d60:	40015424 	.word	0x40015424

08001d64 <MX_SPI2_Init>:
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <MX_SPI2_Init+0x78>)
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001d70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001d7e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001d82:	60da      	str	r2, [r3, #12]
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	615a      	str	r2, [r3, #20]
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d96:	619a      	str	r2, [r3, #24]
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001db2:	2207      	movs	r2, #7
 8001db4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	635a      	str	r2, [r3, #52]	; 0x34
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <MX_SPI2_Init+0x74>)
 8001dc4:	f006 f828 	bl	8007e18 <HAL_SPI_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_SPI2_Init+0x6e>
 8001dce:	f7ff f8a9 	bl	8000f24 <Error_Handler>
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200007ac 	.word	0x200007ac
 8001ddc:	40003800 	.word	0x40003800

08001de0 <HAL_SPI_MspInit>:
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_SPI_MspInit+0x7c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d127      	bne.n	8001e52 <HAL_SPI_MspInit+0x72>
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_SPI_MspInit+0x80>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	4a16      	ldr	r2, [pc, #88]	; (8001e60 <HAL_SPI_MspInit+0x80>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_SPI_MspInit+0x80>)
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_SPI_MspInit+0x80>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	4a10      	ldr	r2, [pc, #64]	; (8001e60 <HAL_SPI_MspInit+0x80>)
 8001e20:	f043 0308 	orr.w	r3, r3, #8
 8001e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_SPI_MspInit+0x80>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	231a      	movs	r3, #26
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	2302      	movs	r3, #2
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	2303      	movs	r3, #3
 8001e40:	623b      	str	r3, [r7, #32]
 8001e42:	2305      	movs	r3, #5
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4805      	ldr	r0, [pc, #20]	; (8001e64 <HAL_SPI_MspInit+0x84>)
 8001e4e:	f000 feb1 	bl	8002bb4 <HAL_GPIO_Init>
 8001e52:	bf00      	nop
 8001e54:	3728      	adds	r7, #40	; 0x28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40003800 	.word	0x40003800
 8001e60:	40021000 	.word	0x40021000
 8001e64:	48000c00 	.word	0x48000c00

08001e68 <ssd1306_Reset>:
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <ssd1306_WriteCommand>:
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af04      	add	r7, sp, #16
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	9302      	str	r3, [sp, #8]
 8001e88:	2301      	movs	r3, #1
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	1dfb      	adds	r3, r7, #7
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2301      	movs	r3, #1
 8001e92:	2200      	movs	r2, #0
 8001e94:	2178      	movs	r1, #120	; 0x78
 8001e96:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <ssd1306_WriteCommand+0x2c>)
 8001e98:	f002 fd14 	bl	80048c4 <HAL_I2C_Mem_Write>
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000568 	.word	0x20000568

08001ea8 <ssd1306_WriteData>:
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af04      	add	r7, sp, #16
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eba:	9202      	str	r2, [sp, #8]
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	2240      	movs	r2, #64	; 0x40
 8001ec6:	2178      	movs	r1, #120	; 0x78
 8001ec8:	4803      	ldr	r0, [pc, #12]	; (8001ed8 <ssd1306_WriteData+0x30>)
 8001eca:	f002 fcfb 	bl	80048c4 <HAL_I2C_Mem_Write>
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000568 	.word	0x20000568

08001edc <ssd1306_Init>:
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	f7ff ffc2 	bl	8001e68 <ssd1306_Reset>
 8001ee4:	2064      	movs	r0, #100	; 0x64
 8001ee6:	f000 fd19 	bl	800291c <HAL_Delay>
 8001eea:	20ae      	movs	r0, #174	; 0xae
 8001eec:	f7ff ffc4 	bl	8001e78 <ssd1306_WriteCommand>
 8001ef0:	2020      	movs	r0, #32
 8001ef2:	f7ff ffc1 	bl	8001e78 <ssd1306_WriteCommand>
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff ffbe 	bl	8001e78 <ssd1306_WriteCommand>
 8001efc:	20b0      	movs	r0, #176	; 0xb0
 8001efe:	f7ff ffbb 	bl	8001e78 <ssd1306_WriteCommand>
 8001f02:	20c8      	movs	r0, #200	; 0xc8
 8001f04:	f7ff ffb8 	bl	8001e78 <ssd1306_WriteCommand>
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7ff ffb5 	bl	8001e78 <ssd1306_WriteCommand>
 8001f0e:	2010      	movs	r0, #16
 8001f10:	f7ff ffb2 	bl	8001e78 <ssd1306_WriteCommand>
 8001f14:	2040      	movs	r0, #64	; 0x40
 8001f16:	f7ff ffaf 	bl	8001e78 <ssd1306_WriteCommand>
 8001f1a:	2081      	movs	r0, #129	; 0x81
 8001f1c:	f7ff ffac 	bl	8001e78 <ssd1306_WriteCommand>
 8001f20:	20ff      	movs	r0, #255	; 0xff
 8001f22:	f7ff ffa9 	bl	8001e78 <ssd1306_WriteCommand>
 8001f26:	20a1      	movs	r0, #161	; 0xa1
 8001f28:	f7ff ffa6 	bl	8001e78 <ssd1306_WriteCommand>
 8001f2c:	20a6      	movs	r0, #166	; 0xa6
 8001f2e:	f7ff ffa3 	bl	8001e78 <ssd1306_WriteCommand>
 8001f32:	20a8      	movs	r0, #168	; 0xa8
 8001f34:	f7ff ffa0 	bl	8001e78 <ssd1306_WriteCommand>
 8001f38:	203f      	movs	r0, #63	; 0x3f
 8001f3a:	f7ff ff9d 	bl	8001e78 <ssd1306_WriteCommand>
 8001f3e:	20a4      	movs	r0, #164	; 0xa4
 8001f40:	f7ff ff9a 	bl	8001e78 <ssd1306_WriteCommand>
 8001f44:	20d3      	movs	r0, #211	; 0xd3
 8001f46:	f7ff ff97 	bl	8001e78 <ssd1306_WriteCommand>
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f7ff ff94 	bl	8001e78 <ssd1306_WriteCommand>
 8001f50:	20d5      	movs	r0, #213	; 0xd5
 8001f52:	f7ff ff91 	bl	8001e78 <ssd1306_WriteCommand>
 8001f56:	20f0      	movs	r0, #240	; 0xf0
 8001f58:	f7ff ff8e 	bl	8001e78 <ssd1306_WriteCommand>
 8001f5c:	20d9      	movs	r0, #217	; 0xd9
 8001f5e:	f7ff ff8b 	bl	8001e78 <ssd1306_WriteCommand>
 8001f62:	2022      	movs	r0, #34	; 0x22
 8001f64:	f7ff ff88 	bl	8001e78 <ssd1306_WriteCommand>
 8001f68:	20da      	movs	r0, #218	; 0xda
 8001f6a:	f7ff ff85 	bl	8001e78 <ssd1306_WriteCommand>
 8001f6e:	2012      	movs	r0, #18
 8001f70:	f7ff ff82 	bl	8001e78 <ssd1306_WriteCommand>
 8001f74:	20db      	movs	r0, #219	; 0xdb
 8001f76:	f7ff ff7f 	bl	8001e78 <ssd1306_WriteCommand>
 8001f7a:	2020      	movs	r0, #32
 8001f7c:	f7ff ff7c 	bl	8001e78 <ssd1306_WriteCommand>
 8001f80:	208d      	movs	r0, #141	; 0x8d
 8001f82:	f7ff ff79 	bl	8001e78 <ssd1306_WriteCommand>
 8001f86:	2014      	movs	r0, #20
 8001f88:	f7ff ff76 	bl	8001e78 <ssd1306_WriteCommand>
 8001f8c:	20af      	movs	r0, #175	; 0xaf
 8001f8e:	f7ff ff73 	bl	8001e78 <ssd1306_WriteCommand>
 8001f92:	2000      	movs	r0, #0
 8001f94:	f000 f810 	bl	8001fb8 <ssd1306_Fill>
 8001f98:	f000 f830 	bl	8001ffc <ssd1306_UpdateScreen>
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <ssd1306_Init+0xd8>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	801a      	strh	r2, [r3, #0]
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <ssd1306_Init+0xd8>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	805a      	strh	r2, [r3, #2]
 8001fa8:	4b02      	ldr	r3, [pc, #8]	; (8001fb4 <ssd1306_Init+0xd8>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	715a      	strb	r2, [r3, #5]
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000054c 	.word	0x2000054c

08001fb8 <ssd1306_Fill>:
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e00d      	b.n	8001fe4 <ssd1306_Fill+0x2c>
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <ssd1306_Fill+0x1a>
 8001fce:	2100      	movs	r1, #0
 8001fd0:	e000      	b.n	8001fd4 <ssd1306_Fill+0x1c>
 8001fd2:	21ff      	movs	r1, #255	; 0xff
 8001fd4:	4a08      	ldr	r2, [pc, #32]	; (8001ff8 <ssd1306_Fill+0x40>)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4413      	add	r3, r2
 8001fda:	460a      	mov	r2, r1
 8001fdc:	701a      	strb	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fea:	d3ed      	bcc.n	8001fc8 <ssd1306_Fill+0x10>
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	2000014c 	.word	0x2000014c

08001ffc <ssd1306_UpdateScreen>:
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	2300      	movs	r3, #0
 8002004:	71fb      	strb	r3, [r7, #7]
 8002006:	e016      	b.n	8002036 <ssd1306_UpdateScreen+0x3a>
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	3b50      	subs	r3, #80	; 0x50
 800200c:	b2db      	uxtb	r3, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff32 	bl	8001e78 <ssd1306_WriteCommand>
 8002014:	2000      	movs	r0, #0
 8002016:	f7ff ff2f 	bl	8001e78 <ssd1306_WriteCommand>
 800201a:	2010      	movs	r0, #16
 800201c:	f7ff ff2c 	bl	8001e78 <ssd1306_WriteCommand>
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	01db      	lsls	r3, r3, #7
 8002024:	4a07      	ldr	r2, [pc, #28]	; (8002044 <ssd1306_UpdateScreen+0x48>)
 8002026:	4413      	add	r3, r2
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff3c 	bl	8001ea8 <ssd1306_WriteData>
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	3301      	adds	r3, #1
 8002034:	71fb      	strb	r3, [r7, #7]
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2b07      	cmp	r3, #7
 800203a:	d9e5      	bls.n	8002008 <ssd1306_UpdateScreen+0xc>
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	2000014c 	.word	0x2000014c

08002048 <ssd1306_DrawPixel>:
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
 8002052:	460b      	mov	r3, r1
 8002054:	71bb      	strb	r3, [r7, #6]
 8002056:	4613      	mov	r3, r2
 8002058:	717b      	strb	r3, [r7, #5]
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db48      	blt.n	80020f4 <ssd1306_DrawPixel+0xac>
 8002062:	79bb      	ldrb	r3, [r7, #6]
 8002064:	2b3f      	cmp	r3, #63	; 0x3f
 8002066:	d845      	bhi.n	80020f4 <ssd1306_DrawPixel+0xac>
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <ssd1306_DrawPixel+0xb8>)
 800206a:	791b      	ldrb	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <ssd1306_DrawPixel+0x36>
 8002070:	797b      	ldrb	r3, [r7, #5]
 8002072:	2b00      	cmp	r3, #0
 8002074:	bf0c      	ite	eq
 8002076:	2301      	moveq	r3, #1
 8002078:	2300      	movne	r3, #0
 800207a:	b2db      	uxtb	r3, r3
 800207c:	717b      	strb	r3, [r7, #5]
 800207e:	797b      	ldrb	r3, [r7, #5]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d11a      	bne.n	80020ba <ssd1306_DrawPixel+0x72>
 8002084:	79fa      	ldrb	r2, [r7, #7]
 8002086:	79bb      	ldrb	r3, [r7, #6]
 8002088:	08db      	lsrs	r3, r3, #3
 800208a:	b2d8      	uxtb	r0, r3
 800208c:	4603      	mov	r3, r0
 800208e:	01db      	lsls	r3, r3, #7
 8002090:	4413      	add	r3, r2
 8002092:	4a1c      	ldr	r2, [pc, #112]	; (8002104 <ssd1306_DrawPixel+0xbc>)
 8002094:	5cd3      	ldrb	r3, [r2, r3]
 8002096:	b25a      	sxtb	r2, r3
 8002098:	79bb      	ldrb	r3, [r7, #6]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	2101      	movs	r1, #1
 80020a0:	fa01 f303 	lsl.w	r3, r1, r3
 80020a4:	b25b      	sxtb	r3, r3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b259      	sxtb	r1, r3
 80020aa:	79fa      	ldrb	r2, [r7, #7]
 80020ac:	4603      	mov	r3, r0
 80020ae:	01db      	lsls	r3, r3, #7
 80020b0:	4413      	add	r3, r2
 80020b2:	b2c9      	uxtb	r1, r1
 80020b4:	4a13      	ldr	r2, [pc, #76]	; (8002104 <ssd1306_DrawPixel+0xbc>)
 80020b6:	54d1      	strb	r1, [r2, r3]
 80020b8:	e01d      	b.n	80020f6 <ssd1306_DrawPixel+0xae>
 80020ba:	79fa      	ldrb	r2, [r7, #7]
 80020bc:	79bb      	ldrb	r3, [r7, #6]
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	b2d8      	uxtb	r0, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	01db      	lsls	r3, r3, #7
 80020c6:	4413      	add	r3, r2
 80020c8:	4a0e      	ldr	r2, [pc, #56]	; (8002104 <ssd1306_DrawPixel+0xbc>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	b25a      	sxtb	r2, r3
 80020ce:	79bb      	ldrb	r3, [r7, #6]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	2101      	movs	r1, #1
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	b25b      	sxtb	r3, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	b25b      	sxtb	r3, r3
 80020e0:	4013      	ands	r3, r2
 80020e2:	b259      	sxtb	r1, r3
 80020e4:	79fa      	ldrb	r2, [r7, #7]
 80020e6:	4603      	mov	r3, r0
 80020e8:	01db      	lsls	r3, r3, #7
 80020ea:	4413      	add	r3, r2
 80020ec:	b2c9      	uxtb	r1, r1
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <ssd1306_DrawPixel+0xbc>)
 80020f0:	54d1      	strb	r1, [r2, r3]
 80020f2:	e000      	b.n	80020f6 <ssd1306_DrawPixel+0xae>
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	2000054c 	.word	0x2000054c
 8002104:	2000014c 	.word	0x2000014c

08002108 <ssd1306_WriteChar>:
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b089      	sub	sp, #36	; 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	4604      	mov	r4, r0
 8002110:	1d38      	adds	r0, r7, #4
 8002112:	e880 0006 	stmia.w	r0, {r1, r2}
 8002116:	461a      	mov	r2, r3
 8002118:	4623      	mov	r3, r4
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	4613      	mov	r3, r2
 800211e:	73bb      	strb	r3, [r7, #14]
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	2b1f      	cmp	r3, #31
 8002124:	d902      	bls.n	800212c <ssd1306_WriteChar+0x24>
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	2b7e      	cmp	r3, #126	; 0x7e
 800212a:	d901      	bls.n	8002130 <ssd1306_WriteChar+0x28>
 800212c:	2300      	movs	r3, #0
 800212e:	e06d      	b.n	800220c <ssd1306_WriteChar+0x104>
 8002130:	4b38      	ldr	r3, [pc, #224]	; (8002214 <ssd1306_WriteChar+0x10c>)
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	793b      	ldrb	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	2b80      	cmp	r3, #128	; 0x80
 800213c:	dc06      	bgt.n	800214c <ssd1306_WriteChar+0x44>
 800213e:	4b35      	ldr	r3, [pc, #212]	; (8002214 <ssd1306_WriteChar+0x10c>)
 8002140:	885b      	ldrh	r3, [r3, #2]
 8002142:	461a      	mov	r2, r3
 8002144:	797b      	ldrb	r3, [r7, #5]
 8002146:	4413      	add	r3, r2
 8002148:	2b40      	cmp	r3, #64	; 0x40
 800214a:	dd01      	ble.n	8002150 <ssd1306_WriteChar+0x48>
 800214c:	2300      	movs	r3, #0
 800214e:	e05d      	b.n	800220c <ssd1306_WriteChar+0x104>
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	e04c      	b.n	80021f0 <ssd1306_WriteChar+0xe8>
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	3b20      	subs	r3, #32
 800215c:	7979      	ldrb	r1, [r7, #5]
 800215e:	fb01 f303 	mul.w	r3, r1, r3
 8002162:	4619      	mov	r1, r3
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	440b      	add	r3, r1
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]
 8002174:	e034      	b.n	80021e0 <ssd1306_WriteChar+0xd8>
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d012      	beq.n	80021ac <ssd1306_WriteChar+0xa4>
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <ssd1306_WriteChar+0x10c>)
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	4413      	add	r3, r2
 8002192:	b2d8      	uxtb	r0, r3
 8002194:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <ssd1306_WriteChar+0x10c>)
 8002196:	885b      	ldrh	r3, [r3, #2]
 8002198:	b2da      	uxtb	r2, r3
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	4413      	add	r3, r2
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	7bba      	ldrb	r2, [r7, #14]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f7ff ff4f 	bl	8002048 <ssd1306_DrawPixel>
 80021aa:	e016      	b.n	80021da <ssd1306_WriteChar+0xd2>
 80021ac:	4b19      	ldr	r3, [pc, #100]	; (8002214 <ssd1306_WriteChar+0x10c>)
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	b2d8      	uxtb	r0, r3
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <ssd1306_WriteChar+0x10c>)
 80021bc:	885b      	ldrh	r3, [r3, #2]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	b2d9      	uxtb	r1, r3
 80021c8:	7bbb      	ldrb	r3, [r7, #14]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bf0c      	ite	eq
 80021ce:	2301      	moveq	r3, #1
 80021d0:	2300      	movne	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	f7ff ff37 	bl	8002048 <ssd1306_DrawPixel>
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	3301      	adds	r3, #1
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	793b      	ldrb	r3, [r7, #4]
 80021e2:	461a      	mov	r2, r3
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d3c5      	bcc.n	8002176 <ssd1306_WriteChar+0x6e>
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3301      	adds	r3, #1
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	797b      	ldrb	r3, [r7, #5]
 80021f2:	461a      	mov	r2, r3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d3ad      	bcc.n	8002156 <ssd1306_WriteChar+0x4e>
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <ssd1306_WriteChar+0x10c>)
 80021fc:	881a      	ldrh	r2, [r3, #0]
 80021fe:	793b      	ldrb	r3, [r7, #4]
 8002200:	b29b      	uxth	r3, r3
 8002202:	4413      	add	r3, r2
 8002204:	b29a      	uxth	r2, r3
 8002206:	4b03      	ldr	r3, [pc, #12]	; (8002214 <ssd1306_WriteChar+0x10c>)
 8002208:	801a      	strh	r2, [r3, #0]
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	4618      	mov	r0, r3
 800220e:	3724      	adds	r7, #36	; 0x24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd90      	pop	{r4, r7, pc}
 8002214:	2000054c 	.word	0x2000054c

08002218 <ssd1306_WriteString>:
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	1d38      	adds	r0, r7, #4
 8002222:	e880 0006 	stmia.w	r0, {r1, r2}
 8002226:	70fb      	strb	r3, [r7, #3]
 8002228:	e012      	b.n	8002250 <ssd1306_WriteString+0x38>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	7818      	ldrb	r0, [r3, #0]
 800222e:	78fb      	ldrb	r3, [r7, #3]
 8002230:	1d3a      	adds	r2, r7, #4
 8002232:	ca06      	ldmia	r2, {r1, r2}
 8002234:	f7ff ff68 	bl	8002108 <ssd1306_WriteChar>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d002      	beq.n	800224a <ssd1306_WriteString+0x32>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	e008      	b.n	800225c <ssd1306_WriteString+0x44>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	3301      	adds	r3, #1
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e8      	bne.n	800222a <ssd1306_WriteString+0x12>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <ssd1306_SetCursor>:
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	460a      	mov	r2, r1
 800226e:	71fb      	strb	r3, [r7, #7]
 8002270:	4613      	mov	r3, r2
 8002272:	71bb      	strb	r3, [r7, #6]
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	b29a      	uxth	r2, r3
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <ssd1306_SetCursor+0x2c>)
 800227a:	801a      	strh	r2, [r3, #0]
 800227c:	79bb      	ldrb	r3, [r7, #6]
 800227e:	b29a      	uxth	r2, r3
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <ssd1306_SetCursor+0x2c>)
 8002282:	805a      	strh	r2, [r3, #2]
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	2000054c 	.word	0x2000054c

08002294 <BSP_LED_Init>:
  *     @arg LED3
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
  *     @arg LED4
  * @retval None
  */
#endif
<<<<<<< HEAD
void BSP_LED_Init(Led_TypeDef Led)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10c      	bne.n	8002382 <BSP_LED_Init+0x2a>
 8002368:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <BSP_LED_Init+0x90>)
 800236a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236c:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <BSP_LED_Init+0x90>)
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002374:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <BSP_LED_Init+0x90>)
 8002376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	e00e      	b.n	80023a0 <BSP_LED_Init+0x48>
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d10b      	bne.n	80023a0 <BSP_LED_Init+0x48>
 8002388:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <BSP_LED_Init+0x90>)
 800238a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238c:	4a16      	ldr	r2, [pc, #88]	; (80023e8 <BSP_LED_Init+0x90>)
 800238e:	f043 0310 	orr.w	r3, r3, #16
 8002392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <BSP_LED_Init+0x90>)
 8002396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.Pin = LED_PIN[Led];
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <BSP_LED_Init+0x94>)
 80023a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80023aa:	2301      	movs	r3, #1
 80023ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStructure);
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	4a0d      	ldr	r2, [pc, #52]	; (80023f0 <BSP_LED_Init+0x98>)
 80023ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023be:	f107 0214 	add.w	r2, r7, #20
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 fc57 	bl	8002c78 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], GPIO_InitStructure.Pin, GPIO_PIN_RESET);
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <BSP_LED_Init+0x98>)
 80023ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	b291      	uxth	r1, r2
 80023d6:	2200      	movs	r2, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fe0d 	bl	8002ff8 <HAL_GPIO_WritePin>
}
 80023de:	bf00      	nop
 80023e0:	3728      	adds	r7, #40	; 0x28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	0800e2ec 	.word	0x0800e2ec
 80023f0:	20000018 	.word	0x20000018

080023f4 <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <BSP_LCD_GLASS_Init+0x6c>)
 80023fa:	4a1a      	ldr	r2, [pc, #104]	; (8002464 <BSP_LCD_GLASS_Init+0x70>)
 80023fc:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 80023fe:	4b18      	ldr	r3, [pc, #96]	; (8002460 <BSP_LCD_GLASS_Init+0x6c>)
 8002400:	2200      	movs	r2, #0
 8002402:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8002404:	4b16      	ldr	r3, [pc, #88]	; (8002460 <BSP_LCD_GLASS_Init+0x6c>)
 8002406:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800240a:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 800240c:	4b14      	ldr	r3, [pc, #80]	; (8002460 <BSP_LCD_GLASS_Init+0x6c>)
 800240e:	220c      	movs	r2, #12
 8002410:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8002412:	4b13      	ldr	r3, [pc, #76]	; (8002460 <BSP_LCD_GLASS_Init+0x6c>)
 8002414:	2240      	movs	r2, #64	; 0x40
 8002416:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <BSP_LCD_GLASS_Init+0x6c>)
 800241a:	2200      	movs	r2, #0
 800241c:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <BSP_LCD_GLASS_Init+0x6c>)
 8002420:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8002424:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <BSP_LCD_GLASS_Init+0x6c>)
 8002428:	2200      	movs	r2, #0
 800242a:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <BSP_LCD_GLASS_Init+0x6c>)
 800242e:	2240      	movs	r2, #64	; 0x40
 8002430:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <BSP_LCD_GLASS_Init+0x6c>)
 8002434:	2200      	movs	r2, #0
 8002436:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <BSP_LCD_GLASS_Init+0x6c>)
 800243a:	2200      	movs	r2, #0
 800243c:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <BSP_LCD_GLASS_Init+0x6c>)
 8002440:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002444:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <BSP_LCD_GLASS_Init+0x6c>)
 8002448:	2200      	movs	r2, #0
 800244a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 800244c:	4804      	ldr	r0, [pc, #16]	; (8002460 <BSP_LCD_GLASS_Init+0x6c>)
 800244e:	f000 f815 	bl	800247c <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 8002452:	4803      	ldr	r0, [pc, #12]	; (8002460 <BSP_LCD_GLASS_Init+0x6c>)
 8002454:	f002 fe0c 	bl	8005070 <HAL_LCD_Init>

  BSP_LCD_GLASS_Clear();
 8002458:	f000 f806 	bl	8002468 <BSP_LCD_GLASS_Clear>
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200007bc 	.word	0x200007bc
 8002464:	40002400 	.word	0x40002400

08002468 <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <BSP_LCD_GLASS_Clear+0x10>)
 800246e:	f002 febf 	bl	80051f0 <HAL_LCD_Clear>
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200007bc 	.word	0x200007bc

0800247c <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b0c0      	sub	sp, #256	; 0x100
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002484:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 8002494:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002498:	2244      	movs	r2, #68	; 0x44
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f009 fb63 	bl	800bb68 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 80024a2:	f107 0320 	add.w	r3, r7, #32
 80024a6:	2288      	movs	r2, #136	; 0x88
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f009 fb5c 	bl	800bb68 <memset>

  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b0:	4b51      	ldr	r3, [pc, #324]	; (80025f8 <LCD_MspInit+0x17c>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	4a50      	ldr	r2, [pc, #320]	; (80025f8 <LCD_MspInit+0x17c>)
 80024b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ba:	6593      	str	r3, [r2, #88]	; 0x58
 80024bc:	4b4e      	ldr	r3, [pc, #312]	; (80025f8 <LCD_MspInit+0x17c>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	69fb      	ldr	r3, [r7, #28]

  /*##-2- Configure LSE as RTC clock soucre ###################################*/
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 80024c8:	2304      	movs	r3, #4
 80024ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 80024d4:	2301      	movs	r3, #1
 80024d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 80024da:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 f882 	bl	80055e8 <HAL_RCC_OscConfig>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d000      	beq.n	80024ec <LCD_MspInit+0x70>
  {
    while (1);
 80024ea:	e7fe      	b.n	80024ea <LCD_MspInit+0x6e>
  }

  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024f0:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80024f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 80024fa:	f107 0320 	add.w	r3, r7, #32
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 fe26 	bl	8006150 <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002504:	4b3c      	ldr	r3, [pc, #240]	; (80025f8 <LCD_MspInit+0x17c>)
 8002506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002508:	4a3b      	ldr	r2, [pc, #236]	; (80025f8 <LCD_MspInit+0x17c>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002510:	4b39      	ldr	r3, [pc, #228]	; (80025f8 <LCD_MspInit+0x17c>)
 8002512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800251c:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <LCD_MspInit+0x17c>)
 800251e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002520:	4a35      	ldr	r2, [pc, #212]	; (80025f8 <LCD_MspInit+0x17c>)
 8002522:	f043 0302 	orr.w	r3, r3, #2
 8002526:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002528:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <LCD_MspInit+0x17c>)
 800252a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002534:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <LCD_MspInit+0x17c>)
 8002536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002538:	4a2f      	ldr	r2, [pc, #188]	; (80025f8 <LCD_MspInit+0x17c>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002540:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <LCD_MspInit+0x17c>)
 8002542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800254c:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <LCD_MspInit+0x17c>)
 800254e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002550:	4a29      	ldr	r2, [pc, #164]	; (80025f8 <LCD_MspInit+0x17c>)
 8002552:	f043 0308 	orr.w	r3, r3, #8
 8002556:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002558:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <LCD_MspInit+0x17c>)
 800255a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]


  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8002564:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8002568:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 800257e:	230b      	movs	r3, #11
 8002580:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8002584:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002588:	4619      	mov	r1, r3
 800258a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800258e:	f000 fb73 	bl	8002c78 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 8002592:	f24f 2333 	movw	r3, #62003	; 0xf233
 8002596:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 800259a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800259e:	4619      	mov	r1, r3
 80025a0:	4816      	ldr	r0, [pc, #88]	; (80025fc <LCD_MspInit+0x180>)
 80025a2:	f000 fb69 	bl	8002c78 <HAL_GPIO_Init>

  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 80025a6:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80025aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80025ae:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025b2:	4619      	mov	r1, r3
 80025b4:	4812      	ldr	r0, [pc, #72]	; (8002600 <LCD_MspInit+0x184>)
 80025b6:	f000 fb5f 	bl	8002c78 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 80025ba:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80025be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80025c2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025c6:	4619      	mov	r1, r3
 80025c8:	480e      	ldr	r0, [pc, #56]	; (8002604 <LCD_MspInit+0x188>)
 80025ca:	f000 fb55 	bl	8002c78 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 80025ce:	2002      	movs	r0, #2
 80025d0:	f000 fa06 	bl	80029e0 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <LCD_MspInit+0x17c>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <LCD_MspInit+0x17c>)
 80025da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025de:	6593      	str	r3, [r2, #88]	; 0x58
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <LCD_MspInit+0x17c>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]
}
 80025ec:	bf00      	nop
 80025ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	48000400 	.word	0x48000400
 8002600:	48000800 	.word	0x48000800
 8002604:	48000c00 	.word	0x48000c00

08002608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <HAL_MspInit+0x44>)
 8002610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002612:	4a0e      	ldr	r2, [pc, #56]	; (800264c <HAL_MspInit+0x44>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6613      	str	r3, [r2, #96]	; 0x60
 800261a:	4b0c      	ldr	r3, [pc, #48]	; (800264c <HAL_MspInit+0x44>)
 800261c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	607b      	str	r3, [r7, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_MspInit+0x44>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	4a08      	ldr	r2, [pc, #32]	; (800264c <HAL_MspInit+0x44>)
 800262c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002630:	6593      	str	r3, [r2, #88]	; 0x58
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_MspInit+0x44>)
 8002634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000

08002650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	ssd1306_Fill(Black);
 8002664:	2000      	movs	r0, #0
 8002666:	f7ff fd09 	bl	800207c <ssd1306_Fill>
	ssd1306_SetCursor(2, 26);
 800266a:	211a      	movs	r1, #26
 800266c:	2002      	movs	r0, #2
 800266e:	f7ff fe5b 	bl	8002328 <ssd1306_SetCursor>
	ssd1306_WriteString("HARDWARE ERROR", Font_6x8, White);
 8002672:	4a07      	ldr	r2, [pc, #28]	; (8002690 <HardFault_Handler+0x30>)
 8002674:	2301      	movs	r3, #1
 8002676:	ca06      	ldmia	r2, {r1, r2}
 8002678:	4806      	ldr	r0, [pc, #24]	; (8002694 <HardFault_Handler+0x34>)
 800267a:	f7ff fe2f 	bl	80022dc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800267e:	f7ff fd1f 	bl	80020c0 <ssd1306_UpdateScreen>

	HAL_Delay(1000);
 8002682:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002686:	f000 f9ab 	bl	80029e0 <HAL_Delay>
	HAL_NVIC_SystemReset();
 800268a:	f000 fae4 	bl	8002c56 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800268e:	e7fe      	b.n	800268e <HardFault_Handler+0x2e>
 8002690:	20000000 	.word	0x20000000
 8002694:	0800c4d4 	.word	0x0800c4d4

08002698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800269c:	e7fe      	b.n	800269c <MemManage_Handler+0x4>

0800269e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026a2:	e7fe      	b.n	80026a2 <BusFault_Handler+0x4>

080026a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a8:	e7fe      	b.n	80026a8 <UsageFault_Handler+0x4>

080026aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026d8:	f000 f964 	bl	80029a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}

080026e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <OTG_FS_IRQHandler+0x10>)
 80026e6:	f000 ff21 	bl	800352c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000c48 	.word	0x20000c48

080026f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <_sbrk+0x50>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <_sbrk+0x16>
		heap_end = &end;
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <_sbrk+0x50>)
 8002706:	4a10      	ldr	r2, [pc, #64]	; (8002748 <_sbrk+0x54>)
 8002708:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <_sbrk+0x50>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <_sbrk+0x50>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4413      	add	r3, r2
 8002718:	466a      	mov	r2, sp
 800271a:	4293      	cmp	r3, r2
 800271c:	d907      	bls.n	800272e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800271e:	f009 f9c5 	bl	800baac <__errno>
 8002722:	4602      	mov	r2, r0
 8002724:	230c      	movs	r3, #12
 8002726:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002728:	f04f 33ff 	mov.w	r3, #4294967295
 800272c:	e006      	b.n	800273c <_sbrk+0x48>
	}

	heap_end += incr;
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <_sbrk+0x50>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	4a03      	ldr	r2, [pc, #12]	; (8002744 <_sbrk+0x50>)
 8002738:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800273a:	68fb      	ldr	r3, [r7, #12]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	200004f0 	.word	0x200004f0
 8002748:	20000f10 	.word	0x20000f10

0800274c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002750:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <SystemInit+0x64>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	4a16      	ldr	r2, [pc, #88]	; (80027b0 <SystemInit+0x64>)
 8002758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800275c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002760:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <SystemInit+0x68>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <SystemInit+0x68>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <SystemInit+0x68>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <SystemInit+0x68>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a0f      	ldr	r2, [pc, #60]	; (80027b4 <SystemInit+0x68>)
 8002778:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800277c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002780:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <SystemInit+0x68>)
 8002784:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002788:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <SystemInit+0x68>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <SystemInit+0x68>)
 8002790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002794:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <SystemInit+0x68>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800279c:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <SystemInit+0x64>)
 800279e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027a2:	609a      	str	r2, [r3, #8]
#endif
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000ed00 	.word	0xe000ed00
 80027b4:	40021000 	.word	0x40021000

080027b8 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80027bc:	4b14      	ldr	r3, [pc, #80]	; (8002810 <MX_UART4_Init+0x58>)
 80027be:	4a15      	ldr	r2, [pc, #84]	; (8002814 <MX_UART4_Init+0x5c>)
 80027c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80027c2:	4b13      	ldr	r3, [pc, #76]	; (8002810 <MX_UART4_Init+0x58>)
 80027c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80027ca:	4b11      	ldr	r3, [pc, #68]	; (8002810 <MX_UART4_Init+0x58>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <MX_UART4_Init+0x58>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80027d6:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <MX_UART4_Init+0x58>)
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <MX_UART4_Init+0x58>)
 80027de:	220c      	movs	r2, #12
 80027e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <MX_UART4_Init+0x58>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e8:	4b09      	ldr	r3, [pc, #36]	; (8002810 <MX_UART4_Init+0x58>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <MX_UART4_Init+0x58>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <MX_UART4_Init+0x58>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80027fa:	4805      	ldr	r0, [pc, #20]	; (8002810 <MX_UART4_Init+0x58>)
 80027fc:	f005 fbf8 	bl	8007ff0 <HAL_UART_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002806:	f7fe fb8d 	bl	8000f24 <Error_Handler>
  }

}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200007f8 	.word	0x200007f8
 8002814:	40004c00 	.word	0x40004c00

08002818 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a17      	ldr	r2, [pc, #92]	; (8002894 <HAL_UART_MspInit+0x7c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d128      	bne.n	800288c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800283a:	4b17      	ldr	r3, [pc, #92]	; (8002898 <HAL_UART_MspInit+0x80>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	4a16      	ldr	r2, [pc, #88]	; (8002898 <HAL_UART_MspInit+0x80>)
 8002840:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002844:	6593      	str	r3, [r2, #88]	; 0x58
 8002846:	4b14      	ldr	r3, [pc, #80]	; (8002898 <HAL_UART_MspInit+0x80>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_UART_MspInit+0x80>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	4a10      	ldr	r2, [pc, #64]	; (8002898 <HAL_UART_MspInit+0x80>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_UART_MspInit+0x80>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800286a:	2303      	movs	r3, #3
 800286c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002876:	2303      	movs	r3, #3
 8002878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800287a:	2308      	movs	r3, #8
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287e:	f107 0314 	add.w	r3, r7, #20
 8002882:	4619      	mov	r1, r3
 8002884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002888:	f000 f9f6 	bl	8002c78 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800288c:	bf00      	nop
 800288e:	3728      	adds	r7, #40	; 0x28
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40004c00 	.word	0x40004c00
 8002898:	40021000 	.word	0x40021000

0800289c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800289c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80028a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80028a2:	e003      	b.n	80028ac <LoopCopyDataInit>

080028a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80028a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80028a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80028aa:	3104      	adds	r1, #4

080028ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80028ac:	480b      	ldr	r0, [pc, #44]	; (80028dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80028b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80028b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80028b4:	d3f6      	bcc.n	80028a4 <CopyDataInit>
	ldr	r2, =_sbss
 80028b6:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80028b8:	e002      	b.n	80028c0 <LoopFillZerobss>

080028ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80028ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80028bc:	f842 3b04 	str.w	r3, [r2], #4

080028c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <LoopForever+0x16>)
	cmp	r2, r3
 80028c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80028c4:	d3f9      	bcc.n	80028ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028c6:	f7ff ff41 	bl	800274c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ca:	f009 f8f5 	bl	800bab8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028ce:	f7fe fa5f 	bl	8000d90 <main>

080028d2 <LoopForever>:

LoopForever:
    b LoopForever
 80028d2:	e7fe      	b.n	80028d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028d4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80028d8:	0800e37c 	.word	0x0800e37c
	ldr	r0, =_sdata
 80028dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80028e0:	200000b0 	.word	0x200000b0
	ldr	r2, =_sbss
 80028e4:	200000b0 	.word	0x200000b0
	ldr	r3, = _ebss
 80028e8:	20000f10 	.word	0x20000f10

080028ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028ec:	e7fe      	b.n	80028ec <ADC1_2_IRQHandler>
	...

080028f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <HAL_Init+0x3c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a0b      	ldr	r2, [pc, #44]	; (800292c <HAL_Init+0x3c>)
 8002900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002904:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002906:	2003      	movs	r0, #3
 8002908:	f000 f970 	bl	8002bec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800290c:	2000      	movs	r0, #0
 800290e:	f000 f80f 	bl	8002930 <HAL_InitTick>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	71fb      	strb	r3, [r7, #7]
 800291c:	e001      	b.n	8002922 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800291e:	f7ff fe73 	bl	8002608 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002922:	79fb      	ldrb	r3, [r7, #7]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40022000 	.word	0x40022000

08002930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800293c:	4b16      	ldr	r3, [pc, #88]	; (8002998 <HAL_InitTick+0x68>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d022      	beq.n	800298a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002944:	4b15      	ldr	r3, [pc, #84]	; (800299c <HAL_InitTick+0x6c>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b13      	ldr	r3, [pc, #76]	; (8002998 <HAL_InitTick+0x68>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002950:	fbb1 f3f3 	udiv	r3, r1, r3
 8002954:	fbb2 f3f3 	udiv	r3, r2, r3
 8002958:	4618      	mov	r0, r3
 800295a:	f000 f980 	bl	8002c5e <HAL_SYSTICK_Config>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10f      	bne.n	8002984 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b0f      	cmp	r3, #15
 8002968:	d809      	bhi.n	800297e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800296a:	2200      	movs	r2, #0
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	f04f 30ff 	mov.w	r0, #4294967295
 8002972:	f000 f946 	bl	8002c02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002976:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <HAL_InitTick+0x70>)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	e007      	b.n	800298e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
 8002982:	e004      	b.n	800298e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	e001      	b.n	800298e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800298e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000028 	.word	0x20000028
 800299c:	20000020 	.word	0x20000020
 80029a0:	20000024 	.word	0x20000024

080029a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_IncTick+0x1c>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_IncTick+0x20>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4413      	add	r3, r2
 80029b2:	4a03      	ldr	r2, [pc, #12]	; (80029c0 <HAL_IncTick+0x1c>)
 80029b4:	6013      	str	r3, [r2, #0]
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	20000878 	.word	0x20000878
 80029c4:	20000028 	.word	0x20000028

080029c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return uwTick;
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <HAL_GetTick+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000878 	.word	0x20000878

080029e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e8:	f7ff ffee 	bl	80029c8 <HAL_GetTick>
 80029ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d004      	beq.n	8002a04 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_Delay+0x40>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4413      	add	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a04:	bf00      	nop
 8002a06:	f7ff ffdf 	bl	80029c8 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d8f7      	bhi.n	8002a06 <HAL_Delay+0x26>
  {
  }
}
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000028 	.word	0x20000028

08002a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a40:	4013      	ands	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a56:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	60d3      	str	r3, [r2, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <__NVIC_GetPriorityGrouping+0x18>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	0a1b      	lsrs	r3, r3, #8
 8002a76:	f003 0307 	and.w	r3, r3, #7
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	db0b      	blt.n	8002ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	4907      	ldr	r1, [pc, #28]	; (8002ac0 <__NVIC_EnableIRQ+0x38>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000e100 	.word	0xe000e100

08002ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	6039      	str	r1, [r7, #0]
 8002ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	db0a      	blt.n	8002aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	490c      	ldr	r1, [pc, #48]	; (8002b10 <__NVIC_SetPriority+0x4c>)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	0112      	lsls	r2, r2, #4
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aec:	e00a      	b.n	8002b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4908      	ldr	r1, [pc, #32]	; (8002b14 <__NVIC_SetPriority+0x50>)
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	3b04      	subs	r3, #4
 8002afc:	0112      	lsls	r2, r2, #4
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	440b      	add	r3, r1
 8002b02:	761a      	strb	r2, [r3, #24]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000e100 	.word	0xe000e100
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b089      	sub	sp, #36	; 0x24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f1c3 0307 	rsb	r3, r3, #7
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	bf28      	it	cs
 8002b36:	2304      	movcs	r3, #4
 8002b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2b06      	cmp	r3, #6
 8002b40:	d902      	bls.n	8002b48 <NVIC_EncodePriority+0x30>
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3b03      	subs	r3, #3
 8002b46:	e000      	b.n	8002b4a <NVIC_EncodePriority+0x32>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43da      	mvns	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b60:	f04f 31ff 	mov.w	r1, #4294967295
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	43d9      	mvns	r1, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	4313      	orrs	r3, r2
         );
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3724      	adds	r7, #36	; 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b84:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <__NVIC_SystemReset+0x20>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b90:	4903      	ldr	r1, [pc, #12]	; (8002ba0 <__NVIC_SystemReset+0x20>)
 8002b92:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <__NVIC_SystemReset+0x24>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60cb      	str	r3, [r1, #12]
 8002b98:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002b9c:	bf00      	nop
 8002b9e:	e7fd      	b.n	8002b9c <__NVIC_SystemReset+0x1c>
 8002ba0:	e000ed00 	.word	0xe000ed00
 8002ba4:	05fa0004 	.word	0x05fa0004

08002ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb8:	d301      	bcc.n	8002bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e00f      	b.n	8002bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bbe:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <SysTick_Config+0x40>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc6:	210f      	movs	r1, #15
 8002bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bcc:	f7ff ff7a 	bl	8002ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <SysTick_Config+0x40>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd6:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <SysTick_Config+0x40>)
 8002bd8:	2207      	movs	r2, #7
 8002bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	e000e010 	.word	0xe000e010

08002bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ff15 	bl	8002a24 <__NVIC_SetPriorityGrouping>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	4603      	mov	r3, r0
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c14:	f7ff ff2a 	bl	8002a6c <__NVIC_GetPriorityGrouping>
 8002c18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	6978      	ldr	r0, [r7, #20]
 8002c20:	f7ff ff7a 	bl	8002b18 <NVIC_EncodePriority>
 8002c24:	4602      	mov	r2, r0
 8002c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff49 	bl	8002ac4 <__NVIC_SetPriority>
}
 8002c32:	bf00      	nop
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4603      	mov	r3, r0
 8002c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff1d 	bl	8002a88 <__NVIC_EnableIRQ>
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002c5a:	f7ff ff91 	bl	8002b80 <__NVIC_SystemReset>

08002c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff ff9e 	bl	8002ba8 <SysTick_Config>
 8002c6c:	4603      	mov	r3, r0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c86:	e17f      	b.n	8002f88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	fa01 f303 	lsl.w	r3, r1, r3
 8002c94:	4013      	ands	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 8171 	beq.w	8002f82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x38>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b12      	cmp	r3, #18
 8002cae:	d123      	bne.n	8002cf8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	08da      	lsrs	r2, r3, #3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3208      	adds	r2, #8
 8002cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	220f      	movs	r2, #15
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	08da      	lsrs	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3208      	adds	r2, #8
 8002cf2:	6939      	ldr	r1, [r7, #16]
 8002cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	2203      	movs	r2, #3
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0203 	and.w	r2, r3, #3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d00b      	beq.n	8002d4c <HAL_GPIO_Init+0xd4>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d007      	beq.n	8002d4c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d40:	2b11      	cmp	r3, #17
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b12      	cmp	r3, #18
 8002d4a:	d130      	bne.n	8002dae <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	2203      	movs	r2, #3
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4013      	ands	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d82:	2201      	movs	r2, #1
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	f003 0201 	and.w	r2, r3, #1
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d118      	bne.n	8002dec <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	08db      	lsrs	r3, r3, #3
 8002dd6:	f003 0201 	and.w	r2, r3, #1
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	2203      	movs	r2, #3
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80ac 	beq.w	8002f82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2a:	4b5e      	ldr	r3, [pc, #376]	; (8002fa4 <HAL_GPIO_Init+0x32c>)
 8002e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2e:	4a5d      	ldr	r2, [pc, #372]	; (8002fa4 <HAL_GPIO_Init+0x32c>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	6613      	str	r3, [r2, #96]	; 0x60
 8002e36:	4b5b      	ldr	r3, [pc, #364]	; (8002fa4 <HAL_GPIO_Init+0x32c>)
 8002e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e42:	4a59      	ldr	r2, [pc, #356]	; (8002fa8 <HAL_GPIO_Init+0x330>)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	089b      	lsrs	r3, r3, #2
 8002e48:	3302      	adds	r3, #2
 8002e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	220f      	movs	r2, #15
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4013      	ands	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e6c:	d025      	beq.n	8002eba <HAL_GPIO_Init+0x242>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4e      	ldr	r2, [pc, #312]	; (8002fac <HAL_GPIO_Init+0x334>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d01f      	beq.n	8002eb6 <HAL_GPIO_Init+0x23e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a4d      	ldr	r2, [pc, #308]	; (8002fb0 <HAL_GPIO_Init+0x338>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d019      	beq.n	8002eb2 <HAL_GPIO_Init+0x23a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4c      	ldr	r2, [pc, #304]	; (8002fb4 <HAL_GPIO_Init+0x33c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_GPIO_Init+0x236>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a4b      	ldr	r2, [pc, #300]	; (8002fb8 <HAL_GPIO_Init+0x340>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00d      	beq.n	8002eaa <HAL_GPIO_Init+0x232>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a4a      	ldr	r2, [pc, #296]	; (8002fbc <HAL_GPIO_Init+0x344>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d007      	beq.n	8002ea6 <HAL_GPIO_Init+0x22e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a49      	ldr	r2, [pc, #292]	; (8002fc0 <HAL_GPIO_Init+0x348>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d101      	bne.n	8002ea2 <HAL_GPIO_Init+0x22a>
 8002e9e:	2306      	movs	r3, #6
 8002ea0:	e00c      	b.n	8002ebc <HAL_GPIO_Init+0x244>
 8002ea2:	2307      	movs	r3, #7
 8002ea4:	e00a      	b.n	8002ebc <HAL_GPIO_Init+0x244>
 8002ea6:	2305      	movs	r3, #5
 8002ea8:	e008      	b.n	8002ebc <HAL_GPIO_Init+0x244>
 8002eaa:	2304      	movs	r3, #4
 8002eac:	e006      	b.n	8002ebc <HAL_GPIO_Init+0x244>
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e004      	b.n	8002ebc <HAL_GPIO_Init+0x244>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e002      	b.n	8002ebc <HAL_GPIO_Init+0x244>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_GPIO_Init+0x244>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	f002 0203 	and.w	r2, r2, #3
 8002ec2:	0092      	lsls	r2, r2, #2
 8002ec4:	4093      	lsls	r3, r2
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ecc:	4936      	ldr	r1, [pc, #216]	; (8002fa8 <HAL_GPIO_Init+0x330>)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	089b      	lsrs	r3, r3, #2
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002eda:	4b3a      	ldr	r3, [pc, #232]	; (8002fc4 <HAL_GPIO_Init+0x34c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002efe:	4a31      	ldr	r2, [pc, #196]	; (8002fc4 <HAL_GPIO_Init+0x34c>)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002f04:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <HAL_GPIO_Init+0x34c>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f28:	4a26      	ldr	r2, [pc, #152]	; (8002fc4 <HAL_GPIO_Init+0x34c>)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f2e:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <HAL_GPIO_Init+0x34c>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	43db      	mvns	r3, r3
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f52:	4a1c      	ldr	r2, [pc, #112]	; (8002fc4 <HAL_GPIO_Init+0x34c>)
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f58:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <HAL_GPIO_Init+0x34c>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f7c:	4a11      	ldr	r2, [pc, #68]	; (8002fc4 <HAL_GPIO_Init+0x34c>)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	3301      	adds	r3, #1
 8002f86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f47f ae78 	bne.w	8002c88 <HAL_GPIO_Init+0x10>
  }
}
 8002f98:	bf00      	nop
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	48000400 	.word	0x48000400
 8002fb0:	48000800 	.word	0x48000800
 8002fb4:	48000c00 	.word	0x48000c00
 8002fb8:	48001000 	.word	0x48001000
 8002fbc:	48001400 	.word	0x48001400
 8002fc0:	48001800 	.word	0x48001800
 8002fc4:	40010400 	.word	0x40010400

08002fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	887b      	ldrh	r3, [r7, #2]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
 8002fe4:	e001      	b.n	8002fea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	807b      	strh	r3, [r7, #2]
 8003004:	4613      	mov	r3, r2
 8003006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003008:	787b      	ldrb	r3, [r7, #1]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800300e:	887a      	ldrh	r2, [r7, #2]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003014:	e002      	b.n	800301c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003016:	887a      	ldrh	r2, [r7, #2]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800302a:	b08f      	sub	sp, #60	; 0x3c
 800302c:	af0a      	add	r7, sp, #40	; 0x28
 800302e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e054      	b.n	80030e4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d106      	bne.n	800305a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f008 fa7b 	bl	800b550 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2203      	movs	r2, #3
 800305e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f005 fe41 	bl	8008d00 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	687e      	ldr	r6, [r7, #4]
 8003086:	466d      	mov	r5, sp
 8003088:	f106 0410 	add.w	r4, r6, #16
 800308c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800308e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003094:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003098:	e885 0003 	stmia.w	r5, {r0, r1}
 800309c:	1d33      	adds	r3, r6, #4
 800309e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030a0:	6838      	ldr	r0, [r7, #0]
 80030a2:	f005 fdca 	bl	8008c3a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2101      	movs	r1, #1
 80030ac:	4618      	mov	r0, r3
 80030ae:	f005 fe38 	bl	8008d22 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	687e      	ldr	r6, [r7, #4]
 80030ba:	466d      	mov	r5, sp
 80030bc:	f106 0410 	add.w	r4, r6, #16
 80030c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80030d0:	1d33      	adds	r3, r6, #4
 80030d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d4:	6838      	ldr	r0, [r7, #0]
 80030d6:	f005 ff47 	bl	8008f68 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030ec <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80030ec:	b590      	push	{r4, r7, lr}
 80030ee:	b089      	sub	sp, #36	; 0x24
 80030f0:	af04      	add	r7, sp, #16
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	4608      	mov	r0, r1
 80030f6:	4611      	mov	r1, r2
 80030f8:	461a      	mov	r2, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	70fb      	strb	r3, [r7, #3]
 80030fe:	460b      	mov	r3, r1
 8003100:	70bb      	strb	r3, [r7, #2]
 8003102:	4613      	mov	r3, r2
 8003104:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_HCD_HC_Init+0x28>
 8003110:	2302      	movs	r3, #2
 8003112:	e07f      	b.n	8003214 <HAL_HCD_HC_Init+0x128>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	440b      	add	r3, r1
 800312a:	333d      	adds	r3, #61	; 0x3d
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	440b      	add	r3, r1
 800313e:	3338      	adds	r3, #56	; 0x38
 8003140:	787a      	ldrb	r2, [r7, #1]
 8003142:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	440b      	add	r3, r1
 8003152:	3340      	adds	r3, #64	; 0x40
 8003154:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003156:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	440b      	add	r3, r1
 8003166:	3339      	adds	r3, #57	; 0x39
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	440b      	add	r3, r1
 800317a:	333f      	adds	r3, #63	; 0x3f
 800317c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003180:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	78bb      	ldrb	r3, [r7, #2]
 8003186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800318a:	b2d8      	uxtb	r0, r3
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	440b      	add	r3, r1
 8003198:	333a      	adds	r3, #58	; 0x3a
 800319a:	4602      	mov	r2, r0
 800319c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800319e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	da0a      	bge.n	80031bc <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	440b      	add	r3, r1
 80031b4:	333b      	adds	r3, #59	; 0x3b
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e009      	b.n	80031d0 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	440b      	add	r3, r1
 80031ca:	333b      	adds	r3, #59	; 0x3b
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	440b      	add	r3, r1
 80031de:	333c      	adds	r3, #60	; 0x3c
 80031e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80031e4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	787c      	ldrb	r4, [r7, #1]
 80031ec:	78ba      	ldrb	r2, [r7, #2]
 80031ee:	78f9      	ldrb	r1, [r7, #3]
 80031f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031f2:	9302      	str	r3, [sp, #8]
 80031f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031f8:	9301      	str	r3, [sp, #4]
 80031fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	4623      	mov	r3, r4
 8003202:	f005 fff5 	bl	80091f0 <USB_HC_Init>
 8003206:	4603      	mov	r3, r0
 8003208:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003212:	7bfb      	ldrb	r3, [r7, #15]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	bd90      	pop	{r4, r7, pc}

0800321c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_HCD_HC_Halt+0x1e>
 8003236:	2302      	movs	r3, #2
 8003238:	e00f      	b.n	800325a <HAL_HCD_HC_Halt+0x3e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	4611      	mov	r1, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f006 f9d3 	bl	80095f6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003258:	7bfb      	ldrb	r3, [r7, #15]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	4608      	mov	r0, r1
 800326e:	4611      	mov	r1, r2
 8003270:	461a      	mov	r2, r3
 8003272:	4603      	mov	r3, r0
 8003274:	70fb      	strb	r3, [r7, #3]
 8003276:	460b      	mov	r3, r1
 8003278:	70bb      	strb	r3, [r7, #2]
 800327a:	4613      	mov	r3, r2
 800327c:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	440b      	add	r3, r1
 800328c:	333b      	adds	r3, #59	; 0x3b
 800328e:	78ba      	ldrb	r2, [r7, #2]
 8003290:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	440b      	add	r3, r1
 80032a0:	333f      	adds	r3, #63	; 0x3f
 80032a2:	787a      	ldrb	r2, [r7, #1]
 80032a4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80032a6:	7c3b      	ldrb	r3, [r7, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10a      	bne.n	80032c2 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	440b      	add	r3, r1
 80032ba:	3342      	adds	r3, #66	; 0x42
 80032bc:	2203      	movs	r2, #3
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	e009      	b.n	80032d6 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	440b      	add	r3, r1
 80032d0:	3342      	adds	r3, #66	; 0x42
 80032d2:	2202      	movs	r2, #2
 80032d4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80032d6:	787b      	ldrb	r3, [r7, #1]
 80032d8:	2b03      	cmp	r3, #3
 80032da:	f200 80d6 	bhi.w	800348a <HAL_HCD_HC_SubmitRequest+0x226>
 80032de:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <HAL_HCD_HC_SubmitRequest+0x80>)
 80032e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e4:	080032f5 	.word	0x080032f5
 80032e8:	08003475 	.word	0x08003475
 80032ec:	08003361 	.word	0x08003361
 80032f0:	080033eb 	.word	0x080033eb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80032f4:	7c3b      	ldrb	r3, [r7, #16]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	f040 80c9 	bne.w	800348e <HAL_HCD_HC_SubmitRequest+0x22a>
 80032fc:	78bb      	ldrb	r3, [r7, #2]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f040 80c5 	bne.w	800348e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8003304:	8b3b      	ldrh	r3, [r7, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	440b      	add	r3, r1
 8003318:	3351      	adds	r3, #81	; 0x51
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	440b      	add	r3, r1
 800332c:	3351      	adds	r3, #81	; 0x51
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10a      	bne.n	800334a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	440b      	add	r3, r1
 8003342:	3342      	adds	r3, #66	; 0x42
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003348:	e0a1      	b.n	800348e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	440b      	add	r3, r1
 8003358:	3342      	adds	r3, #66	; 0x42
 800335a:	2202      	movs	r2, #2
 800335c:	701a      	strb	r2, [r3, #0]
      break;
 800335e:	e096      	b.n	800348e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003360:	78bb      	ldrb	r3, [r7, #2]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d120      	bne.n	80033a8 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	440b      	add	r3, r1
 8003374:	3351      	adds	r3, #81	; 0x51
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10a      	bne.n	8003392 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	440b      	add	r3, r1
 800338a:	3342      	adds	r3, #66	; 0x42
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003390:	e07e      	b.n	8003490 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	440b      	add	r3, r1
 80033a0:	3342      	adds	r3, #66	; 0x42
 80033a2:	2202      	movs	r2, #2
 80033a4:	701a      	strb	r2, [r3, #0]
      break;
 80033a6:	e073      	b.n	8003490 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	440b      	add	r3, r1
 80033b6:	3350      	adds	r3, #80	; 0x50
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10a      	bne.n	80033d4 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	440b      	add	r3, r1
 80033cc:	3342      	adds	r3, #66	; 0x42
 80033ce:	2200      	movs	r2, #0
 80033d0:	701a      	strb	r2, [r3, #0]
      break;
 80033d2:	e05d      	b.n	8003490 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	440b      	add	r3, r1
 80033e2:	3342      	adds	r3, #66	; 0x42
 80033e4:	2202      	movs	r2, #2
 80033e6:	701a      	strb	r2, [r3, #0]
      break;
 80033e8:	e052      	b.n	8003490 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80033ea:	78bb      	ldrb	r3, [r7, #2]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d120      	bne.n	8003432 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	440b      	add	r3, r1
 80033fe:	3351      	adds	r3, #81	; 0x51
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10a      	bne.n	800341c <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	440b      	add	r3, r1
 8003414:	3342      	adds	r3, #66	; 0x42
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800341a:	e039      	b.n	8003490 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
=======
void BSP_LED_Init(Led_TypeDef Led) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable the GPIO_LED clock */
	LEDx_GPIO_CLK_ENABLE(Led);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10c      	bne.n	80022be <BSP_LED_Init+0x2a>
 80022a4:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <BSP_LED_Init+0x90>)
 80022a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a8:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <BSP_LED_Init+0x90>)
 80022aa:	f043 0302 	orr.w	r3, r3, #2
 80022ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b0:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <BSP_LED_Init+0x90>)
 80022b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	e00e      	b.n	80022dc <BSP_LED_Init+0x48>
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d10b      	bne.n	80022dc <BSP_LED_Init+0x48>
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <BSP_LED_Init+0x90>)
 80022c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c8:	4a16      	ldr	r2, [pc, #88]	; (8002324 <BSP_LED_Init+0x90>)
 80022ca:	f043 0310 	orr.w	r3, r3, #16
 80022ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <BSP_LED_Init+0x90>)
 80022d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]

	/* Configure the GPIO_LED pin */
	GPIO_InitStructure.Pin = LED_PIN[Led];
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <BSP_LED_Init+0x94>)
 80022e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80022e6:	2301      	movs	r3, #1
 80022e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ee:	2303      	movs	r3, #3
 80022f0:	623b      	str	r3, [r7, #32]

	HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStructure);
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	; (800232c <BSP_LED_Init+0x98>)
 80022f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fa:	f107 0214 	add.w	r2, r7, #20
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fc57 	bl	8002bb4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LED_PORT[Led], GPIO_InitStructure.Pin, GPIO_PIN_RESET);
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	4a08      	ldr	r2, [pc, #32]	; (800232c <BSP_LED_Init+0x98>)
 800230a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	b291      	uxth	r1, r2
 8002312:	2200      	movs	r2, #0
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fe0d 	bl	8002f34 <HAL_GPIO_WritePin>
}
 800231a:	bf00      	nop
 800231c:	3728      	adds	r7, #40	; 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	0800e200 	.word	0x0800e200
 800232c:	20000018 	.word	0x20000018

08002330 <BSP_LCD_GLASS_Init>:
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <BSP_LCD_GLASS_Init+0x6c>)
 8002336:	4a1a      	ldr	r2, [pc, #104]	; (80023a0 <BSP_LCD_GLASS_Init+0x70>)
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	4b18      	ldr	r3, [pc, #96]	; (800239c <BSP_LCD_GLASS_Init+0x6c>)
 800233c:	2200      	movs	r2, #0
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <BSP_LCD_GLASS_Init+0x6c>)
 8002342:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <BSP_LCD_GLASS_Init+0x6c>)
 800234a:	220c      	movs	r2, #12
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <BSP_LCD_GLASS_Init+0x6c>)
 8002350:	2240      	movs	r2, #64	; 0x40
 8002352:	611a      	str	r2, [r3, #16]
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <BSP_LCD_GLASS_Init+0x6c>)
 8002356:	2200      	movs	r2, #0
 8002358:	615a      	str	r2, [r3, #20]
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <BSP_LCD_GLASS_Init+0x6c>)
 800235c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8002360:	619a      	str	r2, [r3, #24]
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <BSP_LCD_GLASS_Init+0x6c>)
 8002364:	2200      	movs	r2, #0
 8002366:	61da      	str	r2, [r3, #28]
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <BSP_LCD_GLASS_Init+0x6c>)
 800236a:	2240      	movs	r2, #64	; 0x40
 800236c:	621a      	str	r2, [r3, #32]
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <BSP_LCD_GLASS_Init+0x6c>)
 8002370:	2200      	movs	r2, #0
 8002372:	625a      	str	r2, [r3, #36]	; 0x24
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <BSP_LCD_GLASS_Init+0x6c>)
 8002376:	2200      	movs	r2, #0
 8002378:	629a      	str	r2, [r3, #40]	; 0x28
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <BSP_LCD_GLASS_Init+0x6c>)
 800237c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002380:	62da      	str	r2, [r3, #44]	; 0x2c
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <BSP_LCD_GLASS_Init+0x6c>)
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
 8002388:	4804      	ldr	r0, [pc, #16]	; (800239c <BSP_LCD_GLASS_Init+0x6c>)
 800238a:	f000 f815 	bl	80023b8 <LCD_MspInit>
 800238e:	4803      	ldr	r0, [pc, #12]	; (800239c <BSP_LCD_GLASS_Init+0x6c>)
 8002390:	f002 fe0c 	bl	8004fac <HAL_LCD_Init>
 8002394:	f000 f806 	bl	80023a4 <BSP_LCD_GLASS_Clear>
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000820 	.word	0x20000820
 80023a0:	40002400 	.word	0x40002400

080023a4 <BSP_LCD_GLASS_Clear>:
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <BSP_LCD_GLASS_Clear+0x10>)
 80023aa:	f002 febf 	bl	800512c <HAL_LCD_Clear>
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000820 	.word	0x20000820

080023b8 <LCD_MspInit>:
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b0c0      	sub	sp, #256	; 0x100
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
 80023d0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80023d4:	2244      	movs	r2, #68	; 0x44
 80023d6:	2100      	movs	r1, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f009 fb63 	bl	800baa4 <memset>
 80023de:	f107 0320 	add.w	r3, r7, #32
 80023e2:	2288      	movs	r2, #136	; 0x88
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f009 fb5c 	bl	800baa4 <memset>
 80023ec:	4b51      	ldr	r3, [pc, #324]	; (8002534 <LCD_MspInit+0x17c>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	4a50      	ldr	r2, [pc, #320]	; (8002534 <LCD_MspInit+0x17c>)
 80023f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f6:	6593      	str	r3, [r2, #88]	; 0x58
 80023f8:	4b4e      	ldr	r3, [pc, #312]	; (8002534 <LCD_MspInit+0x17c>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	2304      	movs	r3, #4
 8002406:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800240a:	2300      	movs	r3, #0
 800240c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002410:	2301      	movs	r3, #1
 8002412:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002416:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800241a:	4618      	mov	r0, r3
 800241c:	f003 f882 	bl	8005524 <HAL_RCC_OscConfig>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d000      	beq.n	8002428 <LCD_MspInit+0x70>
 8002426:	e7fe      	b.n	8002426 <LCD_MspInit+0x6e>
 8002428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800242c:	623b      	str	r3, [r7, #32]
 800242e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002436:	f107 0320 	add.w	r3, r7, #32
 800243a:	4618      	mov	r0, r3
 800243c:	f003 fe26 	bl	800608c <HAL_RCCEx_PeriphCLKConfig>
 8002440:	4b3c      	ldr	r3, [pc, #240]	; (8002534 <LCD_MspInit+0x17c>)
 8002442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002444:	4a3b      	ldr	r2, [pc, #236]	; (8002534 <LCD_MspInit+0x17c>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800244c:	4b39      	ldr	r3, [pc, #228]	; (8002534 <LCD_MspInit+0x17c>)
 800244e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	61bb      	str	r3, [r7, #24]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4b36      	ldr	r3, [pc, #216]	; (8002534 <LCD_MspInit+0x17c>)
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	4a35      	ldr	r2, [pc, #212]	; (8002534 <LCD_MspInit+0x17c>)
 800245e:	f043 0302 	orr.w	r3, r3, #2
 8002462:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002464:	4b33      	ldr	r3, [pc, #204]	; (8002534 <LCD_MspInit+0x17c>)
 8002466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	4b30      	ldr	r3, [pc, #192]	; (8002534 <LCD_MspInit+0x17c>)
 8002472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002474:	4a2f      	ldr	r2, [pc, #188]	; (8002534 <LCD_MspInit+0x17c>)
 8002476:	f043 0304 	orr.w	r3, r3, #4
 800247a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800247c:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <LCD_MspInit+0x17c>)
 800247e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <LCD_MspInit+0x17c>)
 800248a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248c:	4a29      	ldr	r2, [pc, #164]	; (8002534 <LCD_MspInit+0x17c>)
 800248e:	f043 0308 	orr.w	r3, r3, #8
 8002492:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <LCD_MspInit+0x17c>)
 8002496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f248 73c0 	movw	r3, #34752	; 0x87c0
 80024a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80024a8:	2302      	movs	r3, #2
 80024aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80024ae:	2300      	movs	r3, #0
 80024b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80024b4:	2303      	movs	r3, #3
 80024b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80024ba:	230b      	movs	r3, #11
 80024bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80024c0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024c4:	4619      	mov	r1, r3
 80024c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ca:	f000 fb73 	bl	8002bb4 <HAL_GPIO_Init>
 80024ce:	f24f 2333 	movw	r3, #62003	; 0xf233
 80024d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80024d6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024da:	4619      	mov	r1, r3
 80024dc:	4816      	ldr	r0, [pc, #88]	; (8002538 <LCD_MspInit+0x180>)
 80024de:	f000 fb69 	bl	8002bb4 <HAL_GPIO_Init>
 80024e2:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80024e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80024ea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024ee:	4619      	mov	r1, r3
 80024f0:	4812      	ldr	r0, [pc, #72]	; (800253c <LCD_MspInit+0x184>)
 80024f2:	f000 fb5f 	bl	8002bb4 <HAL_GPIO_Init>
 80024f6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80024fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80024fe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002502:	4619      	mov	r1, r3
 8002504:	480e      	ldr	r0, [pc, #56]	; (8002540 <LCD_MspInit+0x188>)
 8002506:	f000 fb55 	bl	8002bb4 <HAL_GPIO_Init>
 800250a:	2002      	movs	r0, #2
 800250c:	f000 fa06 	bl	800291c <HAL_Delay>
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <LCD_MspInit+0x17c>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	4a07      	ldr	r2, [pc, #28]	; (8002534 <LCD_MspInit+0x17c>)
 8002516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800251a:	6593      	str	r3, [r2, #88]	; 0x58
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <LCD_MspInit+0x17c>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	bf00      	nop
 800252a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	48000400 	.word	0x48000400
 800253c:	48000800 	.word	0x48000800
 8002540:	48000c00 	.word	0x48000c00

08002544 <HAL_MspInit>:
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <HAL_MspInit+0x44>)
 800254c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254e:	4a0e      	ldr	r2, [pc, #56]	; (8002588 <HAL_MspInit+0x44>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6613      	str	r3, [r2, #96]	; 0x60
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <HAL_MspInit+0x44>)
 8002558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_MspInit+0x44>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	4a08      	ldr	r2, [pc, #32]	; (8002588 <HAL_MspInit+0x44>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256c:	6593      	str	r3, [r2, #88]	; 0x58
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_MspInit+0x44>)
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000

0800258c <NMI_Handler>:
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <HardFault_Handler>:
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
 80025a0:	2000      	movs	r0, #0
 80025a2:	f7ff fd09 	bl	8001fb8 <ssd1306_Fill>
 80025a6:	211a      	movs	r1, #26
 80025a8:	2002      	movs	r0, #2
 80025aa:	f7ff fe5b 	bl	8002264 <ssd1306_SetCursor>
 80025ae:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HardFault_Handler+0x30>)
 80025b0:	2301      	movs	r3, #1
 80025b2:	ca06      	ldmia	r2, {r1, r2}
 80025b4:	4806      	ldr	r0, [pc, #24]	; (80025d0 <HardFault_Handler+0x34>)
 80025b6:	f7ff fe2f 	bl	8002218 <ssd1306_WriteString>
 80025ba:	f7ff fd1f 	bl	8001ffc <ssd1306_UpdateScreen>
 80025be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025c2:	f000 f9ab 	bl	800291c <HAL_Delay>
 80025c6:	f000 fae4 	bl	8002b92 <HAL_NVIC_SystemReset>
 80025ca:	e7fe      	b.n	80025ca <HardFault_Handler+0x2e>
 80025cc:	20000000 	.word	0x20000000
 80025d0:	0800c3e8 	.word	0x0800c3e8

080025d4 <MemManage_Handler>:
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	e7fe      	b.n	80025d8 <MemManage_Handler+0x4>

080025da <BusFault_Handler>:
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
 80025de:	e7fe      	b.n	80025de <BusFault_Handler+0x4>

080025e0 <UsageFault_Handler>:
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	e7fe      	b.n	80025e4 <UsageFault_Handler+0x4>

080025e6 <SVC_Handler>:
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <DebugMon_Handler>:
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <PendSV_Handler>:
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <SysTick_Handler>:
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
 8002614:	f000 f964 	bl	80028e0 <HAL_IncTick>
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}

0800261c <OTG_FS_IRQHandler>:
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <OTG_FS_IRQHandler+0x10>)
 8002622:	f000 ff21 	bl	8003468 <HAL_HCD_IRQHandler>
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000cac 	.word	0x20000cac

08002630 <_sbrk>:
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <_sbrk+0x50>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <_sbrk+0x16>
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <_sbrk+0x50>)
 8002642:	4a10      	ldr	r2, [pc, #64]	; (8002684 <_sbrk+0x54>)
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <_sbrk+0x50>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <_sbrk+0x50>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	466a      	mov	r2, sp
 8002656:	4293      	cmp	r3, r2
 8002658:	d907      	bls.n	800266a <_sbrk+0x3a>
 800265a:	f009 f9c5 	bl	800b9e8 <__errno>
 800265e:	4602      	mov	r2, r0
 8002660:	230c      	movs	r3, #12
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	f04f 33ff 	mov.w	r3, #4294967295
 8002668:	e006      	b.n	8002678 <_sbrk+0x48>
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <_sbrk+0x50>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	4a03      	ldr	r2, [pc, #12]	; (8002680 <_sbrk+0x50>)
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000554 	.word	0x20000554
 8002684:	20000f78 	.word	0x20000f78

08002688 <SystemInit>:
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
 800268c:	4b17      	ldr	r3, [pc, #92]	; (80026ec <SystemInit+0x64>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	4a16      	ldr	r2, [pc, #88]	; (80026ec <SystemInit+0x64>)
 8002694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <SystemInit+0x68>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a13      	ldr	r2, [pc, #76]	; (80026f0 <SystemInit+0x68>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <SystemInit+0x68>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <SystemInit+0x68>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a0f      	ldr	r2, [pc, #60]	; (80026f0 <SystemInit+0x68>)
 80026b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80026b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <SystemInit+0x68>)
 80026c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <SystemInit+0x68>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a09      	ldr	r2, [pc, #36]	; (80026f0 <SystemInit+0x68>)
 80026cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <SystemInit+0x68>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <SystemInit+0x64>)
 80026da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000ed00 	.word	0xe000ed00
 80026f0:	40021000 	.word	0x40021000

080026f4 <MX_UART4_Init>:
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4b14      	ldr	r3, [pc, #80]	; (800274c <MX_UART4_Init+0x58>)
 80026fa:	4a15      	ldr	r2, [pc, #84]	; (8002750 <MX_UART4_Init+0x5c>)
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <MX_UART4_Init+0x58>)
 8002700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <MX_UART4_Init+0x58>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <MX_UART4_Init+0x58>)
 800270e:	2200      	movs	r2, #0
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <MX_UART4_Init+0x58>)
 8002714:	2200      	movs	r2, #0
 8002716:	611a      	str	r2, [r3, #16]
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <MX_UART4_Init+0x58>)
 800271a:	220c      	movs	r2, #12
 800271c:	615a      	str	r2, [r3, #20]
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <MX_UART4_Init+0x58>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <MX_UART4_Init+0x58>)
 8002726:	2200      	movs	r2, #0
 8002728:	61da      	str	r2, [r3, #28]
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <MX_UART4_Init+0x58>)
 800272c:	2200      	movs	r2, #0
 800272e:	621a      	str	r2, [r3, #32]
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <MX_UART4_Init+0x58>)
 8002732:	2200      	movs	r2, #0
 8002734:	625a      	str	r2, [r3, #36]	; 0x24
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <MX_UART4_Init+0x58>)
 8002738:	f005 fbf8 	bl	8007f2c <HAL_UART_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_UART4_Init+0x52>
 8002742:	f7fe fbef 	bl	8000f24 <Error_Handler>
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	2000085c 	.word	0x2000085c
 8002750:	40004c00 	.word	0x40004c00

08002754 <HAL_UART_MspInit>:
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	; 0x28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a17      	ldr	r2, [pc, #92]	; (80027d0 <HAL_UART_MspInit+0x7c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d128      	bne.n	80027c8 <HAL_UART_MspInit+0x74>
 8002776:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <HAL_UART_MspInit+0x80>)
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	4a16      	ldr	r2, [pc, #88]	; (80027d4 <HAL_UART_MspInit+0x80>)
 800277c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002780:	6593      	str	r3, [r2, #88]	; 0x58
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_UART_MspInit+0x80>)
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_UART_MspInit+0x80>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <HAL_UART_MspInit+0x80>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800279a:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <HAL_UART_MspInit+0x80>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2303      	movs	r3, #3
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	2302      	movs	r3, #2
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	2303      	movs	r3, #3
 80027b4:	623b      	str	r3, [r7, #32]
 80027b6:	2308      	movs	r3, #8
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4619      	mov	r1, r3
 80027c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c4:	f000 f9f6 	bl	8002bb4 <HAL_GPIO_Init>
 80027c8:	bf00      	nop
 80027ca:	3728      	adds	r7, #40	; 0x28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40004c00 	.word	0x40004c00
 80027d4:	40021000 	.word	0x40021000

080027d8 <Reset_Handler>:
 80027d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002810 <LoopForever+0x2>
 80027dc:	2100      	movs	r1, #0
 80027de:	e003      	b.n	80027e8 <LoopCopyDataInit>

080027e0 <CopyDataInit>:
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <LoopForever+0x6>)
 80027e2:	585b      	ldr	r3, [r3, r1]
 80027e4:	5043      	str	r3, [r0, r1]
 80027e6:	3104      	adds	r1, #4

080027e8 <LoopCopyDataInit>:
 80027e8:	480b      	ldr	r0, [pc, #44]	; (8002818 <LoopForever+0xa>)
 80027ea:	4b0c      	ldr	r3, [pc, #48]	; (800281c <LoopForever+0xe>)
 80027ec:	1842      	adds	r2, r0, r1
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d3f6      	bcc.n	80027e0 <CopyDataInit>
 80027f2:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <LoopForever+0x12>)
 80027f4:	e002      	b.n	80027fc <LoopFillZerobss>

080027f6 <FillZerobss>:
 80027f6:	2300      	movs	r3, #0
 80027f8:	f842 3b04 	str.w	r3, [r2], #4

080027fc <LoopFillZerobss>:
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <LoopForever+0x16>)
 80027fe:	429a      	cmp	r2, r3
 8002800:	d3f9      	bcc.n	80027f6 <FillZerobss>
 8002802:	f7ff ff41 	bl	8002688 <SystemInit>
 8002806:	f009 f8f5 	bl	800b9f4 <__libc_init_array>
 800280a:	f7fe fac1 	bl	8000d90 <main>

0800280e <LoopForever>:
 800280e:	e7fe      	b.n	800280e <LoopForever>
 8002810:	20018000 	.word	0x20018000
 8002814:	0800e290 	.word	0x0800e290
 8002818:	20000000 	.word	0x20000000
 800281c:	200000b0 	.word	0x200000b0
 8002820:	200000b0 	.word	0x200000b0
 8002824:	20000f74 	.word	0x20000f74

08002828 <ADC1_2_IRQHandler>:
 8002828:	e7fe      	b.n	8002828 <ADC1_2_IRQHandler>
	...

0800282c <HAL_Init>:
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	2300      	movs	r3, #0
 8002834:	71fb      	strb	r3, [r7, #7]
 8002836:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <HAL_Init+0x3c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <HAL_Init+0x3c>)
 800283c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	2003      	movs	r0, #3
 8002844:	f000 f970 	bl	8002b28 <HAL_NVIC_SetPriorityGrouping>
 8002848:	2000      	movs	r0, #0
 800284a:	f000 f80f 	bl	800286c <HAL_InitTick>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <HAL_Init+0x2e>
 8002854:	2301      	movs	r3, #1
 8002856:	71fb      	strb	r3, [r7, #7]
 8002858:	e001      	b.n	800285e <HAL_Init+0x32>
 800285a:	f7ff fe73 	bl	8002544 <HAL_MspInit>
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40022000 	.word	0x40022000

0800286c <HAL_InitTick>:
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]
 8002878:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <HAL_InitTick+0x68>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d022      	beq.n	80028c6 <HAL_InitTick+0x5a>
 8002880:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <HAL_InitTick+0x6c>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <HAL_InitTick+0x68>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800288c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002890:	fbb2 f3f3 	udiv	r3, r2, r3
 8002894:	4618      	mov	r0, r3
 8002896:	f000 f980 	bl	8002b9a <HAL_SYSTICK_Config>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10f      	bne.n	80028c0 <HAL_InitTick+0x54>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b0f      	cmp	r3, #15
 80028a4:	d809      	bhi.n	80028ba <HAL_InitTick+0x4e>
 80028a6:	2200      	movs	r2, #0
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	f04f 30ff 	mov.w	r0, #4294967295
 80028ae:	f000 f946 	bl	8002b3e <HAL_NVIC_SetPriority>
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <HAL_InitTick+0x70>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	e007      	b.n	80028ca <HAL_InitTick+0x5e>
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
 80028be:	e004      	b.n	80028ca <HAL_InitTick+0x5e>
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
 80028c4:	e001      	b.n	80028ca <HAL_InitTick+0x5e>
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000028 	.word	0x20000028
 80028d8:	20000020 	.word	0x20000020
 80028dc:	20000024 	.word	0x20000024

080028e0 <HAL_IncTick>:
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_IncTick+0x1c>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_IncTick+0x20>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4413      	add	r3, r2
 80028ee:	4a03      	ldr	r2, [pc, #12]	; (80028fc <HAL_IncTick+0x1c>)
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	bf00      	nop
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	200008dc 	.word	0x200008dc
 8002900:	20000028 	.word	0x20000028

08002904 <HAL_GetTick>:
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <HAL_GetTick+0x14>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	200008dc 	.word	0x200008dc

0800291c <HAL_Delay>:
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	f7ff ffee 	bl	8002904 <HAL_GetTick>
 8002928:	60b8      	str	r0, [r7, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002934:	d004      	beq.n	8002940 <HAL_Delay+0x24>
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_Delay+0x40>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4413      	add	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	bf00      	nop
 8002942:	f7ff ffdf 	bl	8002904 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	429a      	cmp	r2, r3
 8002950:	d8f7      	bhi.n	8002942 <HAL_Delay+0x26>
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000028 	.word	0x20000028

08002960 <__NVIC_SetPriorityGrouping>:
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800297c:	4013      	ands	r3, r2
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	021a      	lsls	r2, r3, #8
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4313      	orrs	r3, r2
 8002988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800298c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	60d3      	str	r3, [r2, #12]
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <__NVIC_GetPriorityGrouping>:
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	4618      	mov	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <__NVIC_EnableIRQ>:
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	db0b      	blt.n	80029ee <__NVIC_EnableIRQ+0x2a>
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	f003 021f 	and.w	r2, r3, #31
 80029dc:	4907      	ldr	r1, [pc, #28]	; (80029fc <__NVIC_EnableIRQ+0x38>)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	2001      	movs	r0, #1
 80029e6:	fa00 f202 	lsl.w	r2, r0, r2
 80029ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	e000e100 	.word	0xe000e100

08002a00 <__NVIC_SetPriority>:
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	6039      	str	r1, [r7, #0]
 8002a0a:	71fb      	strb	r3, [r7, #7]
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	db0a      	blt.n	8002a2a <__NVIC_SetPriority+0x2a>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	490c      	ldr	r1, [pc, #48]	; (8002a4c <__NVIC_SetPriority+0x4c>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	0112      	lsls	r2, r2, #4
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	440b      	add	r3, r1
 8002a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002a28:	e00a      	b.n	8002a40 <__NVIC_SetPriority+0x40>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	4908      	ldr	r1, [pc, #32]	; (8002a50 <__NVIC_SetPriority+0x50>)
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	3b04      	subs	r3, #4
 8002a38:	0112      	lsls	r2, r2, #4
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	761a      	strb	r2, [r3, #24]
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	e000e100 	.word	0xe000e100
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <NVIC_EncodePriority>:
 8002a54:	b480      	push	{r7}
 8002a56:	b089      	sub	sp, #36	; 0x24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f1c3 0307 	rsb	r3, r3, #7
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	bf28      	it	cs
 8002a72:	2304      	movcs	r3, #4
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	2b06      	cmp	r3, #6
 8002a7c:	d902      	bls.n	8002a84 <NVIC_EncodePriority+0x30>
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3b03      	subs	r3, #3
 8002a82:	e000      	b.n	8002a86 <NVIC_EncodePriority+0x32>
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	f04f 32ff 	mov.w	r2, #4294967295
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43da      	mvns	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	401a      	ands	r2, r3
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa6:	43d9      	mvns	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	400b      	ands	r3, r1
 8002aac:	4313      	orrs	r3, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3724      	adds	r7, #36	; 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
	...

08002abc <__NVIC_SystemReset>:
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <__NVIC_SystemReset+0x20>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002acc:	4903      	ldr	r1, [pc, #12]	; (8002adc <__NVIC_SystemReset+0x20>)
 8002ace:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <__NVIC_SystemReset+0x24>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60cb      	str	r3, [r1, #12]
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	bf00      	nop
 8002ada:	e7fd      	b.n	8002ad8 <__NVIC_SystemReset+0x1c>
 8002adc:	e000ed00 	.word	0xe000ed00
 8002ae0:	05fa0004 	.word	0x05fa0004

08002ae4 <SysTick_Config>:
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002af4:	d301      	bcc.n	8002afa <SysTick_Config+0x16>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e00f      	b.n	8002b1a <SysTick_Config+0x36>
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <SysTick_Config+0x40>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	6053      	str	r3, [r2, #4]
 8002b02:	210f      	movs	r1, #15
 8002b04:	f04f 30ff 	mov.w	r0, #4294967295
 8002b08:	f7ff ff7a 	bl	8002a00 <__NVIC_SetPriority>
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <SysTick_Config+0x40>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
 8002b12:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <SysTick_Config+0x40>)
 8002b14:	2207      	movs	r2, #7
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	e000e010 	.word	0xe000e010

08002b28 <HAL_NVIC_SetPriorityGrouping>:
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff15 	bl	8002960 <__NVIC_SetPriorityGrouping>
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_NVIC_SetPriority>:
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b086      	sub	sp, #24
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4603      	mov	r3, r0
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	f7ff ff2a 	bl	80029a8 <__NVIC_GetPriorityGrouping>
 8002b54:	6178      	str	r0, [r7, #20]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	6978      	ldr	r0, [r7, #20]
 8002b5c:	f7ff ff7a 	bl	8002a54 <NVIC_EncodePriority>
 8002b60:	4602      	mov	r2, r0
 8002b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff49 	bl	8002a00 <__NVIC_SetPriority>
 8002b6e:	bf00      	nop
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_NVIC_EnableIRQ>:
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	71fb      	strb	r3, [r7, #7]
 8002b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff ff1d 	bl	80029c4 <__NVIC_EnableIRQ>
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_NVIC_SystemReset>:
 8002b92:	b580      	push	{r7, lr}
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	f7ff ff91 	bl	8002abc <__NVIC_SystemReset>

08002b9a <HAL_SYSTICK_Config>:
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff ff9e 	bl	8002ae4 <SysTick_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_GPIO_Init>:
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	e17f      	b.n	8002ec4 <HAL_GPIO_Init+0x310>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2101      	movs	r1, #1
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8171 	beq.w	8002ebe <HAL_GPIO_Init+0x30a>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x38>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b12      	cmp	r3, #18
 8002bea:	d123      	bne.n	8002c34 <HAL_GPIO_Init+0x80>
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	08da      	lsrs	r2, r3, #3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3208      	adds	r2, #8
 8002bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	220f      	movs	r2, #15
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	08da      	lsrs	r2, r3, #3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3208      	adds	r2, #8
 8002c2e:	6939      	ldr	r1, [r7, #16]
 8002c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0203 	and.w	r2, r3, #3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d00b      	beq.n	8002c88 <HAL_GPIO_Init+0xd4>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d007      	beq.n	8002c88 <HAL_GPIO_Init+0xd4>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b11      	cmp	r3, #17
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0xd4>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b12      	cmp	r3, #18
 8002c86:	d130      	bne.n	8002cea <HAL_GPIO_Init+0x136>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	2203      	movs	r2, #3
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	f003 0201 	and.w	r2, r3, #1
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d118      	bne.n	8002d28 <HAL_GPIO_Init+0x174>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	08db      	lsrs	r3, r3, #3
 8002d12:	f003 0201 	and.w	r2, r3, #1
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	2203      	movs	r2, #3
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	60da      	str	r2, [r3, #12]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80ac 	beq.w	8002ebe <HAL_GPIO_Init+0x30a>
 8002d66:	4b5e      	ldr	r3, [pc, #376]	; (8002ee0 <HAL_GPIO_Init+0x32c>)
 8002d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6a:	4a5d      	ldr	r2, [pc, #372]	; (8002ee0 <HAL_GPIO_Init+0x32c>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6613      	str	r3, [r2, #96]	; 0x60
 8002d72:	4b5b      	ldr	r3, [pc, #364]	; (8002ee0 <HAL_GPIO_Init+0x32c>)
 8002d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4a59      	ldr	r2, [pc, #356]	; (8002ee4 <HAL_GPIO_Init+0x330>)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	089b      	lsrs	r3, r3, #2
 8002d84:	3302      	adds	r3, #2
 8002d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	220f      	movs	r2, #15
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002da8:	d025      	beq.n	8002df6 <HAL_GPIO_Init+0x242>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4e      	ldr	r2, [pc, #312]	; (8002ee8 <HAL_GPIO_Init+0x334>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d01f      	beq.n	8002df2 <HAL_GPIO_Init+0x23e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a4d      	ldr	r2, [pc, #308]	; (8002eec <HAL_GPIO_Init+0x338>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d019      	beq.n	8002dee <HAL_GPIO_Init+0x23a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a4c      	ldr	r2, [pc, #304]	; (8002ef0 <HAL_GPIO_Init+0x33c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d013      	beq.n	8002dea <HAL_GPIO_Init+0x236>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a4b      	ldr	r2, [pc, #300]	; (8002ef4 <HAL_GPIO_Init+0x340>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00d      	beq.n	8002de6 <HAL_GPIO_Init+0x232>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a4a      	ldr	r2, [pc, #296]	; (8002ef8 <HAL_GPIO_Init+0x344>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d007      	beq.n	8002de2 <HAL_GPIO_Init+0x22e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a49      	ldr	r2, [pc, #292]	; (8002efc <HAL_GPIO_Init+0x348>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d101      	bne.n	8002dde <HAL_GPIO_Init+0x22a>
 8002dda:	2306      	movs	r3, #6
 8002ddc:	e00c      	b.n	8002df8 <HAL_GPIO_Init+0x244>
 8002dde:	2307      	movs	r3, #7
 8002de0:	e00a      	b.n	8002df8 <HAL_GPIO_Init+0x244>
 8002de2:	2305      	movs	r3, #5
 8002de4:	e008      	b.n	8002df8 <HAL_GPIO_Init+0x244>
 8002de6:	2304      	movs	r3, #4
 8002de8:	e006      	b.n	8002df8 <HAL_GPIO_Init+0x244>
 8002dea:	2303      	movs	r3, #3
 8002dec:	e004      	b.n	8002df8 <HAL_GPIO_Init+0x244>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e002      	b.n	8002df8 <HAL_GPIO_Init+0x244>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <HAL_GPIO_Init+0x244>
 8002df6:	2300      	movs	r3, #0
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	f002 0203 	and.w	r2, r2, #3
 8002dfe:	0092      	lsls	r2, r2, #2
 8002e00:	4093      	lsls	r3, r2
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	4936      	ldr	r1, [pc, #216]	; (8002ee4 <HAL_GPIO_Init+0x330>)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	089b      	lsrs	r3, r3, #2
 8002e0e:	3302      	adds	r3, #2
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002e16:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <HAL_GPIO_Init+0x34c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4013      	ands	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_GPIO_Init+0x286>
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	4a31      	ldr	r2, [pc, #196]	; (8002f00 <HAL_GPIO_Init+0x34c>)
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <HAL_GPIO_Init+0x34c>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_GPIO_Init+0x2b0>
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	4a26      	ldr	r2, [pc, #152]	; (8002f00 <HAL_GPIO_Init+0x34c>)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	6053      	str	r3, [r2, #4]
 8002e6a:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <HAL_GPIO_Init+0x34c>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4013      	ands	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_Init+0x2da>
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <HAL_GPIO_Init+0x34c>)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	6093      	str	r3, [r2, #8]
 8002e94:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <HAL_GPIO_Init+0x34c>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x304>
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <HAL_GPIO_Init+0x34c>)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	60d3      	str	r3, [r2, #12]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f47f ae78 	bne.w	8002bc4 <HAL_GPIO_Init+0x10>
 8002ed4:	bf00      	nop
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40010000 	.word	0x40010000
 8002ee8:	48000400 	.word	0x48000400
 8002eec:	48000800 	.word	0x48000800
 8002ef0:	48000c00 	.word	0x48000c00
 8002ef4:	48001000 	.word	0x48001000
 8002ef8:	48001400 	.word	0x48001400
 8002efc:	48001800 	.word	0x48001800
 8002f00:	40010400 	.word	0x40010400

08002f04 <HAL_GPIO_ReadPin>:
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	887b      	ldrh	r3, [r7, #2]
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_GPIO_ReadPin+0x1e>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
 8002f20:	e001      	b.n	8002f26 <HAL_GPIO_ReadPin+0x22>
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_GPIO_WritePin>:
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	807b      	strh	r3, [r7, #2]
 8002f40:	4613      	mov	r3, r2
 8002f42:	707b      	strb	r3, [r7, #1]
 8002f44:	787b      	ldrb	r3, [r7, #1]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_WritePin+0x1e>
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	619a      	str	r2, [r3, #24]
 8002f50:	e002      	b.n	8002f58 <HAL_GPIO_WritePin+0x24>
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_HCD_Init>:
 8002f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f66:	b08f      	sub	sp, #60	; 0x3c
 8002f68:	af0a      	add	r7, sp, #40	; 0x28
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_HCD_Init+0x12>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e054      	b.n	8003020 <HAL_HCD_Init+0xbc>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d106      	bne.n	8002f96 <HAL_HCD_Init+0x32>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f008 fa7b 	bl	800b48c <HAL_HCD_MspInit>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d102      	bne.n	8002fb0 <HAL_HCD_Init+0x4c>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	611a      	str	r2, [r3, #16]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f005 fe41 	bl	8008c3c <USB_DisableGlobalInt>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	687e      	ldr	r6, [r7, #4]
 8002fc2:	466d      	mov	r5, sp
 8002fc4:	f106 0410 	add.w	r4, r6, #16
 8002fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fd8:	1d33      	adds	r3, r6, #4
 8002fda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fdc:	6838      	ldr	r0, [r7, #0]
 8002fde:	f005 fdca 	bl	8008b76 <USB_CoreInit>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f005 fe38 	bl	8008c5e <USB_SetCurrentMode>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	687e      	ldr	r6, [r7, #4]
 8002ff6:	466d      	mov	r5, sp
 8002ff8:	f106 0410 	add.w	r4, r6, #16
 8002ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003002:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003004:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003008:	e885 0003 	stmia.w	r5, {r0, r1}
 800300c:	1d33      	adds	r3, r6, #4
 800300e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003010:	6838      	ldr	r0, [r7, #0]
 8003012:	f005 ff47 	bl	8008ea4 <USB_HostInit>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 800301e:	2300      	movs	r3, #0
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003028 <HAL_HCD_HC_Init>:
 8003028:	b590      	push	{r4, r7, lr}
 800302a:	b089      	sub	sp, #36	; 0x24
 800302c:	af04      	add	r7, sp, #16
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	4608      	mov	r0, r1
 8003032:	4611      	mov	r1, r2
 8003034:	461a      	mov	r2, r3
 8003036:	4603      	mov	r3, r0
 8003038:	70fb      	strb	r3, [r7, #3]
 800303a:	460b      	mov	r3, r1
 800303c:	70bb      	strb	r3, [r7, #2]
 800303e:	4613      	mov	r3, r2
 8003040:	707b      	strb	r3, [r7, #1]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_HCD_HC_Init+0x28>
 800304c:	2302      	movs	r3, #2
 800304e:	e07f      	b.n	8003150 <HAL_HCD_HC_Init+0x128>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	440b      	add	r3, r1
 8003066:	333d      	adds	r3, #61	; 0x3d
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	440b      	add	r3, r1
 800307a:	3338      	adds	r3, #56	; 0x38
 800307c:	787a      	ldrb	r2, [r7, #1]
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	3340      	adds	r3, #64	; 0x40
 8003090:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003092:	801a      	strh	r2, [r3, #0]
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	440b      	add	r3, r1
 80030a2:	3339      	adds	r3, #57	; 0x39
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	78fa      	ldrb	r2, [r7, #3]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	333f      	adds	r3, #63	; 0x3f
 80030b8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	78bb      	ldrb	r3, [r7, #2]
 80030c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030c6:	b2d8      	uxtb	r0, r3
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	440b      	add	r3, r1
 80030d4:	333a      	adds	r3, #58	; 0x3a
 80030d6:	4602      	mov	r2, r0
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	da0a      	bge.n	80030f8 <HAL_HCD_HC_Init+0xd0>
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	440b      	add	r3, r1
 80030f0:	333b      	adds	r3, #59	; 0x3b
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
 80030f6:	e009      	b.n	800310c <HAL_HCD_HC_Init+0xe4>
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	333b      	adds	r3, #59	; 0x3b
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	440b      	add	r3, r1
 800311a:	333c      	adds	r3, #60	; 0x3c
 800311c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	787c      	ldrb	r4, [r7, #1]
 8003128:	78ba      	ldrb	r2, [r7, #2]
 800312a:	78f9      	ldrb	r1, [r7, #3]
 800312c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800312e:	9302      	str	r3, [sp, #8]
 8003130:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	f897 3020 	ldrb.w	r3, [r7, #32]
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	4623      	mov	r3, r4
 800313e:	f005 fff5 	bl	800912c <USB_HC_Init>
 8003142:	4603      	mov	r3, r0
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bd90      	pop	{r4, r7, pc}

08003158 <HAL_HCD_HC_Halt>:
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
 8003164:	2300      	movs	r3, #0
 8003166:	73fb      	strb	r3, [r7, #15]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_HCD_HC_Halt+0x1e>
 8003172:	2302      	movs	r3, #2
 8003174:	e00f      	b.n	8003196 <HAL_HCD_HC_Halt+0x3e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f006 f9d3 	bl	8009532 <USB_HC_Halt>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <HAL_HCD_HC_SubmitRequest>:
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	4608      	mov	r0, r1
 80031aa:	4611      	mov	r1, r2
 80031ac:	461a      	mov	r2, r3
 80031ae:	4603      	mov	r3, r0
 80031b0:	70fb      	strb	r3, [r7, #3]
 80031b2:	460b      	mov	r3, r1
 80031b4:	70bb      	strb	r3, [r7, #2]
 80031b6:	4613      	mov	r3, r2
 80031b8:	707b      	strb	r3, [r7, #1]
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	440b      	add	r3, r1
 80031c8:	333b      	adds	r3, #59	; 0x3b
 80031ca:	78ba      	ldrb	r2, [r7, #2]
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	440b      	add	r3, r1
 80031dc:	333f      	adds	r3, #63	; 0x3f
 80031de:	787a      	ldrb	r2, [r7, #1]
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	7c3b      	ldrb	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10a      	bne.n	80031fe <HAL_HCD_HC_SubmitRequest+0x5e>
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	440b      	add	r3, r1
 80031f6:	3342      	adds	r3, #66	; 0x42
 80031f8:	2203      	movs	r2, #3
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e009      	b.n	8003212 <HAL_HCD_HC_SubmitRequest+0x72>
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	440b      	add	r3, r1
 800320c:	3342      	adds	r3, #66	; 0x42
 800320e:	2202      	movs	r2, #2
 8003210:	701a      	strb	r2, [r3, #0]
 8003212:	787b      	ldrb	r3, [r7, #1]
 8003214:	2b03      	cmp	r3, #3
 8003216:	f200 80d6 	bhi.w	80033c6 <HAL_HCD_HC_SubmitRequest+0x226>
 800321a:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <HAL_HCD_HC_SubmitRequest+0x80>)
 800321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003220:	08003231 	.word	0x08003231
 8003224:	080033b1 	.word	0x080033b1
 8003228:	0800329d 	.word	0x0800329d
 800322c:	08003327 	.word	0x08003327
 8003230:	7c3b      	ldrb	r3, [r7, #16]
 8003232:	2b01      	cmp	r3, #1
 8003234:	f040 80c9 	bne.w	80033ca <HAL_HCD_HC_SubmitRequest+0x22a>
 8003238:	78bb      	ldrb	r3, [r7, #2]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 80c5 	bne.w	80033ca <HAL_HCD_HC_SubmitRequest+0x22a>
 8003240:	8b3b      	ldrh	r3, [r7, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_HCD_HC_SubmitRequest+0xba>
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	440b      	add	r3, r1
 8003254:	3351      	adds	r3, #81	; 0x51
 8003256:	2201      	movs	r2, #1
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	440b      	add	r3, r1
 8003268:	3351      	adds	r3, #81	; 0x51
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10a      	bne.n	8003286 <HAL_HCD_HC_SubmitRequest+0xe6>
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	440b      	add	r3, r1
 800327e:	3342      	adds	r3, #66	; 0x42
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e0a1      	b.n	80033ca <HAL_HCD_HC_SubmitRequest+0x22a>
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	440b      	add	r3, r1
 8003294:	3342      	adds	r3, #66	; 0x42
 8003296:	2202      	movs	r2, #2
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	e096      	b.n	80033ca <HAL_HCD_HC_SubmitRequest+0x22a>
 800329c:	78bb      	ldrb	r3, [r7, #2]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d120      	bne.n	80032e4 <HAL_HCD_HC_SubmitRequest+0x144>
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	440b      	add	r3, r1
 80032b0:	3351      	adds	r3, #81	; 0x51
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <HAL_HCD_HC_SubmitRequest+0x12e>
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	440b      	add	r3, r1
 80032c6:	3342      	adds	r3, #66	; 0x42
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e07e      	b.n	80033cc <HAL_HCD_HC_SubmitRequest+0x22c>
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	440b      	add	r3, r1
 80032dc:	3342      	adds	r3, #66	; 0x42
 80032de:	2202      	movs	r2, #2
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e073      	b.n	80033cc <HAL_HCD_HC_SubmitRequest+0x22c>
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	440b      	add	r3, r1
 80032f2:	3350      	adds	r3, #80	; 0x50
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <HAL_HCD_HC_SubmitRequest+0x170>
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	440b      	add	r3, r1
 8003308:	3342      	adds	r3, #66	; 0x42
 800330a:	2200      	movs	r2, #0
 800330c:	701a      	strb	r2, [r3, #0]
 800330e:	e05d      	b.n	80033cc <HAL_HCD_HC_SubmitRequest+0x22c>
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	440b      	add	r3, r1
 800331e:	3342      	adds	r3, #66	; 0x42
 8003320:	2202      	movs	r2, #2
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	e052      	b.n	80033cc <HAL_HCD_HC_SubmitRequest+0x22c>
 8003326:	78bb      	ldrb	r3, [r7, #2]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d120      	bne.n	800336e <HAL_HCD_HC_SubmitRequest+0x1ce>
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	440b      	add	r3, r1
 800333a:	3351      	adds	r3, #81	; 0x51
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <HAL_HCD_HC_SubmitRequest+0x1b8>
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	440b      	add	r3, r1
 8003350:	3342      	adds	r3, #66	; 0x42
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	e039      	b.n	80033cc <HAL_HCD_HC_SubmitRequest+0x22c>
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	3342      	adds	r3, #66	; 0x42
 8003368:	2202      	movs	r2, #2
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	e02e      	b.n	80033cc <HAL_HCD_HC_SubmitRequest+0x22c>
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	440b      	add	r3, r1
 800337c:	3350      	adds	r3, #80	; 0x50
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <HAL_HCD_HC_SubmitRequest+0x1fa>
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	440b      	add	r3, r1
 8003392:	3342      	adds	r3, #66	; 0x42
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	e018      	b.n	80033cc <HAL_HCD_HC_SubmitRequest+0x22c>
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	440b      	add	r3, r1
 80033a8:	3342      	adds	r3, #66	; 0x42
 80033aa:	2202      	movs	r2, #2
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	e00d      	b.n	80033cc <HAL_HCD_HC_SubmitRequest+0x22c>
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	440b      	add	r3, r1
 80033be:	3342      	adds	r3, #66	; 0x42
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]
 80033c4:	e002      	b.n	80033cc <HAL_HCD_HC_SubmitRequest+0x22c>
 80033c6:	bf00      	nop
 80033c8:	e000      	b.n	80033cc <HAL_HCD_HC_SubmitRequest+0x22c>
 80033ca:	bf00      	nop
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	440b      	add	r3, r1
 80033da:	3344      	adds	r3, #68	; 0x44
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	8b39      	ldrh	r1, [r7, #24]
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4403      	add	r3, r0
 80033f0:	3348      	adds	r3, #72	; 0x48
 80033f2:	6019      	str	r1, [r3, #0]
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	440b      	add	r3, r1
 8003402:	335c      	adds	r3, #92	; 0x5c
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	440b      	add	r3, r1
 8003416:	334c      	adds	r3, #76	; 0x4c
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 800341c:	78fa      	ldrb	r2, [r7, #3]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	440b      	add	r3, r1
<<<<<<< HEAD
 800342a:	3342      	adds	r3, #66	; 0x42
 800342c:	2202      	movs	r2, #2
 800342e:	701a      	strb	r2, [r3, #0]
      break;
 8003430:	e02e      	b.n	8003490 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	440b      	add	r3, r1
 8003440:	3350      	adds	r3, #80	; 0x50
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10a      	bne.n	800345e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	440b      	add	r3, r1
 8003456:	3342      	adds	r3, #66	; 0x42
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
      break;
 800345c:	e018      	b.n	8003490 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	440b      	add	r3, r1
 800346c:	3342      	adds	r3, #66	; 0x42
 800346e:	2202      	movs	r2, #2
 8003470:	701a      	strb	r2, [r3, #0]
      break;
 8003472:	e00d      	b.n	8003490 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	440b      	add	r3, r1
 8003482:	3342      	adds	r3, #66	; 0x42
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
      break;
 8003488:	e002      	b.n	8003490 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800348a:	bf00      	nop
 800348c:	e000      	b.n	8003490 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800348e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	440b      	add	r3, r1
 800349e:	3344      	adds	r3, #68	; 0x44
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	8b39      	ldrh	r1, [r7, #24]
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4403      	add	r3, r0
 80034b4:	3348      	adds	r3, #72	; 0x48
 80034b6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	440b      	add	r3, r1
 80034c6:	335c      	adds	r3, #92	; 0x5c
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	440b      	add	r3, r1
 80034da:	334c      	adds	r3, #76	; 0x4c
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	440b      	add	r3, r1
 80034ee:	3339      	adds	r3, #57	; 0x39
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80034f4:	78fa      	ldrb	r2, [r7, #3]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	440b      	add	r3, r1
 8003502:	335d      	adds	r3, #93	; 0x5d
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	3338      	adds	r3, #56	; 0x38
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4413      	add	r3, r2
 800351c:	4619      	mov	r1, r3
 800351e:	f005 ff59 	bl	80093d4 <USB_HC_StartXfer>
 8003522:	4603      	mov	r3, r0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f005 fccd 	bl	8008ee2 <USB_GetMode>
 8003548:	4603      	mov	r3, r0
 800354a:	2b01      	cmp	r3, #1
 800354c:	f040 80f1 	bne.w	8003732 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f005 fcb1 	bl	8008ebc <USB_ReadInterrupts>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80e7 	beq.w	8003730 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f005 fca8 	bl	8008ebc <USB_ReadInterrupts>
 800356c:	4603      	mov	r3, r0
 800356e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003576:	d104      	bne.n	8003582 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003580:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f005 fc98 	bl	8008ebc <USB_ReadInterrupts>
 800358c:	4603      	mov	r3, r0
 800358e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003596:	d104      	bne.n	80035a2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f005 fc88 	bl	8008ebc <USB_ReadInterrupts>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035b6:	d104      	bne.n	80035c2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80035c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f005 fc78 	bl	8008ebc <USB_ReadInterrupts>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d103      	bne.n	80035de <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2202      	movs	r2, #2
 80035dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f005 fc6a 	bl	8008ebc <USB_ReadInterrupts>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035f2:	d117      	bne.n	8003624 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003602:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003606:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f008 f823 	bl	800b654 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2101      	movs	r1, #1
 8003614:	4618      	mov	r0, r3
 8003616:	f005 fd25 	bl	8009064 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003622:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f005 fc47 	bl	8008ebc <USB_ReadInterrupts>
 800362e:	4603      	mov	r3, r0
 8003630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003638:	d102      	bne.n	8003640 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f001 f884 	bl	8004748 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f005 fc39 	bl	8008ebc <USB_ReadInterrupts>
 800364a:	4603      	mov	r3, r0
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b08      	cmp	r3, #8
 8003652:	d106      	bne.n	8003662 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f007 ffe1 	bl	800b61c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2208      	movs	r2, #8
 8003660:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f005 fc28 	bl	8008ebc <USB_ReadInterrupts>
 800366c:	4603      	mov	r3, r0
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003676:	d138      	bne.n	80036ea <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f005 ffa9 	bl	80095d4 <USB_HC_ReadInterrupt>
 8003682:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	e025      	b.n	80036d6 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	fa22 f303 	lsr.w	r3, r2, r3
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d018      	beq.n	80036d0 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b4:	d106      	bne.n	80036c4 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	4619      	mov	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f8cf 	bl	8003860 <HCD_HC_IN_IRQHandler>
 80036c2:	e005      	b.n	80036d0 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	4619      	mov	r1, r3
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fc3b 	bl	8003f46 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	3301      	adds	r3, #1
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d3d4      	bcc.n	800368a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f005 fbe4 	bl	8008ebc <USB_ReadInterrupts>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d101      	bne.n	8003702 <HAL_HCD_IRQHandler+0x1d6>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_HCD_IRQHandler+0x1d8>
 8003702:	2300      	movs	r3, #0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d014      	beq.n	8003732 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0210 	bic.w	r2, r2, #16
 8003716:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 ff69 	bl	80045f0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699a      	ldr	r2, [r3, #24]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0210 	orr.w	r2, r2, #16
 800372c:	619a      	str	r2, [r3, #24]
 800372e:	e000      	b.n	8003732 <HAL_HCD_IRQHandler+0x206>
      return;
 8003730:	bf00      	nop
    }
  }
}
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_HCD_Start+0x16>
 800374a:	2302      	movs	r3, #2
 800374c:	e013      	b.n	8003776 <HAL_HCD_Start+0x3e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f005 fabf 	bl	8008cde <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2101      	movs	r1, #1
 8003766:	4618      	mov	r0, r3
 8003768:	f005 fce0 	bl	800912c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_HCD_Stop+0x16>
 8003790:	2302      	movs	r3, #2
 8003792:	e00d      	b.n	80037b0 <HAL_HCD_Stop+0x32>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f006 f827 	bl	80097f4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f005 fc87 	bl	80090d8 <USB_ResetPort>
 80037ca:	4603      	mov	r3, r0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	440b      	add	r3, r1
 80037ee:	335c      	adds	r3, #92	; 0x5c
 80037f0:	781b      	ldrb	r3, [r3, #0]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	460b      	mov	r3, r1
 8003808:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800380a:	78fa      	ldrb	r2, [r7, #3]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	440b      	add	r3, r1
 8003818:	334c      	adds	r3, #76	; 0x4c
 800381a:	681b      	ldr	r3, [r3, #0]
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f005 fcc9 	bl	80091cc <USB_GetCurrentFrame>
 800383a:	4603      	mov	r3, r0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f005 fca4 	bl	800919e <USB_GetHostSpeed>
 8003856:	4603      	mov	r3, r0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	4413      	add	r3, r2
 8003882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b04      	cmp	r3, #4
 800388e:	d119      	bne.n	80038c4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4413      	add	r3, r2
 8003898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389c:	461a      	mov	r2, r3
 800389e:	2304      	movs	r3, #4
 80038a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	0151      	lsls	r1, r2, #5
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	440a      	add	r2, r1
 80038b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038bc:	f043 0302 	orr.w	r3, r3, #2
 80038c0:	60d3      	str	r3, [r2, #12]
 80038c2:	e095      	b.n	80039f0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	d109      	bne.n	80038ee <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e6:	461a      	mov	r2, r3
 80038e8:	2320      	movs	r3, #32
 80038ea:	6093      	str	r3, [r2, #8]
 80038ec:	e080      	b.n	80039f0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b08      	cmp	r3, #8
 8003902:	d134      	bne.n	800396e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	0151      	lsls	r1, r2, #5
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	440a      	add	r2, r1
 800391a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800391e:	f043 0302 	orr.w	r3, r3, #2
 8003922:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	440b      	add	r3, r1
 8003932:	335d      	adds	r3, #93	; 0x5d
 8003934:	2205      	movs	r2, #5
 8003936:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	461a      	mov	r2, r3
 8003946:	2310      	movs	r3, #16
 8003948:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4413      	add	r3, r2
 8003952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003956:	461a      	mov	r2, r3
 8003958:	2308      	movs	r3, #8
 800395a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f005 fe45 	bl	80095f6 <USB_HC_Halt>
 800396c:	e040      	b.n	80039f0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4413      	add	r3, r2
 8003976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003984:	d134      	bne.n	80039f0 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4413      	add	r3, r2
 800398e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	0151      	lsls	r1, r2, #5
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	440a      	add	r2, r1
 800399c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039a0:	f043 0302 	orr.w	r3, r3, #2
 80039a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f005 fe20 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c2:	461a      	mov	r2, r3
 80039c4:	2310      	movs	r3, #16
 80039c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	440b      	add	r3, r1
 80039d6:	335d      	adds	r3, #93	; 0x5d
 80039d8:	2208      	movs	r2, #8
 80039da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e8:	461a      	mov	r2, r3
 80039ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039ee:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a06:	d122      	bne.n	8003a4e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
=======
 800342a:	3339      	adds	r3, #57	; 0x39
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	701a      	strb	r2, [r3, #0]
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	440b      	add	r3, r1
 800343e:	335d      	adds	r3, #93	; 0x5d
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	3338      	adds	r3, #56	; 0x38
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	4413      	add	r3, r2
 8003458:	4619      	mov	r1, r3
 800345a:	f005 ff59 	bl	8009310 <USB_HC_StartXfer>
 800345e:	4603      	mov	r3, r0
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_HCD_IRQHandler>:
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f005 fccd 	bl	8008e1e <USB_GetMode>
 8003484:	4603      	mov	r3, r0
 8003486:	2b01      	cmp	r3, #1
 8003488:	f040 80f1 	bne.w	800366e <HAL_HCD_IRQHandler+0x206>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f005 fcb1 	bl	8008df8 <USB_ReadInterrupts>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 80e7 	beq.w	800366c <HAL_HCD_IRQHandler+0x204>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f005 fca8 	bl	8008df8 <USB_ReadInterrupts>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b2:	d104      	bne.n	80034be <HAL_HCD_IRQHandler+0x56>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80034bc:	615a      	str	r2, [r3, #20]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f005 fc98 	bl	8008df8 <USB_ReadInterrupts>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d2:	d104      	bne.n	80034de <HAL_HCD_IRQHandler+0x76>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034dc:	615a      	str	r2, [r3, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f005 fc88 	bl	8008df8 <USB_ReadInterrupts>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034f2:	d104      	bne.n	80034fe <HAL_HCD_IRQHandler+0x96>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80034fc:	615a      	str	r2, [r3, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f005 fc78 	bl	8008df8 <USB_ReadInterrupts>
 8003508:	4603      	mov	r3, r0
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b02      	cmp	r3, #2
 8003510:	d103      	bne.n	800351a <HAL_HCD_IRQHandler+0xb2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2202      	movs	r2, #2
 8003518:	615a      	str	r2, [r3, #20]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f005 fc6a 	bl	8008df8 <USB_ReadInterrupts>
 8003524:	4603      	mov	r3, r0
 8003526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800352a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800352e:	d117      	bne.n	8003560 <HAL_HCD_IRQHandler+0xf8>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800353e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f008 f823 	bl	800b590 <HAL_HCD_Disconnect_Callback>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2101      	movs	r1, #1
 8003550:	4618      	mov	r0, r3
 8003552:	f005 fd25 	bl	8008fa0 <USB_InitFSLSPClkSel>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800355e:	615a      	str	r2, [r3, #20]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f005 fc47 	bl	8008df8 <USB_ReadInterrupts>
 800356a:	4603      	mov	r3, r0
 800356c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003574:	d102      	bne.n	800357c <HAL_HCD_IRQHandler+0x114>
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f001 f884 	bl	8004684 <HCD_Port_IRQHandler>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f005 fc39 	bl	8008df8 <USB_ReadInterrupts>
 8003586:	4603      	mov	r3, r0
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b08      	cmp	r3, #8
 800358e:	d106      	bne.n	800359e <HAL_HCD_IRQHandler+0x136>
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f007 ffe1 	bl	800b558 <HAL_HCD_SOF_Callback>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2208      	movs	r2, #8
 800359c:	615a      	str	r2, [r3, #20]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f005 fc28 	bl	8008df8 <USB_ReadInterrupts>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035b2:	d138      	bne.n	8003626 <HAL_HCD_IRQHandler+0x1be>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f005 ffa9 	bl	8009510 <USB_HC_ReadInterrupt>
 80035be:	60b8      	str	r0, [r7, #8]
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	e025      	b.n	8003612 <HAL_HCD_IRQHandler+0x1aa>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	fa22 f303 	lsr.w	r3, r2, r3
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d018      	beq.n	800360c <HAL_HCD_IRQHandler+0x1a4>
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f0:	d106      	bne.n	8003600 <HAL_HCD_IRQHandler+0x198>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	4619      	mov	r1, r3
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f8cf 	bl	800379c <HCD_HC_IN_IRQHandler>
 80035fe:	e005      	b.n	800360c <HAL_HCD_IRQHandler+0x1a4>
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	4619      	mov	r1, r3
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fc3b 	bl	8003e82 <HCD_HC_OUT_IRQHandler>
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	3301      	adds	r3, #1
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	429a      	cmp	r2, r3
 800361a:	d3d4      	bcc.n	80035c6 <HAL_HCD_IRQHandler+0x15e>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003624:	615a      	str	r2, [r3, #20]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f005 fbe4 	bl	8008df8 <USB_ReadInterrupts>
 8003630:	4603      	mov	r3, r0
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b10      	cmp	r3, #16
 8003638:	d101      	bne.n	800363e <HAL_HCD_IRQHandler+0x1d6>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_HCD_IRQHandler+0x1d8>
 800363e:	2300      	movs	r3, #0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d014      	beq.n	800366e <HAL_HCD_IRQHandler+0x206>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699a      	ldr	r2, [r3, #24]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0210 	bic.w	r2, r2, #16
 8003652:	619a      	str	r2, [r3, #24]
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 ff69 	bl	800452c <HCD_RXQLVL_IRQHandler>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699a      	ldr	r2, [r3, #24]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 0210 	orr.w	r2, r2, #16
 8003668:	619a      	str	r2, [r3, #24]
 800366a:	e000      	b.n	800366e <HAL_HCD_IRQHandler+0x206>
 800366c:	bf00      	nop
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_HCD_Start>:
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_HCD_Start+0x16>
 8003686:	2302      	movs	r3, #2
 8003688:	e013      	b.n	80036b2 <HAL_HCD_Start+0x3e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f005 fabf 	bl	8008c1a <USB_EnableGlobalInt>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2101      	movs	r1, #1
 80036a2:	4618      	mov	r0, r3
 80036a4:	f005 fce0 	bl	8009068 <USB_DriveVbus>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 80036b0:	2300      	movs	r3, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_HCD_Stop>:
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_HCD_Stop+0x16>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e00d      	b.n	80036ec <HAL_HCD_Stop+0x32>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f006 f827 	bl	8009730 <USB_StopHost>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 80036ea:	2300      	movs	r3, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_HCD_ResetPort>:
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f005 fc87 	bl	8009014 <USB_ResetPort>
 8003706:	4603      	mov	r3, r0
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_HCD_HC_GetURBState>:
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	70fb      	strb	r3, [r7, #3]
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	440b      	add	r3, r1
 800372a:	335c      	adds	r3, #92	; 0x5c
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_HCD_HC_GetXferCount>:
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	460b      	mov	r3, r1
 8003744:	70fb      	strb	r3, [r7, #3]
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	440b      	add	r3, r1
 8003754:	334c      	adds	r3, #76	; 0x4c
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_HCD_GetCurrentFrame>:
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f005 fcc9 	bl	8009108 <USB_GetCurrentFrame>
 8003776:	4603      	mov	r3, r0
 8003778:	4618      	mov	r0, r3
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_HCD_GetCurrentSpeed>:
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f005 fca4 	bl	80090da <USB_GetHostSpeed>
 8003792:	4603      	mov	r3, r0
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HCD_HC_IN_IRQHandler>:
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	70fb      	strb	r3, [r7, #3]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	613b      	str	r3, [r7, #16]
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d119      	bne.n	8003800 <HCD_HC_IN_IRQHandler+0x64>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d8:	461a      	mov	r2, r3
 80037da:	2304      	movs	r3, #4
 80037dc:	6093      	str	r3, [r2, #8]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	0151      	lsls	r1, r2, #5
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	440a      	add	r2, r1
 80037f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037f8:	f043 0302 	orr.w	r3, r3, #2
 80037fc:	60d3      	str	r3, [r2, #12]
 80037fe:	e095      	b.n	800392c <HCD_HC_IN_IRQHandler+0x190>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4413      	add	r3, r2
 8003808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	2b20      	cmp	r3, #32
 8003814:	d109      	bne.n	800382a <HCD_HC_IN_IRQHandler+0x8e>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4413      	add	r3, r2
 800381e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003822:	461a      	mov	r2, r3
 8003824:	2320      	movs	r3, #32
 8003826:	6093      	str	r3, [r2, #8]
 8003828:	e080      	b.n	800392c <HCD_HC_IN_IRQHandler+0x190>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4413      	add	r3, r2
 8003832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b08      	cmp	r3, #8
 800383e:	d134      	bne.n	80038aa <HCD_HC_IN_IRQHandler+0x10e>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4413      	add	r3, r2
 8003848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	0151      	lsls	r1, r2, #5
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	440a      	add	r2, r1
 8003856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800385a:	f043 0302 	orr.w	r3, r3, #2
 800385e:	60d3      	str	r3, [r2, #12]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	440b      	add	r3, r1
 800386e:	335d      	adds	r3, #93	; 0x5d
 8003870:	2205      	movs	r2, #5
 8003872:	701a      	strb	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003880:	461a      	mov	r2, r3
 8003882:	2310      	movs	r3, #16
 8003884:	6093      	str	r3, [r2, #8]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4413      	add	r3, r2
 800388e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003892:	461a      	mov	r2, r3
 8003894:	2308      	movs	r3, #8
 8003896:	6093      	str	r3, [r2, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	4611      	mov	r1, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f005 fe45 	bl	8009532 <USB_HC_Halt>
 80038a8:	e040      	b.n	800392c <HCD_HC_IN_IRQHandler+0x190>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c0:	d134      	bne.n	800392c <HCD_HC_IN_IRQHandler+0x190>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	0151      	lsls	r1, r2, #5
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	440a      	add	r2, r1
 80038d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038dc:	f043 0302 	orr.w	r3, r3, #2
 80038e0:	60d3      	str	r3, [r2, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f005 fe20 	bl	8009532 <USB_HC_Halt>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fe:	461a      	mov	r2, r3
 8003900:	2310      	movs	r3, #16
 8003902:	6093      	str	r3, [r2, #8]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	440b      	add	r3, r1
 8003912:	335d      	adds	r3, #93	; 0x5d
 8003914:	2208      	movs	r2, #8
 8003916:	701a      	strb	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003924:	461a      	mov	r2, r3
 8003926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800392a:	6093      	str	r3, [r2, #8]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4413      	add	r3, r2
 8003934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800393e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003942:	d122      	bne.n	800398a <HCD_HC_IN_IRQHandler+0x1ee>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4413      	add	r3, r2
 800394c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	0151      	lsls	r1, r2, #5
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	440a      	add	r2, r1
 800395a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800395e:	f043 0302 	orr.w	r3, r3, #2
 8003962:	60d3      	str	r3, [r2, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f005 fddf 	bl	8009532 <USB_HC_Halt>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4413      	add	r3, r2
 800397c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003980:	461a      	mov	r2, r3
 8003982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003986:	6093      	str	r3, [r2, #8]
 8003988:	e277      	b.n	8003e7a <HCD_HC_IN_IRQHandler+0x6de>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4413      	add	r3, r2
 8003992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	f040 80a1 	bne.w	8003ae4 <HCD_HC_IN_IRQHandler+0x348>
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	440b      	add	r3, r1
 80039b0:	335d      	adds	r3, #93	; 0x5d
 80039b2:	2201      	movs	r2, #1
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	440b      	add	r3, r1
 80039c4:	3358      	adds	r3, #88	; 0x58
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d6:	461a      	mov	r2, r3
 80039d8:	2301      	movs	r3, #1
 80039da:	6093      	str	r3, [r2, #8]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	440b      	add	r3, r1
 80039ea:	333f      	adds	r3, #63	; 0x3f
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HCD_HC_IN_IRQHandler+0x26c>
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	440b      	add	r3, r1
 8003a00:	333f      	adds	r3, #63	; 0x3f
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d121      	bne.n	8003a4c <HCD_HC_IN_IRQHandler+0x2b0>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	0151      	lsls	r1, r2, #5
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	440a      	add	r2, r1
 8003a1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a22:	f043 0302 	orr.w	r3, r3, #2
 8003a26:	60d3      	str	r3, [r2, #12]
<<<<<<< HEAD
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
=======
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	4611      	mov	r1, r2
 8003a32:	4618      	mov	r0, r3
<<<<<<< HEAD
 8003a34:	f005 fddf 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
=======
 8003a34:	f005 fd7d 	bl	8009532 <USB_HC_Halt>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a44:	461a      	mov	r2, r3
<<<<<<< HEAD
 8003a46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a4a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003a4c:	e277      	b.n	8003f3e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	f040 80a1 	bne.w	8003ba8 <HCD_HC_IN_IRQHandler+0x348>
    hhcd->hc[ch_num].state = HC_XFRC;
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	440b      	add	r3, r1
 8003a74:	335d      	adds	r3, #93	; 0x5d
 8003a76:	2201      	movs	r2, #1
 8003a78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	440b      	add	r3, r1
 8003a88:	3358      	adds	r3, #88	; 0x58
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	440b      	add	r3, r1
 8003aae:	333f      	adds	r3, #63	; 0x3f
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
=======
 8003a46:	2310      	movs	r3, #16
 8003a48:	6093      	str	r3, [r2, #8]
 8003a4a:	e034      	b.n	8003ab6 <HCD_HC_IN_IRQHandler+0x31a>
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	440b      	add	r3, r1
 8003a5a:	333f      	adds	r3, #63	; 0x3f
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d129      	bne.n	8003ab6 <HCD_HC_IN_IRQHandler+0x31a>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	0151      	lsls	r1, r2, #5
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	440a      	add	r2, r1
 8003a78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	440b      	add	r3, r1
 8003a90:	335c      	adds	r3, #92	; 0x5c
 8003a92:	2201      	movs	r2, #1
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	b2d8      	uxtb	r0, r3
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	440b      	add	r3, r1
 8003aa8:	335c      	adds	r3, #92	; 0x5c
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	4601      	mov	r1, r0
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f007 fd7b 	bl	800b5ac <HAL_HCD_HC_NotifyURBChange_Callback>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	440b      	add	r3, r1
 8003ac4:	333f      	adds	r3, #63	; 0x3f
 8003ac6:	781b      	ldrb	r3, [r3, #0]
<<<<<<< HEAD
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d121      	bne.n	8003b10 <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	0151      	lsls	r1, r2, #5
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	440a      	add	r2, r1
 8003ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ae6:	f043 0302 	orr.w	r3, r3, #2
 8003aea:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	4611      	mov	r1, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f005 fd7d 	bl	80095f6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
=======
 8003ac8:	f083 0301 	eor.w	r3, r3, #1
 8003acc:	b2d8      	uxtb	r0, r3
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	440b      	add	r3, r1
 8003adc:	3350      	adds	r3, #80	; 0x50
 8003ade:	4602      	mov	r2, r0
 8003ae0:	701a      	strb	r2, [r3, #0]
 8003ae2:	e1ca      	b.n	8003e7a <HCD_HC_IN_IRQHandler+0x6de>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	f040 80f1 	bne.w	8003cde <HCD_HC_IN_IRQHandler+0x542>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
<<<<<<< HEAD
 8003b08:	461a      	mov	r2, r3
 8003b0a:	2310      	movs	r3, #16
 8003b0c:	6093      	str	r3, [r2, #8]
 8003b0e:	e034      	b.n	8003b7a <HCD_HC_IN_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	440b      	add	r3, r1
 8003b1e:	333f      	adds	r3, #63	; 0x3f
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d129      	bne.n	8003b7a <HCD_HC_IN_IRQHandler+0x31a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	0151      	lsls	r1, r2, #5
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	440a      	add	r2, r1
 8003b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b44:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	440b      	add	r3, r1
 8003b54:	335c      	adds	r3, #92	; 0x5c
 8003b56:	2201      	movs	r2, #1
 8003b58:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	b2d8      	uxtb	r0, r3
=======
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	0151      	lsls	r1, r2, #5
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	440a      	add	r2, r1
 8003b12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b16:	f023 0302 	bic.w	r3, r3, #2
 8003b1a:	60d3      	str	r3, [r2, #12]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	440b      	add	r3, r1
 8003b2a:	335d      	adds	r3, #93	; 0x5d
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d10a      	bne.n	8003b48 <HCD_HC_IN_IRQHandler+0x3ac>
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	440b      	add	r3, r1
 8003b40:	335c      	adds	r3, #92	; 0x5c
 8003b42:	2201      	movs	r2, #1
 8003b44:	701a      	strb	r2, [r3, #0]
 8003b46:	e0b0      	b.n	8003caa <HCD_HC_IN_IRQHandler+0x50e>
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	440b      	add	r3, r1
 8003b56:	335d      	adds	r3, #93	; 0x5d
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b05      	cmp	r3, #5
 8003b5c:	d10a      	bne.n	8003b74 <HCD_HC_IN_IRQHandler+0x3d8>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	440b      	add	r3, r1
 8003b6c:	335c      	adds	r3, #92	; 0x5c
<<<<<<< HEAD
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	4601      	mov	r1, r0
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f007 fd7b 	bl	800b670 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	440b      	add	r3, r1
 8003b88:	3350      	adds	r3, #80	; 0x50
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	f083 0301 	eor.w	r3, r3, #1
 8003b90:	b2d8      	uxtb	r0, r3
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	440b      	add	r3, r1
 8003ba0:	3350      	adds	r3, #80	; 0x50
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	701a      	strb	r2, [r3, #0]
}
 8003ba6:	e1ca      	b.n	8003f3e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	f040 80f1 	bne.w	8003da2 <HCD_HC_IN_IRQHandler+0x542>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	0151      	lsls	r1, r2, #5
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	440a      	add	r2, r1
 8003bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bda:	f023 0302 	bic.w	r3, r3, #2
 8003bde:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	440b      	add	r3, r1
 8003bee:	335d      	adds	r3, #93	; 0x5d
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d10a      	bne.n	8003c0c <HCD_HC_IN_IRQHandler+0x3ac>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	440b      	add	r3, r1
 8003c04:	335c      	adds	r3, #92	; 0x5c
 8003c06:	2201      	movs	r2, #1
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	e0b0      	b.n	8003d6e <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	440b      	add	r3, r1
 8003c1a:	335d      	adds	r3, #93	; 0x5d
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b05      	cmp	r3, #5
 8003c20:	d10a      	bne.n	8003c38 <HCD_HC_IN_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	440b      	add	r3, r1
 8003c30:	335c      	adds	r3, #92	; 0x5c
 8003c32:	2205      	movs	r2, #5
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	e09a      	b.n	8003d6e <HCD_HC_IN_IRQHandler+0x50e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	440b      	add	r3, r1
 8003c46:	335d      	adds	r3, #93	; 0x5d
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b06      	cmp	r3, #6
 8003c4c:	d00a      	beq.n	8003c64 <HCD_HC_IN_IRQHandler+0x404>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
=======
 8003b6e:	2205      	movs	r2, #5
 8003b70:	701a      	strb	r2, [r3, #0]
 8003b72:	e09a      	b.n	8003caa <HCD_HC_IN_IRQHandler+0x50e>
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	440b      	add	r3, r1
 8003b82:	335d      	adds	r3, #93	; 0x5d
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b06      	cmp	r3, #6
 8003b88:	d00a      	beq.n	8003ba0 <HCD_HC_IN_IRQHandler+0x404>
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	440b      	add	r3, r1
 8003b98:	335d      	adds	r3, #93	; 0x5d
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d156      	bne.n	8003c4e <HCD_HC_IN_IRQHandler+0x4b2>
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	440b      	add	r3, r1
 8003bae:	3358      	adds	r3, #88	; 0x58
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	1c59      	adds	r1, r3, #1
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4403      	add	r3, r0
 8003bc2:	3358      	adds	r3, #88	; 0x58
 8003bc4:	6019      	str	r1, [r3, #0]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3358      	adds	r3, #88	; 0x58
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d914      	bls.n	8003c06 <HCD_HC_IN_IRQHandler+0x46a>
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	440b      	add	r3, r1
 8003bea:	3358      	adds	r3, #88	; 0x58
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	440b      	add	r3, r1
 8003bfe:	335c      	adds	r3, #92	; 0x5c
 8003c00:	2204      	movs	r2, #4
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	e009      	b.n	8003c1a <HCD_HC_IN_IRQHandler+0x47e>
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	440b      	add	r3, r1
 8003c14:	335c      	adds	r3, #92	; 0x5c
 8003c16:	2202      	movs	r2, #2
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c46:	461a      	mov	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	e02d      	b.n	8003caa <HCD_HC_IN_IRQHandler+0x50e>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	440b      	add	r3, r1
 8003c5c:	335d      	adds	r3, #93	; 0x5d
 8003c5e:	781b      	ldrb	r3, [r3, #0]
<<<<<<< HEAD
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d156      	bne.n	8003d12 <HCD_HC_IN_IRQHandler+0x4b2>
      hhcd->hc[ch_num].ErrCnt++;
=======
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d122      	bne.n	8003caa <HCD_HC_IN_IRQHandler+0x50e>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	440b      	add	r3, r1
<<<<<<< HEAD
 8003c72:	3358      	adds	r3, #88	; 0x58
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	1c59      	adds	r1, r3, #1
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4403      	add	r3, r0
 8003c86:	3358      	adds	r3, #88	; 0x58
 8003c88:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	440b      	add	r3, r1
 8003c98:	3358      	adds	r3, #88	; 0x58
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d914      	bls.n	8003cca <HCD_HC_IN_IRQHandler+0x46a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	440b      	add	r3, r1
 8003cae:	3358      	adds	r3, #88	; 0x58
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	440b      	add	r3, r1
 8003cc2:	335c      	adds	r3, #92	; 0x5c
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	e009      	b.n	8003cde <HCD_HC_IN_IRQHandler+0x47e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	440b      	add	r3, r1
 8003cd8:	335c      	adds	r3, #92	; 0x5c
 8003cda:	2202      	movs	r2, #2
 8003cdc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
=======
 8003c72:	335c      	adds	r3, #92	; 0x5c
 8003c74:	2202      	movs	r2, #2
 8003c76:	701a      	strb	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60bb      	str	r3, [r7, #8]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	2302      	movs	r3, #2
 8003cba:	6093      	str	r3, [r2, #8]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	b2d8      	uxtb	r0, r3
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	440b      	add	r3, r1
 8003cce:	335c      	adds	r3, #92	; 0x5c
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4601      	mov	r1, r0
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f007 fc68 	bl	800b5ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8003cdc:	e0cd      	b.n	8003e7a <HCD_HC_IN_IRQHandler+0x6de>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
<<<<<<< HEAD
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cf4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cfc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	e02d      	b.n	8003d6e <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	440b      	add	r3, r1
 8003d20:	335d      	adds	r3, #93	; 0x5d
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d122      	bne.n	8003d6e <HCD_HC_IN_IRQHandler+0x50e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d28:	6879      	ldr	r1, [r7, #4]
=======
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf0:	2b80      	cmp	r3, #128	; 0x80
 8003cf2:	d13e      	bne.n	8003d72 <HCD_HC_IN_IRQHandler+0x5d6>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	0151      	lsls	r1, r2, #5
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	440a      	add	r2, r1
 8003d0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d0e:	f043 0302 	orr.w	r3, r3, #2
 8003d12:	60d3      	str	r3, [r2, #12]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	440b      	add	r3, r1
 8003d22:	3358      	adds	r3, #88	; 0x58
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	1c59      	adds	r1, r3, #1
 8003d28:	6878      	ldr	r0, [r7, #4]
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
<<<<<<< HEAD
 8003d34:	440b      	add	r3, r1
 8003d36:	335c      	adds	r3, #92	; 0x5c
 8003d38:	2202      	movs	r2, #2
 8003d3a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d52:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d5a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d68:	461a      	mov	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	b2d8      	uxtb	r0, r3
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	440b      	add	r3, r1
 8003d92:	335c      	adds	r3, #92	; 0x5c
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	4601      	mov	r1, r0
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f007 fc68 	bl	800b670 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003da0:	e0cd      	b.n	8003f3e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	2b80      	cmp	r3, #128	; 0x80
 8003db6:	d13e      	bne.n	8003e36 <HCD_HC_IN_IRQHandler+0x5d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	0151      	lsls	r1, r2, #5
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	440a      	add	r2, r1
 8003dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dd2:	f043 0302 	orr.w	r3, r3, #2
 8003dd6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	440b      	add	r3, r1
 8003de6:	3358      	adds	r3, #88	; 0x58
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	1c59      	adds	r1, r3, #1
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4403      	add	r3, r0
 8003dfa:	3358      	adds	r3, #88	; 0x58
 8003dfc:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	440b      	add	r3, r1
 8003e0c:	335d      	adds	r3, #93	; 0x5d
 8003e0e:	2206      	movs	r2, #6
 8003e10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f005 fbea 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2e:	461a      	mov	r2, r3
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	6093      	str	r3, [r2, #8]
}
 8003e34:	e083      	b.n	8003f3e <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b10      	cmp	r3, #16
 8003e4a:	d178      	bne.n	8003f3e <HCD_HC_IN_IRQHandler+0x6de>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	440b      	add	r3, r1
 8003e5a:	333f      	adds	r3, #63	; 0x3f
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d122      	bne.n	8003ea8 <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	440b      	add	r3, r1
 8003e70:	3358      	adds	r3, #88	; 0x58
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	0151      	lsls	r1, r2, #5
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	440a      	add	r2, r1
 8003e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e90:	f043 0302 	orr.w	r3, r3, #2
 8003e94:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f005 fba8 	bl	80095f6 <USB_HC_Halt>
 8003ea6:	e041      	b.n	8003f2c <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	440b      	add	r3, r1
 8003eb6:	333f      	adds	r3, #63	; 0x3f
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HCD_HC_IN_IRQHandler+0x674>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	440b      	add	r3, r1
 8003ecc:	333f      	adds	r3, #63	; 0x3f
 8003ece:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d12b      	bne.n	8003f2c <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	440b      	add	r3, r1
 8003ee2:	3358      	adds	r3, #88	; 0x58
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	440b      	add	r3, r1
 8003ef6:	335d      	adds	r3, #93	; 0x5d
 8003ef8:	2203      	movs	r2, #3
 8003efa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f16:	f043 0302 	orr.w	r3, r3, #2
 8003f1a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f005 fb65 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f38:	461a      	mov	r2, r3
 8003f3a:	2310      	movs	r3, #16
 8003f3c:	6093      	str	r3, [r2, #8]
}
 8003f3e:	bf00      	nop
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b086      	sub	sp, #24
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d119      	bne.n	8003faa <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f82:	461a      	mov	r2, r3
 8003f84:	2304      	movs	r3, #4
 8003f86:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	0151      	lsls	r1, r2, #5
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	440a      	add	r2, r1
 8003f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fa2:	f043 0302 	orr.w	r3, r3, #2
 8003fa6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003fa8:	e31e      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	d141      	bne.n	8004044 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2320      	movs	r3, #32
 8003fd0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	440b      	add	r3, r1
 8003fe0:	333d      	adds	r3, #61	; 0x3d
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	f040 82ff 	bne.w	80045e8 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	440b      	add	r3, r1
 8003ff8:	333d      	adds	r3, #61	; 0x3d
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	440b      	add	r3, r1
 800400c:	335c      	adds	r3, #92	; 0x5c
 800400e:	2202      	movs	r2, #2
 8004010:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4413      	add	r3, r2
 800401a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	0151      	lsls	r1, r2, #5
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	440a      	add	r2, r1
 8004028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800402c:	f043 0302 	orr.w	r3, r3, #2
 8004030:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f005 fada 	bl	80095f6 <USB_HC_Halt>
}
 8004042:	e2d1      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4413      	add	r3, r2
 800404c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004056:	2b40      	cmp	r3, #64	; 0x40
 8004058:	d13f      	bne.n	80040da <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	440b      	add	r3, r1
 8004068:	335d      	adds	r3, #93	; 0x5d
 800406a:	2204      	movs	r2, #4
 800406c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	440b      	add	r3, r1
 800407c:	333d      	adds	r3, #61	; 0x3d
 800407e:	2201      	movs	r2, #1
 8004080:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	440b      	add	r3, r1
 8004090:	3358      	adds	r3, #88	; 0x58
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4413      	add	r3, r2
 800409e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	0151      	lsls	r1, r2, #5
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	440a      	add	r2, r1
 80040ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b0:	f043 0302 	orr.w	r3, r3, #2
 80040b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	4611      	mov	r1, r2
 80040c0:	4618      	mov	r0, r3
 80040c2:	f005 fa98 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d2:	461a      	mov	r2, r3
 80040d4:	2340      	movs	r3, #64	; 0x40
 80040d6:	6093      	str	r3, [r2, #8]
}
 80040d8:	e286      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f0:	d122      	bne.n	8004138 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	0151      	lsls	r1, r2, #5
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	440a      	add	r2, r1
 8004108:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800410c:	f043 0302 	orr.w	r3, r3, #2
 8004110:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	4611      	mov	r1, r2
 800411c:	4618      	mov	r0, r3
 800411e:	f005 fa6a 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4413      	add	r3, r2
 800412a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412e:	461a      	mov	r2, r3
 8004130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004134:	6093      	str	r3, [r2, #8]
}
 8004136:	e257      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4413      	add	r3, r2
 8004140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b01      	cmp	r3, #1
 800414c:	d135      	bne.n	80041ba <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
=======
 8003d34:	4403      	add	r3, r0
 8003d36:	3358      	adds	r3, #88	; 0x58
 8003d38:	6019      	str	r1, [r3, #0]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	440b      	add	r3, r1
 8003d48:	335d      	adds	r3, #93	; 0x5d
 8003d4a:	2206      	movs	r2, #6
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	4611      	mov	r1, r2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f005 fbea 	bl	8009532 <USB_HC_Halt>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	6093      	str	r3, [r2, #8]
 8003d70:	e083      	b.n	8003e7a <HCD_HC_IN_IRQHandler+0x6de>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d178      	bne.n	8003e7a <HCD_HC_IN_IRQHandler+0x6de>
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	440b      	add	r3, r1
 8003d96:	333f      	adds	r3, #63	; 0x3f
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d122      	bne.n	8003de4 <HCD_HC_IN_IRQHandler+0x648>
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	440b      	add	r3, r1
 8003dac:	3358      	adds	r3, #88	; 0x58
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	0151      	lsls	r1, r2, #5
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	440a      	add	r2, r1
 8003dc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dcc:	f043 0302 	orr.w	r3, r3, #2
 8003dd0:	60d3      	str	r3, [r2, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f005 fba8 	bl	8009532 <USB_HC_Halt>
 8003de2:	e041      	b.n	8003e68 <HCD_HC_IN_IRQHandler+0x6cc>
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	440b      	add	r3, r1
 8003df2:	333f      	adds	r3, #63	; 0x3f
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HCD_HC_IN_IRQHandler+0x674>
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	440b      	add	r3, r1
 8003e08:	333f      	adds	r3, #63	; 0x3f
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d12b      	bne.n	8003e68 <HCD_HC_IN_IRQHandler+0x6cc>
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	440b      	add	r3, r1
 8003e1e:	3358      	adds	r3, #88	; 0x58
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	440b      	add	r3, r1
 8003e32:	335d      	adds	r3, #93	; 0x5d
 8003e34:	2203      	movs	r2, #3
 8003e36:	701a      	strb	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	0151      	lsls	r1, r2, #5
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	440a      	add	r2, r1
 8003e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e52:	f043 0302 	orr.w	r3, r3, #2
 8003e56:	60d3      	str	r3, [r2, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	4611      	mov	r1, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f005 fb65 	bl	8009532 <USB_HC_Halt>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e74:	461a      	mov	r2, r3
 8003e76:	2310      	movs	r3, #16
 8003e78:	6093      	str	r3, [r2, #8]
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HCD_HC_OUT_IRQHandler>:
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b086      	sub	sp, #24
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	70fb      	strb	r3, [r7, #3]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d119      	bne.n	8003ee6 <HCD_HC_OUT_IRQHandler+0x64>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	6093      	str	r3, [r2, #8]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	0151      	lsls	r1, r2, #5
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	440a      	add	r2, r1
 8003eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ede:	f043 0302 	orr.w	r3, r3, #2
 8003ee2:	60d3      	str	r3, [r2, #12]
 8003ee4:	e31e      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x6a2>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d141      	bne.n	8003f80 <HCD_HC_OUT_IRQHandler+0xfe>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f08:	461a      	mov	r2, r3
 8003f0a:	2320      	movs	r3, #32
 8003f0c:	6093      	str	r3, [r2, #8]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	440b      	add	r3, r1
 8003f1c:	333d      	adds	r3, #61	; 0x3d
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	f040 82ff 	bne.w	8004524 <HCD_HC_OUT_IRQHandler+0x6a2>
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	440b      	add	r3, r1
 8003f34:	333d      	adds	r3, #61	; 0x3d
 8003f36:	2200      	movs	r2, #0
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	440b      	add	r3, r1
 8003f48:	335c      	adds	r3, #92	; 0x5c
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	0151      	lsls	r1, r2, #5
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	440a      	add	r2, r1
 8003f64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f68:	f043 0302 	orr.w	r3, r3, #2
 8003f6c:	60d3      	str	r3, [r2, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	4611      	mov	r1, r2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f005 fada 	bl	8009532 <USB_HC_Halt>
 8003f7e:	e2d1      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x6a2>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f92:	2b40      	cmp	r3, #64	; 0x40
 8003f94:	d13f      	bne.n	8004016 <HCD_HC_OUT_IRQHandler+0x194>
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	440b      	add	r3, r1
 8003fa4:	335d      	adds	r3, #93	; 0x5d
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	440b      	add	r3, r1
 8003fb8:	333d      	adds	r3, #61	; 0x3d
 8003fba:	2201      	movs	r2, #1
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	440b      	add	r3, r1
 8003fcc:	3358      	adds	r3, #88	; 0x58
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	0151      	lsls	r1, r2, #5
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	440a      	add	r2, r1
 8003fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fec:	f043 0302 	orr.w	r3, r3, #2
 8003ff0:	60d3      	str	r3, [r2, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f005 fa98 	bl	8009532 <USB_HC_Halt>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4413      	add	r3, r2
 800400a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400e:	461a      	mov	r2, r3
 8004010:	2340      	movs	r3, #64	; 0x40
 8004012:	6093      	str	r3, [r2, #8]
 8004014:	e286      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x6a2>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4413      	add	r3, r2
 800401e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800402c:	d122      	bne.n	8004074 <HCD_HC_OUT_IRQHandler+0x1f2>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4413      	add	r3, r2
 8004036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	0151      	lsls	r1, r2, #5
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	440a      	add	r2, r1
 8004044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004048:	f043 0302 	orr.w	r3, r3, #2
 800404c:	60d3      	str	r3, [r2, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f005 fa6a 	bl	8009532 <USB_HC_Halt>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4413      	add	r3, r2
 8004066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406a:	461a      	mov	r2, r3
 800406c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004070:	6093      	str	r3, [r2, #8]
 8004072:	e257      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x6a2>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	4413      	add	r3, r2
 800407c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b01      	cmp	r3, #1
 8004088:	d135      	bne.n	80040f6 <HCD_HC_OUT_IRQHandler+0x274>
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	440b      	add	r3, r1
 8004098:	3358      	adds	r3, #88	; 0x58
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	0151      	lsls	r1, r2, #5
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	440a      	add	r2, r1
 80040b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b8:	f043 0302 	orr.w	r3, r3, #2
 80040bc:	60d3      	str	r3, [r2, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	4611      	mov	r1, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f005 fa32 	bl	8009532 <USB_HC_Halt>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040da:	461a      	mov	r2, r3
 80040dc:	2301      	movs	r3, #1
 80040de:	6093      	str	r3, [r2, #8]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	440b      	add	r3, r1
 80040ee:	335d      	adds	r3, #93	; 0x5d
 80040f0:	2201      	movs	r2, #1
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	e216      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x6a2>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b08      	cmp	r3, #8
 800410a:	d12b      	bne.n	8004164 <HCD_HC_OUT_IRQHandler+0x2e2>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4413      	add	r3, r2
 8004114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004118:	461a      	mov	r2, r3
 800411a:	2308      	movs	r3, #8
 800411c:	6093      	str	r3, [r2, #8]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4413      	add	r3, r2
 8004126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	0151      	lsls	r1, r2, #5
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	440a      	add	r2, r1
 8004134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004138:	f043 0302 	orr.w	r3, r3, #2
 800413c:	60d3      	str	r3, [r2, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	4611      	mov	r1, r2
 8004148:	4618      	mov	r0, r3
 800414a:	f005 f9f2 	bl	8009532 <USB_HC_Halt>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	440b      	add	r3, r1
<<<<<<< HEAD
 800415c:	3358      	adds	r3, #88	; 0x58
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4413      	add	r3, r2
 800416a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	440a      	add	r2, r1
 8004178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800417c:	f043 0302 	orr.w	r3, r3, #2
 8004180:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f005 fa32 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4413      	add	r3, r2
 800419a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419e:	461a      	mov	r2, r3
 80041a0:	2301      	movs	r3, #1
 80041a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	440b      	add	r3, r1
 80041b2:	335d      	adds	r3, #93	; 0x5d
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
}
 80041b8:	e216      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d12b      	bne.n	8004228 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041dc:	461a      	mov	r2, r3
 80041de:	2308      	movs	r3, #8
 80041e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	0151      	lsls	r1, r2, #5
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	440a      	add	r2, r1
 80041f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041fc:	f043 0302 	orr.w	r3, r3, #2
 8004200:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	4611      	mov	r1, r2
 800420c:	4618      	mov	r0, r3
 800420e:	f005 f9f2 	bl	80095f6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	440b      	add	r3, r1
 8004220:	335d      	adds	r3, #93	; 0x5d
 8004222:	2205      	movs	r2, #5
 8004224:	701a      	strb	r2, [r3, #0]
}
 8004226:	e1df      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	4413      	add	r3, r2
 8004230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b10      	cmp	r3, #16
 800423c:	d135      	bne.n	80042aa <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	440b      	add	r3, r1
 800424c:	3358      	adds	r3, #88	; 0x58
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4613      	mov	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	440b      	add	r3, r1
 8004260:	335d      	adds	r3, #93	; 0x5d
 8004262:	2203      	movs	r2, #3
 8004264:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4413      	add	r3, r2
 800426e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	0151      	lsls	r1, r2, #5
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	440a      	add	r2, r1
 800427c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004280:	f043 0302 	orr.w	r3, r3, #2
 8004284:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	4611      	mov	r1, r2
 8004290:	4618      	mov	r0, r3
 8004292:	f005 f9b0 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	4413      	add	r3, r2
 800429e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a2:	461a      	mov	r2, r3
 80042a4:	2310      	movs	r3, #16
 80042a6:	6093      	str	r3, [r2, #8]
}
 80042a8:	e19e      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042bc:	2b80      	cmp	r3, #128	; 0x80
 80042be:	d12b      	bne.n	8004318 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	0151      	lsls	r1, r2, #5
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	440a      	add	r2, r1
 80042d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042da:	f043 0302 	orr.w	r3, r3, #2
 80042de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	4611      	mov	r1, r2
 80042ea:	4618      	mov	r0, r3
 80042ec:	f005 f983 	bl	80095f6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	440b      	add	r3, r1
 80042fe:	335d      	adds	r3, #93	; 0x5d
 8004300:	2206      	movs	r2, #6
 8004302:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	4413      	add	r3, r2
 800430c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004310:	461a      	mov	r2, r3
 8004312:	2380      	movs	r3, #128	; 0x80
 8004314:	6093      	str	r3, [r2, #8]
}
 8004316:	e167      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4413      	add	r3, r2
 8004320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432e:	d135      	bne.n	800439c <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4413      	add	r3, r2
 8004338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	0151      	lsls	r1, r2, #5
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	440a      	add	r2, r1
 8004346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800434a:	f043 0302 	orr.w	r3, r3, #2
 800434e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	4611      	mov	r1, r2
 800435a:	4618      	mov	r0, r3
 800435c:	f005 f94b 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	4413      	add	r3, r2
 8004368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436c:	461a      	mov	r2, r3
 800436e:	2310      	movs	r3, #16
 8004370:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	4413      	add	r3, r2
 800437a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437e:	461a      	mov	r2, r3
 8004380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004384:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	440b      	add	r3, r1
 8004394:	335d      	adds	r3, #93	; 0x5d
 8004396:	2208      	movs	r2, #8
 8004398:	701a      	strb	r2, [r3, #0]
}
 800439a:	e125      	b.n	80045e8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	f040 811a 	bne.w	80045e8 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	0151      	lsls	r1, r2, #5
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	440a      	add	r2, r1
 80043ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043ce:	f023 0302 	bic.w	r3, r3, #2
 80043d2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	440b      	add	r3, r1
 80043e2:	335d      	adds	r3, #93	; 0x5d
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d137      	bne.n	800445a <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	440b      	add	r3, r1
 80043f8:	335c      	adds	r3, #92	; 0x5c
 80043fa:	2201      	movs	r2, #1
 80043fc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	440b      	add	r3, r1
 800440c:	333f      	adds	r3, #63	; 0x3f
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d00b      	beq.n	800442c <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	440b      	add	r3, r1
 8004422:	333f      	adds	r3, #63	; 0x3f
 8004424:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004426:	2b03      	cmp	r3, #3
 8004428:	f040 80c5 	bne.w	80045b6 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	440b      	add	r3, r1
 800443a:	3351      	adds	r3, #81	; 0x51
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	f083 0301 	eor.w	r3, r3, #1
 8004442:	b2d8      	uxtb	r0, r3
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	440b      	add	r3, r1
 8004452:	3351      	adds	r3, #81	; 0x51
 8004454:	4602      	mov	r2, r0
 8004456:	701a      	strb	r2, [r3, #0]
 8004458:	e0ad      	b.n	80045b6 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800445a:	6879      	ldr	r1, [r7, #4]
=======
 800415c:	335d      	adds	r3, #93	; 0x5d
 800415e:	2205      	movs	r2, #5
 8004160:	701a      	strb	r2, [r3, #0]
 8004162:	e1df      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x6a2>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4413      	add	r3, r2
 800416c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	2b10      	cmp	r3, #16
 8004178:	d135      	bne.n	80041e6 <HCD_HC_OUT_IRQHandler+0x364>
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4613      	mov	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	440b      	add	r3, r1
 8004188:	3358      	adds	r3, #88	; 0x58
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4613      	mov	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	440b      	add	r3, r1
 800419c:	335d      	adds	r3, #93	; 0x5d
 800419e:	2203      	movs	r2, #3
 80041a0:	701a      	strb	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	0151      	lsls	r1, r2, #5
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	440a      	add	r2, r1
 80041b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041bc:	f043 0302 	orr.w	r3, r3, #2
 80041c0:	60d3      	str	r3, [r2, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	4611      	mov	r1, r2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f005 f9b0 	bl	8009532 <USB_HC_Halt>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041de:	461a      	mov	r2, r3
 80041e0:	2310      	movs	r3, #16
 80041e2:	6093      	str	r3, [r2, #8]
 80041e4:	e19e      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x6a2>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f8:	2b80      	cmp	r3, #128	; 0x80
 80041fa:	d12b      	bne.n	8004254 <HCD_HC_OUT_IRQHandler+0x3d2>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4413      	add	r3, r2
 8004204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	0151      	lsls	r1, r2, #5
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	440a      	add	r2, r1
 8004212:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004216:	f043 0302 	orr.w	r3, r3, #2
 800421a:	60d3      	str	r3, [r2, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	4611      	mov	r1, r2
 8004226:	4618      	mov	r0, r3
 8004228:	f005 f983 	bl	8009532 <USB_HC_Halt>
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	440b      	add	r3, r1
 800423a:	335d      	adds	r3, #93	; 0x5d
 800423c:	2206      	movs	r2, #6
 800423e:	701a      	strb	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	4413      	add	r3, r2
 8004248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424c:	461a      	mov	r2, r3
 800424e:	2380      	movs	r3, #128	; 0x80
 8004250:	6093      	str	r3, [r2, #8]
 8004252:	e167      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x6a2>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4413      	add	r3, r2
 800425c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426a:	d135      	bne.n	80042d8 <HCD_HC_OUT_IRQHandler+0x456>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	4413      	add	r3, r2
 8004274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	0151      	lsls	r1, r2, #5
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	440a      	add	r2, r1
 8004282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004286:	f043 0302 	orr.w	r3, r3, #2
 800428a:	60d3      	str	r3, [r2, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f005 f94b 	bl	8009532 <USB_HC_Halt>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a8:	461a      	mov	r2, r3
 80042aa:	2310      	movs	r3, #16
 80042ac:	6093      	str	r3, [r2, #8]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ba:	461a      	mov	r2, r3
 80042bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042c0:	6093      	str	r3, [r2, #8]
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4613      	mov	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	440b      	add	r3, r1
 80042d0:	335d      	adds	r3, #93	; 0x5d
 80042d2:	2208      	movs	r2, #8
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e125      	b.n	8004524 <HCD_HC_OUT_IRQHandler+0x6a2>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	f040 811a 	bne.w	8004524 <HCD_HC_OUT_IRQHandler+0x6a2>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	0151      	lsls	r1, r2, #5
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	440a      	add	r2, r1
 8004306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800430a:	f023 0302 	bic.w	r3, r3, #2
 800430e:	60d3      	str	r3, [r2, #12]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	440b      	add	r3, r1
 800431e:	335d      	adds	r3, #93	; 0x5d
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d137      	bne.n	8004396 <HCD_HC_OUT_IRQHandler+0x514>
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	440b      	add	r3, r1
 8004334:	335c      	adds	r3, #92	; 0x5c
 8004336:	2201      	movs	r2, #1
 8004338:	701a      	strb	r2, [r3, #0]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4613      	mov	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	440b      	add	r3, r1
 8004348:	333f      	adds	r3, #63	; 0x3f
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d00b      	beq.n	8004368 <HCD_HC_OUT_IRQHandler+0x4e6>
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	440b      	add	r3, r1
 800435e:	333f      	adds	r3, #63	; 0x3f
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b03      	cmp	r3, #3
 8004364:	f040 80c5 	bne.w	80044f2 <HCD_HC_OUT_IRQHandler+0x670>
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	440b      	add	r3, r1
 8004376:	3351      	adds	r3, #81	; 0x51
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	f083 0301 	eor.w	r3, r3, #1
 800437e:	b2d8      	uxtb	r0, r3
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	440b      	add	r3, r1
 800438e:	3351      	adds	r3, #81	; 0x51
 8004390:	4602      	mov	r2, r0
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	e0ad      	b.n	80044f2 <HCD_HC_OUT_IRQHandler+0x670>
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	440b      	add	r3, r1
 80043a4:	335d      	adds	r3, #93	; 0x5d
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d10a      	bne.n	80043c2 <HCD_HC_OUT_IRQHandler+0x540>
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	440b      	add	r3, r1
 80043ba:	335c      	adds	r3, #92	; 0x5c
 80043bc:	2202      	movs	r2, #2
 80043be:	701a      	strb	r2, [r3, #0]
 80043c0:	e097      	b.n	80044f2 <HCD_HC_OUT_IRQHandler+0x670>
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	440b      	add	r3, r1
 80043d0:	335d      	adds	r3, #93	; 0x5d
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d10a      	bne.n	80043ee <HCD_HC_OUT_IRQHandler+0x56c>
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	440b      	add	r3, r1
 80043e6:	335c      	adds	r3, #92	; 0x5c
 80043e8:	2202      	movs	r2, #2
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	e081      	b.n	80044f2 <HCD_HC_OUT_IRQHandler+0x670>
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	440b      	add	r3, r1
 80043fc:	335d      	adds	r3, #93	; 0x5d
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b05      	cmp	r3, #5
 8004402:	d10a      	bne.n	800441a <HCD_HC_OUT_IRQHandler+0x598>
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	440b      	add	r3, r1
 8004412:	335c      	adds	r3, #92	; 0x5c
 8004414:	2205      	movs	r2, #5
 8004416:	701a      	strb	r2, [r3, #0]
 8004418:	e06b      	b.n	80044f2 <HCD_HC_OUT_IRQHandler+0x670>
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	440b      	add	r3, r1
 8004428:	335d      	adds	r3, #93	; 0x5d
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b06      	cmp	r3, #6
 800442e:	d00a      	beq.n	8004446 <HCD_HC_OUT_IRQHandler+0x5c4>
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	440b      	add	r3, r1
 800443e:	335d      	adds	r3, #93	; 0x5d
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b08      	cmp	r3, #8
 8004444:	d155      	bne.n	80044f2 <HCD_HC_OUT_IRQHandler+0x670>
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	440b      	add	r3, r1
 8004454:	3358      	adds	r3, #88	; 0x58
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	1c59      	adds	r1, r3, #1
 800445a:	6878      	ldr	r0, [r7, #4]
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
<<<<<<< HEAD
 8004466:	440b      	add	r3, r1
 8004468:	335d      	adds	r3, #93	; 0x5d
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b03      	cmp	r3, #3
 800446e:	d10a      	bne.n	8004486 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	440b      	add	r3, r1
 800447e:	335c      	adds	r3, #92	; 0x5c
 8004480:	2202      	movs	r2, #2
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	e097      	b.n	80045b6 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	440b      	add	r3, r1
 8004494:	335d      	adds	r3, #93	; 0x5d
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b04      	cmp	r3, #4
 800449a:	d10a      	bne.n	80044b2 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4613      	mov	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	440b      	add	r3, r1
 80044aa:	335c      	adds	r3, #92	; 0x5c
 80044ac:	2202      	movs	r2, #2
 80044ae:	701a      	strb	r2, [r3, #0]
 80044b0:	e081      	b.n	80045b6 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	440b      	add	r3, r1
 80044c0:	335d      	adds	r3, #93	; 0x5d
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b05      	cmp	r3, #5
 80044c6:	d10a      	bne.n	80044de <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	440b      	add	r3, r1
 80044d6:	335c      	adds	r3, #92	; 0x5c
 80044d8:	2205      	movs	r2, #5
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	e06b      	b.n	80045b6 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	440b      	add	r3, r1
 80044ec:	335d      	adds	r3, #93	; 0x5d
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b06      	cmp	r3, #6
 80044f2:	d00a      	beq.n	800450a <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	440b      	add	r3, r1
 8004502:	335d      	adds	r3, #93	; 0x5d
 8004504:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004506:	2b08      	cmp	r3, #8
 8004508:	d155      	bne.n	80045b6 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	440b      	add	r3, r1
 8004518:	3358      	adds	r3, #88	; 0x58
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	1c59      	adds	r1, r3, #1
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	4403      	add	r3, r0
 800452c:	3358      	adds	r3, #88	; 0x58
 800452e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	440b      	add	r3, r1
 800453e:	3358      	adds	r3, #88	; 0x58
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b03      	cmp	r3, #3
 8004544:	d914      	bls.n	8004570 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	440b      	add	r3, r1
 8004554:	3358      	adds	r3, #88	; 0x58
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	440b      	add	r3, r1
 8004568:	335c      	adds	r3, #92	; 0x5c
 800456a:	2204      	movs	r2, #4
 800456c:	701a      	strb	r2, [r3, #0]
 800456e:	e009      	b.n	8004584 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	440b      	add	r3, r1
 800457e:	335c      	adds	r3, #92	; 0x5c
 8004580:	2202      	movs	r2, #2
 8004582:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4413      	add	r3, r2
 800458c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800459a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045a2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b0:	461a      	mov	r2, r3
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c2:	461a      	mov	r2, r3
 80045c4:	2302      	movs	r3, #2
 80045c6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	b2d8      	uxtb	r0, r3
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	440b      	add	r3, r1
 80045da:	335c      	adds	r3, #92	; 0x5c
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	4601      	mov	r1, r0
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f007 f844 	bl	800b670 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80045e8:	bf00      	nop
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08a      	sub	sp, #40	; 0x28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	0c5b      	lsrs	r3, r3, #17
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	091b      	lsrs	r3, r3, #4
 8004620:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004624:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d003      	beq.n	8004634 <HCD_RXQLVL_IRQHandler+0x44>
 800462c:	2b05      	cmp	r3, #5
 800462e:	f000 8082 	beq.w	8004736 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004632:	e083      	b.n	800473c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d07f      	beq.n	800473a <HCD_RXQLVL_IRQHandler+0x14a>
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	440b      	add	r3, r1
 8004648:	3344      	adds	r3, #68	; 0x44
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d074      	beq.n	800473a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	440b      	add	r3, r1
 8004662:	3344      	adds	r3, #68	; 0x44
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	b292      	uxth	r2, r2
 800466a:	4619      	mov	r1, r3
 800466c:	f004 fbfd 	bl	8008e6a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	440b      	add	r3, r1
 800467e:	3344      	adds	r3, #68	; 0x44
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	18d1      	adds	r1, r2, r3
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4403      	add	r3, r0
 8004694:	3344      	adds	r3, #68	; 0x44
 8004696:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	440b      	add	r3, r1
 80046a6:	334c      	adds	r3, #76	; 0x4c
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	18d1      	adds	r1, r2, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4613      	mov	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	4403      	add	r3, r0
 80046bc:	334c      	adds	r3, #76	; 0x4c
 80046be:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	4b1d      	ldr	r3, [pc, #116]	; (8004744 <HCD_RXQLVL_IRQHandler+0x154>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d031      	beq.n	800473a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046ec:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046f4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004702:	461a      	mov	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	440b      	add	r3, r1
 8004716:	3350      	adds	r3, #80	; 0x50
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	f083 0301 	eor.w	r3, r3, #1
 800471e:	b2d8      	uxtb	r0, r3
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	440b      	add	r3, r1
 800472e:	3350      	adds	r3, #80	; 0x50
 8004730:	4602      	mov	r2, r0
 8004732:	701a      	strb	r2, [r3, #0]
      break;
 8004734:	e001      	b.n	800473a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8004736:	bf00      	nop
 8004738:	e000      	b.n	800473c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800473a:	bf00      	nop
  }
}
 800473c:	bf00      	nop
 800473e:	3728      	adds	r7, #40	; 0x28
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	1ff80000 	.word	0x1ff80000

08004748 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004774:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b02      	cmp	r3, #2
 800477e:	d113      	bne.n	80047a8 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b01      	cmp	r3, #1
 8004788:	d10a      	bne.n	80047a0 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699a      	ldr	r2, [r3, #24]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004798:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f006 ff4c 	bl	800b638 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f043 0302 	orr.w	r3, r3, #2
 80047a6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d147      	bne.n	8004842 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f043 0308 	orr.w	r3, r3, #8
 80047b8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d129      	bne.n	8004818 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d113      	bne.n	80047f4 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80047d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047d6:	d106      	bne.n	80047e6 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2102      	movs	r1, #2
 80047de:	4618      	mov	r0, r3
 80047e0:	f004 fc40 	bl	8009064 <USB_InitFSLSPClkSel>
 80047e4:	e011      	b.n	800480a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2101      	movs	r1, #1
 80047ec:	4618      	mov	r0, r3
 80047ee:	f004 fc39 	bl	8009064 <USB_InitFSLSPClkSel>
 80047f2:	e00a      	b.n	800480a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d106      	bne.n	800480a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004802:	461a      	mov	r2, r3
 8004804:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004808:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f006 ff3e 	bl	800b68c <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f006 ff11 	bl	800b638 <HAL_HCD_Connect_Callback>
 8004816:	e014      	b.n	8004842 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f006 ff45 	bl	800b6a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800482c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004830:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699a      	ldr	r2, [r3, #24]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004840:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b20      	cmp	r3, #32
 800484a:	d103      	bne.n	8004854 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f043 0320 	orr.w	r3, r3, #32
 8004852:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800485a:	461a      	mov	r2, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	6013      	str	r3, [r2, #0]
}
 8004860:	bf00      	nop
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e081      	b.n	800497e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fc f930 	bl	8000af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2224      	movs	r2, #36	; 0x24
 8004898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0201 	bic.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d107      	bne.n	80048e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	e006      	b.n	80048f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80048ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d104      	bne.n	8004902 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004900:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004914:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004924:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	ea42 0103 	orr.w	r1, r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	021a      	lsls	r2, r3, #8
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69d9      	ldr	r1, [r3, #28]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1a      	ldr	r2, [r3, #32]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	4608      	mov	r0, r1
 8004992:	4611      	mov	r1, r2
 8004994:	461a      	mov	r2, r3
 8004996:	4603      	mov	r3, r0
 8004998:	817b      	strh	r3, [r7, #10]
 800499a:	460b      	mov	r3, r1
 800499c:	813b      	strh	r3, [r7, #8]
 800499e:	4613      	mov	r3, r2
 80049a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	f040 80f9 	bne.w	8004ba2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_I2C_Mem_Write+0x34>
 80049b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d105      	bne.n	80049c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0ed      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_I2C_Mem_Write+0x4e>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e0e6      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049de:	f7fd fff3 	bl	80029c8 <HAL_GetTick>
 80049e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2319      	movs	r3, #25
 80049ea:	2201      	movs	r2, #1
 80049ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f955 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0d1      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2221      	movs	r2, #33	; 0x21
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2240      	movs	r2, #64	; 0x40
 8004a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a3a      	ldr	r2, [r7, #32]
 8004a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a28:	88f8      	ldrh	r0, [r7, #6]
 8004a2a:	893a      	ldrh	r2, [r7, #8]
 8004a2c:	8979      	ldrh	r1, [r7, #10]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	4603      	mov	r3, r0
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f8b9 	bl	8004bb0 <I2C_RequestMemoryWrite>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0a9      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2bff      	cmp	r3, #255	; 0xff
 8004a58:	d90e      	bls.n	8004a78 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	22ff      	movs	r2, #255	; 0xff
 8004a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	8979      	ldrh	r1, [r7, #10]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 fa37 	bl	8004ee4 <I2C_TransferConfig>
 8004a76:	e00f      	b.n	8004a98 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	8979      	ldrh	r1, [r7, #10]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fa26 	bl	8004ee4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f93f 	bl	8004d20 <I2C_WaitOnTXISFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e07b      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d034      	beq.n	8004b50 <HAL_I2C_Mem_Write+0x1c8>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d130      	bne.n	8004b50 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	2200      	movs	r2, #0
 8004af6:	2180      	movs	r1, #128	; 0x80
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f8d1 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e04d      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2bff      	cmp	r3, #255	; 0xff
 8004b10:	d90e      	bls.n	8004b30 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	22ff      	movs	r2, #255	; 0xff
 8004b16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	8979      	ldrh	r1, [r7, #10]
 8004b20:	2300      	movs	r3, #0
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f9db 	bl	8004ee4 <I2C_TransferConfig>
 8004b2e:	e00f      	b.n	8004b50 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	8979      	ldrh	r1, [r7, #10]
 8004b42:	2300      	movs	r3, #0
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f9ca 	bl	8004ee4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d19e      	bne.n	8004a98 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f91e 	bl	8004da0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e01a      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2220      	movs	r2, #32
 8004b74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6859      	ldr	r1, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <HAL_I2C_Mem_Write+0x224>)
 8004b82:	400b      	ands	r3, r1
 8004b84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e000      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
  }
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	fe00e800 	.word	0xfe00e800

08004bb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	4608      	mov	r0, r1
 8004bba:	4611      	mov	r1, r2
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	817b      	strh	r3, [r7, #10]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	813b      	strh	r3, [r7, #8]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	8979      	ldrh	r1, [r7, #10]
 8004bd0:	4b20      	ldr	r3, [pc, #128]	; (8004c54 <I2C_RequestMemoryWrite+0xa4>)
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f983 	bl	8004ee4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	69b9      	ldr	r1, [r7, #24]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f89c 	bl	8004d20 <I2C_WaitOnTXISFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e02c      	b.n	8004c4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d105      	bne.n	8004c04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bf8:	893b      	ldrh	r3, [r7, #8]
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	629a      	str	r2, [r3, #40]	; 0x28
 8004c02:	e015      	b.n	8004c30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c04:	893b      	ldrh	r3, [r7, #8]
 8004c06:	0a1b      	lsrs	r3, r3, #8
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	69b9      	ldr	r1, [r7, #24]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f882 	bl	8004d20 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e012      	b.n	8004c4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c26:	893b      	ldrh	r3, [r7, #8]
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2200      	movs	r2, #0
 8004c38:	2180      	movs	r1, #128	; 0x80
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f830 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	80002000 	.word	0x80002000

08004c58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d103      	bne.n	8004c76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2200      	movs	r2, #0
 8004c74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d007      	beq.n	8004c94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	619a      	str	r2, [r3, #24]
  }
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	4613      	mov	r3, r2
 8004cae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb0:	e022      	b.n	8004cf8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d01e      	beq.n	8004cf8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cba:	f7fd fe85 	bl	80029c8 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d302      	bcc.n	8004cd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d113      	bne.n	8004cf8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd4:	f043 0220 	orr.w	r2, r3, #32
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e00f      	b.n	8004d18 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4013      	ands	r3, r2
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d0cd      	beq.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d2c:	e02c      	b.n	8004d88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 f870 	bl	8004e18 <I2C_IsAcknowledgeFailed>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e02a      	b.n	8004d98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d48:	d01e      	beq.n	8004d88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4a:	f7fd fe3d 	bl	80029c8 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d302      	bcc.n	8004d60 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d113      	bne.n	8004d88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d64:	f043 0220 	orr.w	r2, r3, #32
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e007      	b.n	8004d98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d1cb      	bne.n	8004d2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dac:	e028      	b.n	8004e00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 f830 	bl	8004e18 <I2C_IsAcknowledgeFailed>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e026      	b.n	8004e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc2:	f7fd fe01 	bl	80029c8 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d302      	bcc.n	8004dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d113      	bne.n	8004e00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ddc:	f043 0220 	orr.w	r2, r3, #32
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e007      	b.n	8004e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	d1cf      	bne.n	8004dae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	d151      	bne.n	8004ed6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e32:	e022      	b.n	8004e7a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d01e      	beq.n	8004e7a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e3c:	f7fd fdc4 	bl	80029c8 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d302      	bcc.n	8004e52 <I2C_IsAcknowledgeFailed+0x3a>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d113      	bne.n	8004e7a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	f043 0220 	orr.w	r2, r3, #32
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e02e      	b.n	8004ed8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d1d5      	bne.n	8004e34 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2210      	movs	r2, #16
 8004e8e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2220      	movs	r2, #32
 8004e96:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f7ff fedd 	bl	8004c58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6859      	ldr	r1, [r3, #4]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <I2C_IsAcknowledgeFailed+0xc8>)
 8004eaa:	400b      	ands	r3, r1
 8004eac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb2:	f043 0204 	orr.w	r2, r3, #4
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	fe00e800 	.word	0xfe00e800

08004ee4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	607b      	str	r3, [r7, #4]
 8004eee:	460b      	mov	r3, r1
 8004ef0:	817b      	strh	r3, [r7, #10]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	0d5b      	lsrs	r3, r3, #21
 8004f00:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004f04:	4b0d      	ldr	r3, [pc, #52]	; (8004f3c <I2C_TransferConfig+0x58>)
 8004f06:	430b      	orrs	r3, r1
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	ea02 0103 	and.w	r1, r2, r3
 8004f0e:	897b      	ldrh	r3, [r7, #10]
 8004f10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f14:	7a7b      	ldrb	r3, [r7, #9]
 8004f16:	041b      	lsls	r3, r3, #16
 8004f18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	431a      	orrs	r2, r3
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	431a      	orrs	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004f2e:	bf00      	nop
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	03ff63ff 	.word	0x03ff63ff

08004f40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d138      	bne.n	8004fc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e032      	b.n	8004fca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2224      	movs	r2, #36	; 0x24
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0201 	bic.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6819      	ldr	r1, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0201 	orr.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	e000      	b.n	8004fca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fc8:	2302      	movs	r3, #2
  }
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b20      	cmp	r3, #32
 8004fea:	d139      	bne.n	8005060 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e033      	b.n	8005062 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2224      	movs	r2, #36	; 0x24
 8005006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0201 	bic.w	r2, r2, #1
 8005018:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005028:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	e000      	b.n	8005062 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005060:	2302      	movs	r3, #2
  }
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
	...

08005070 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e0af      	b.n	80051e2 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fb fdd8 	bl	8000c4c <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0201 	bic.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	e00a      	b.n	80050d0 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	3304      	adds	r3, #4
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	2200      	movs	r2, #0
 80050c8:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	3301      	adds	r3, #1
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2b0f      	cmp	r3, #15
 80050d4:	d9f1      	bls.n	80050ba <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0204 	orr.w	r2, r2, #4
 80050e4:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	4b3f      	ldr	r3, [pc, #252]	; (80051ec <HAL_LCD_Init+0x17c>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6851      	ldr	r1, [r2, #4]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6892      	ldr	r2, [r2, #8]
 80050f8:	4311      	orrs	r1, r2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80050fe:	4311      	orrs	r1, r2
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005104:	4311      	orrs	r1, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	69d2      	ldr	r2, [r2, #28]
 800510a:	4311      	orrs	r1, r2
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6a12      	ldr	r2, [r2, #32]
 8005110:	4311      	orrs	r1, r2
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6992      	ldr	r2, [r2, #24]
 8005116:	4311      	orrs	r1, r2
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800511c:	4311      	orrs	r1, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	430b      	orrs	r3, r1
 8005124:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f8f1 	bl	800530e <LCD_WaitForSynchro>
 800512c:	4603      	mov	r3, r0
 800512e:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8005130:	7cfb      	ldrb	r3, [r7, #19]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_LCD_Init+0xca>
  {
    return status;
 8005136:	7cfb      	ldrb	r3, [r7, #19]
 8005138:	e053      	b.n	80051e2 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0201 	orr.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8005172:	f7fd fc29 	bl	80029c8 <HAL_GetTick>
 8005176:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8005178:	e00c      	b.n	8005194 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800517a:	f7fd fc25 	bl	80029c8 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005188:	d904      	bls.n	8005194 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2208      	movs	r2, #8
 800518e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e026      	b.n	80051e2 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d1eb      	bne.n	800517a <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80051a2:	f7fd fc11 	bl	80029c8 <HAL_GetTick>
 80051a6:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80051a8:	e00c      	b.n	80051c4 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80051aa:	f7fd fc0d 	bl	80029c8 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051b8:	d904      	bls.n	80051c4 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2210      	movs	r2, #16
 80051be:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e00e      	b.n	80051e2 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b10      	cmp	r3, #16
 80051d0:	d1eb      	bne.n	80051aa <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 80051e0:	7cfb      	ldrb	r3, [r7, #19]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	fc00000e 	.word	0xfc00000e

080051f0 <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005202:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8005204:	7cbb      	ldrb	r3, [r7, #18]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d002      	beq.n	8005210 <HAL_LCD_Clear+0x20>
 800520a:	7cbb      	ldrb	r3, [r7, #18]
 800520c:	2b02      	cmp	r3, #2
 800520e:	d140      	bne.n	8005292 <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <HAL_LCD_Clear+0x2e>
 800521a:	2302      	movs	r3, #2
 800521c:	e03a      	b.n	8005294 <HAL_LCD_Clear+0xa4>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 800522e:	f7fd fbcb 	bl	80029c8 <HAL_GetTick>
 8005232:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8005234:	e010      	b.n	8005258 <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8005236:	f7fd fbc7 	bl	80029c8 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005244:	d908      	bls.n	8005258 <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2202      	movs	r2, #2
 800524a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e01d      	b.n	8005294 <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 0304 	and.w	r3, r3, #4
 8005262:	2b04      	cmp	r3, #4
 8005264:	d0e7      	beq.n	8005236 <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	e00a      	b.n	8005282 <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	3304      	adds	r3, #4
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	2200      	movs	r2, #0
 800527a:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	3301      	adds	r3, #1
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b0f      	cmp	r3, #15
 8005286:	d9f1      	bls.n	800526c <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f807 	bl	800529c <HAL_LCD_UpdateDisplayRequest>
 800528e:	4603      	mov	r3, r0
 8005290:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 8005292:	7cfb      	ldrb	r3, [r7, #19]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2208      	movs	r2, #8
 80052aa:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0204 	orr.w	r2, r2, #4
 80052ba:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80052bc:	f7fd fb84 	bl	80029c8 <HAL_GetTick>
 80052c0:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 80052c2:	e010      	b.n	80052e6 <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80052c4:	f7fd fb80 	bl	80029c8 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052d2:	d908      	bls.n	80052e6 <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2204      	movs	r2, #4
 80052d8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e00f      	b.n	8005306 <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d1e7      	bne.n	80052c4 <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8005316:	f7fd fb57 	bl	80029c8 <HAL_GetTick>
 800531a:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800531c:	e00c      	b.n	8005338 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800531e:	f7fd fb53 	bl	80029c8 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800532c:	d904      	bls.n	8005338 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e007      	b.n	8005348 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b20      	cmp	r3, #32
 8005344:	d1eb      	bne.n	800531e <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005354:	4b05      	ldr	r3, [pc, #20]	; (800536c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a04      	ldr	r2, [pc, #16]	; (800536c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800535a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800535e:	6013      	str	r3, [r2, #0]
}
 8005360:	bf00      	nop
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40007000 	.word	0x40007000

08005370 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005374:	4b04      	ldr	r3, [pc, #16]	; (8005388 <HAL_PWREx_GetVoltageRange+0x18>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800537c:	4618      	mov	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40007000 	.word	0x40007000

0800538c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800539a:	d130      	bne.n	80053fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800539c:	4b23      	ldr	r3, [pc, #140]	; (800542c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a8:	d038      	beq.n	800541c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053aa:	4b20      	ldr	r3, [pc, #128]	; (800542c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053b2:	4a1e      	ldr	r2, [pc, #120]	; (800542c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053ba:	4b1d      	ldr	r3, [pc, #116]	; (8005430 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2232      	movs	r2, #50	; 0x32
 80053c0:	fb02 f303 	mul.w	r3, r2, r3
 80053c4:	4a1b      	ldr	r2, [pc, #108]	; (8005434 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80053c6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ca:	0c9b      	lsrs	r3, r3, #18
 80053cc:	3301      	adds	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053d0:	e002      	b.n	80053d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053d8:	4b14      	ldr	r3, [pc, #80]	; (800542c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e4:	d102      	bne.n	80053ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1f2      	bne.n	80053d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053ec:	4b0f      	ldr	r3, [pc, #60]	; (800542c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f8:	d110      	bne.n	800541c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e00f      	b.n	800541e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80053fe:	4b0b      	ldr	r3, [pc, #44]	; (800542c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540a:	d007      	beq.n	800541c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800540c:	4b07      	ldr	r3, [pc, #28]	; (800542c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005414:	4a05      	ldr	r2, [pc, #20]	; (800542c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800541a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40007000 	.word	0x40007000
 8005430:	20000020 	.word	0x20000020
 8005434:	431bde83 	.word	0x431bde83

08005438 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800543c:	4b05      	ldr	r3, [pc, #20]	; (8005454 <HAL_PWREx_EnableVddUSB+0x1c>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	4a04      	ldr	r2, [pc, #16]	; (8005454 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005446:	6053      	str	r3, [r2, #4]
}
 8005448:	bf00      	nop
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40007000 	.word	0x40007000

08005458 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af02      	add	r7, sp, #8
 800545e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005460:	f7fd fab2 	bl	80029c8 <HAL_GetTick>
 8005464:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e06f      	b.n	8005550 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_QSPI_Init+0x28>
 800547c:	2302      	movs	r3, #2
 800547e:	e067      	b.n	8005550 <HAL_QSPI_Init+0xf8>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10b      	bne.n	80054ac <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7fc fae7 	bl	8001a70 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80054a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f858 	bl	800555c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	021a      	lsls	r2, r3, #8
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	2120      	movs	r1, #32
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f850 	bl	8005578 <QSPI_WaitFlagStateUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80054dc:	7afb      	ldrb	r3, [r7, #11]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d131      	bne.n	8005546 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054ec:	f023 0310 	bic.w	r3, r3, #16
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6852      	ldr	r2, [r2, #4]
 80054f4:	0611      	lsls	r1, r2, #24
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	68d2      	ldr	r2, [r2, #12]
 80054fa:	4311      	orrs	r1, r2
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	430b      	orrs	r3, r1
 8005502:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	4b13      	ldr	r3, [pc, #76]	; (8005558 <HAL_QSPI_Init+0x100>)
 800550c:	4013      	ands	r3, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6912      	ldr	r2, [r2, #16]
 8005512:	0411      	lsls	r1, r2, #16
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6952      	ldr	r2, [r2, #20]
 8005518:	4311      	orrs	r1, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6992      	ldr	r2, [r2, #24]
 800551e:	4311      	orrs	r1, r2
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	430b      	orrs	r3, r1
 8005526:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800554e:	7afb      	ldrb	r3, [r7, #11]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	ffe0f8fe 	.word	0xffe0f8fe

0800555c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	4613      	mov	r3, r2
 8005586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005588:	e01a      	b.n	80055c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d016      	beq.n	80055c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005592:	f7fd fa19 	bl	80029c8 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d302      	bcc.n	80055a8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10b      	bne.n	80055c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2204      	movs	r2, #4
 80055ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b4:	f043 0201 	orr.w	r2, r3, #1
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e00e      	b.n	80055de <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d1d6      	bne.n	800558a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e39d      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055fa:	4ba4      	ldr	r3, [pc, #656]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
 8005602:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005604:	4ba1      	ldr	r3, [pc, #644]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f003 0303 	and.w	r3, r3, #3
 800560c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 80e1 	beq.w	80057de <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d007      	beq.n	8005632 <HAL_RCC_OscConfig+0x4a>
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	2b0c      	cmp	r3, #12
 8005626:	f040 8088 	bne.w	800573a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2b01      	cmp	r3, #1
 800562e:	f040 8084 	bne.w	800573a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005632:	4b96      	ldr	r3, [pc, #600]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d005      	beq.n	800564a <HAL_RCC_OscConfig+0x62>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e375      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1a      	ldr	r2, [r3, #32]
 800564e:	4b8f      	ldr	r3, [pc, #572]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b00      	cmp	r3, #0
 8005658:	d004      	beq.n	8005664 <HAL_RCC_OscConfig+0x7c>
 800565a:	4b8c      	ldr	r3, [pc, #560]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005662:	e005      	b.n	8005670 <HAL_RCC_OscConfig+0x88>
 8005664:	4b89      	ldr	r3, [pc, #548]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800566a:	091b      	lsrs	r3, r3, #4
 800566c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005670:	4293      	cmp	r3, r2
 8005672:	d223      	bcs.n	80056bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fd09 	bl	8006090 <RCC_SetFlashLatencyFromMSIRange>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e356      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005688:	4b80      	ldr	r3, [pc, #512]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a7f      	ldr	r2, [pc, #508]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 800568e:	f043 0308 	orr.w	r3, r3, #8
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	4b7d      	ldr	r3, [pc, #500]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	497a      	ldr	r1, [pc, #488]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056a6:	4b79      	ldr	r3, [pc, #484]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	4975      	ldr	r1, [pc, #468]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	604b      	str	r3, [r1, #4]
 80056ba:	e022      	b.n	8005702 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056bc:	4b73      	ldr	r3, [pc, #460]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a72      	ldr	r2, [pc, #456]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 80056c2:	f043 0308 	orr.w	r3, r3, #8
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	4b70      	ldr	r3, [pc, #448]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	496d      	ldr	r1, [pc, #436]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056da:	4b6c      	ldr	r3, [pc, #432]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	4968      	ldr	r1, [pc, #416]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fccc 	bl	8006090 <RCC_SetFlashLatencyFromMSIRange>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e319      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005702:	f000 fc03 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8005706:	4601      	mov	r1, r0
 8005708:	4b60      	ldr	r3, [pc, #384]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	091b      	lsrs	r3, r3, #4
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	4a5f      	ldr	r2, [pc, #380]	; (8005890 <HAL_RCC_OscConfig+0x2a8>)
 8005714:	5cd3      	ldrb	r3, [r2, r3]
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	fa21 f303 	lsr.w	r3, r1, r3
 800571e:	4a5d      	ldr	r2, [pc, #372]	; (8005894 <HAL_RCC_OscConfig+0x2ac>)
 8005720:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005722:	4b5d      	ldr	r3, [pc, #372]	; (8005898 <HAL_RCC_OscConfig+0x2b0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f7fd f902 	bl	8002930 <HAL_InitTick>
 800572c:	4603      	mov	r3, r0
 800572e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d052      	beq.n	80057dc <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8005736:	7bfb      	ldrb	r3, [r7, #15]
 8005738:	e2fd      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d032      	beq.n	80057a8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005742:	4b52      	ldr	r3, [pc, #328]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a51      	ldr	r2, [pc, #324]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005748:	f043 0301 	orr.w	r3, r3, #1
 800574c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800574e:	f7fd f93b 	bl	80029c8 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005756:	f7fd f937 	bl	80029c8 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e2e6      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005768:	4b48      	ldr	r3, [pc, #288]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0f0      	beq.n	8005756 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005774:	4b45      	ldr	r3, [pc, #276]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a44      	ldr	r2, [pc, #272]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 800577a:	f043 0308 	orr.w	r3, r3, #8
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	4b42      	ldr	r3, [pc, #264]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	493f      	ldr	r1, [pc, #252]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 800578e:	4313      	orrs	r3, r2
 8005790:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005792:	4b3e      	ldr	r3, [pc, #248]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	493a      	ldr	r1, [pc, #232]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	604b      	str	r3, [r1, #4]
 80057a6:	e01a      	b.n	80057de <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057a8:	4b38      	ldr	r3, [pc, #224]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a37      	ldr	r2, [pc, #220]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 80057ae:	f023 0301 	bic.w	r3, r3, #1
 80057b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057b4:	f7fd f908 	bl	80029c8 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057bc:	f7fd f904 	bl	80029c8 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e2b3      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80057ce:	4b2f      	ldr	r3, [pc, #188]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f0      	bne.n	80057bc <HAL_RCC_OscConfig+0x1d4>
 80057da:	e000      	b.n	80057de <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d074      	beq.n	80058d4 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d005      	beq.n	80057fc <HAL_RCC_OscConfig+0x214>
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b0c      	cmp	r3, #12
 80057f4:	d10e      	bne.n	8005814 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d10b      	bne.n	8005814 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057fc:	4b23      	ldr	r3, [pc, #140]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d064      	beq.n	80058d2 <HAL_RCC_OscConfig+0x2ea>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d160      	bne.n	80058d2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e290      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581c:	d106      	bne.n	800582c <HAL_RCC_OscConfig+0x244>
 800581e:	4b1b      	ldr	r3, [pc, #108]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1a      	ldr	r2, [pc, #104]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	e01d      	b.n	8005868 <HAL_RCC_OscConfig+0x280>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005834:	d10c      	bne.n	8005850 <HAL_RCC_OscConfig+0x268>
 8005836:	4b15      	ldr	r3, [pc, #84]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a14      	ldr	r2, [pc, #80]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 800583c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	4b12      	ldr	r3, [pc, #72]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a11      	ldr	r2, [pc, #68]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	e00b      	b.n	8005868 <HAL_RCC_OscConfig+0x280>
 8005850:	4b0e      	ldr	r3, [pc, #56]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a0d      	ldr	r2, [pc, #52]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	4b0b      	ldr	r3, [pc, #44]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a0a      	ldr	r2, [pc, #40]	; (800588c <HAL_RCC_OscConfig+0x2a4>)
 8005862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01c      	beq.n	80058aa <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fd f8aa 	bl	80029c8 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005876:	e011      	b.n	800589c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005878:	f7fd f8a6 	bl	80029c8 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b64      	cmp	r3, #100	; 0x64
 8005884:	d90a      	bls.n	800589c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e255      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
 800588a:	bf00      	nop
 800588c:	40021000 	.word	0x40021000
 8005890:	0800e2f0 	.word	0x0800e2f0
 8005894:	20000020 	.word	0x20000020
 8005898:	20000024 	.word	0x20000024
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800589c:	4bae      	ldr	r3, [pc, #696]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0e7      	beq.n	8005878 <HAL_RCC_OscConfig+0x290>
 80058a8:	e014      	b.n	80058d4 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058aa:	f7fd f88d 	bl	80029c8 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058b2:	f7fd f889 	bl	80029c8 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b64      	cmp	r3, #100	; 0x64
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e238      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058c4:	4ba4      	ldr	r3, [pc, #656]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1f0      	bne.n	80058b2 <HAL_RCC_OscConfig+0x2ca>
 80058d0:	e000      	b.n	80058d4 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d060      	beq.n	80059a2 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d005      	beq.n	80058f2 <HAL_RCC_OscConfig+0x30a>
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b0c      	cmp	r3, #12
 80058ea:	d119      	bne.n	8005920 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d116      	bne.n	8005920 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058f2:	4b99      	ldr	r3, [pc, #612]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d005      	beq.n	800590a <HAL_RCC_OscConfig+0x322>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e215      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590a:	4b93      	ldr	r3, [pc, #588]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	061b      	lsls	r3, r3, #24
 8005918:	498f      	ldr	r1, [pc, #572]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 800591a:	4313      	orrs	r3, r2
 800591c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800591e:	e040      	b.n	80059a2 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d023      	beq.n	8005970 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005928:	4b8b      	ldr	r3, [pc, #556]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a8a      	ldr	r2, [pc, #552]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 800592e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005934:	f7fd f848 	bl	80029c8 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800593c:	f7fd f844 	bl	80029c8 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e1f3      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800594e:	4b82      	ldr	r3, [pc, #520]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0f0      	beq.n	800593c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800595a:	4b7f      	ldr	r3, [pc, #508]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	061b      	lsls	r3, r3, #24
 8005968:	497b      	ldr	r1, [pc, #492]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 800596a:	4313      	orrs	r3, r2
 800596c:	604b      	str	r3, [r1, #4]
 800596e:	e018      	b.n	80059a2 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005970:	4b79      	ldr	r3, [pc, #484]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a78      	ldr	r2, [pc, #480]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800597a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fd f824 	bl	80029c8 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005984:	f7fd f820 	bl	80029c8 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e1cf      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005996:	4b70      	ldr	r3, [pc, #448]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d03c      	beq.n	8005a28 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d01c      	beq.n	80059f0 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059b6:	4b68      	ldr	r3, [pc, #416]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 80059b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059bc:	4a66      	ldr	r2, [pc, #408]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 80059be:	f043 0301 	orr.w	r3, r3, #1
 80059c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c6:	f7fc ffff 	bl	80029c8 <HAL_GetTick>
 80059ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059cc:	e008      	b.n	80059e0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ce:	f7fc fffb 	bl	80029c8 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e1aa      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059e0:	4b5d      	ldr	r3, [pc, #372]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 80059e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0ef      	beq.n	80059ce <HAL_RCC_OscConfig+0x3e6>
 80059ee:	e01b      	b.n	8005a28 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059f0:	4b59      	ldr	r3, [pc, #356]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 80059f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059f6:	4a58      	ldr	r2, [pc, #352]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 80059f8:	f023 0301 	bic.w	r3, r3, #1
 80059fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a00:	f7fc ffe2 	bl	80029c8 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a08:	f7fc ffde 	bl	80029c8 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e18d      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a1a:	4b4f      	ldr	r3, [pc, #316]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1ef      	bne.n	8005a08 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80a5 	beq.w	8005b80 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a36:	2300      	movs	r3, #0
 8005a38:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005a3a:	4b47      	ldr	r3, [pc, #284]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10d      	bne.n	8005a62 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a46:	4b44      	ldr	r3, [pc, #272]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4a:	4a43      	ldr	r2, [pc, #268]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a50:	6593      	str	r3, [r2, #88]	; 0x58
 8005a52:	4b41      	ldr	r3, [pc, #260]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a5a:	60bb      	str	r3, [r7, #8]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a62:	4b3e      	ldr	r3, [pc, #248]	; (8005b5c <HAL_RCC_OscConfig+0x574>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d118      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a6e:	4b3b      	ldr	r3, [pc, #236]	; (8005b5c <HAL_RCC_OscConfig+0x574>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a3a      	ldr	r2, [pc, #232]	; (8005b5c <HAL_RCC_OscConfig+0x574>)
 8005a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a7a:	f7fc ffa5 	bl	80029c8 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a82:	f7fc ffa1 	bl	80029c8 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e150      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a94:	4b31      	ldr	r3, [pc, #196]	; (8005b5c <HAL_RCC_OscConfig+0x574>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0f0      	beq.n	8005a82 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d108      	bne.n	8005aba <HAL_RCC_OscConfig+0x4d2>
 8005aa8:	4b2b      	ldr	r3, [pc, #172]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aae:	4a2a      	ldr	r2, [pc, #168]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005ab0:	f043 0301 	orr.w	r3, r3, #1
 8005ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ab8:	e024      	b.n	8005b04 <HAL_RCC_OscConfig+0x51c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2b05      	cmp	r3, #5
 8005ac0:	d110      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x4fc>
 8005ac2:	4b25      	ldr	r3, [pc, #148]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac8:	4a23      	ldr	r2, [pc, #140]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005aca:	f043 0304 	orr.w	r3, r3, #4
 8005ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ad2:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad8:	4a1f      	ldr	r2, [pc, #124]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005ada:	f043 0301 	orr.w	r3, r3, #1
 8005ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ae2:	e00f      	b.n	8005b04 <HAL_RCC_OscConfig+0x51c>
 8005ae4:	4b1c      	ldr	r3, [pc, #112]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aea:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005aec:	f023 0301 	bic.w	r3, r3, #1
 8005af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005af4:	4b18      	ldr	r3, [pc, #96]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afa:	4a17      	ldr	r2, [pc, #92]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005afc:	f023 0304 	bic.w	r3, r3, #4
 8005b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d016      	beq.n	8005b3a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0c:	f7fc ff5c 	bl	80029c8 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b12:	e00a      	b.n	8005b2a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b14:	f7fc ff58 	bl	80029c8 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e105      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	; (8005b58 <HAL_RCC_OscConfig+0x570>)
 8005b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0ed      	beq.n	8005b14 <HAL_RCC_OscConfig+0x52c>
 8005b38:	e019      	b.n	8005b6e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3a:	f7fc ff45 	bl	80029c8 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b40:	e00e      	b.n	8005b60 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b42:	f7fc ff41 	bl	80029c8 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d905      	bls.n	8005b60 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e0ee      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b60:	4b77      	ldr	r3, [pc, #476]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e9      	bne.n	8005b42 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b6e:	7ffb      	ldrb	r3, [r7, #31]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d105      	bne.n	8005b80 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b74:	4b72      	ldr	r3, [pc, #456]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b78:	4a71      	ldr	r2, [pc, #452]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80d5 	beq.w	8005d34 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b0c      	cmp	r3, #12
 8005b8e:	f000 808e 	beq.w	8005cae <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d15b      	bne.n	8005c52 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b9a:	4b69      	ldr	r3, [pc, #420]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a68      	ldr	r2, [pc, #416]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005ba0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba6:	f7fc ff0f 	bl	80029c8 <HAL_GetTick>
 8005baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bac:	e008      	b.n	8005bc0 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bae:	f7fc ff0b 	bl	80029c8 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e0ba      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bc0:	4b5f      	ldr	r3, [pc, #380]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f0      	bne.n	8005bae <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bcc:	4b5c      	ldr	r3, [pc, #368]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005bce:	68da      	ldr	r2, [r3, #12]
 8005bd0:	4b5c      	ldr	r3, [pc, #368]	; (8005d44 <HAL_RCC_OscConfig+0x75c>)
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005bdc:	3a01      	subs	r2, #1
 8005bde:	0112      	lsls	r2, r2, #4
 8005be0:	4311      	orrs	r1, r2
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005be6:	0212      	lsls	r2, r2, #8
 8005be8:	4311      	orrs	r1, r2
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005bee:	0852      	lsrs	r2, r2, #1
 8005bf0:	3a01      	subs	r2, #1
 8005bf2:	0552      	lsls	r2, r2, #21
 8005bf4:	4311      	orrs	r1, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005bfa:	0852      	lsrs	r2, r2, #1
 8005bfc:	3a01      	subs	r2, #1
 8005bfe:	0652      	lsls	r2, r2, #25
 8005c00:	4311      	orrs	r1, r2
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c06:	0912      	lsrs	r2, r2, #4
 8005c08:	0452      	lsls	r2, r2, #17
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	494c      	ldr	r1, [pc, #304]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c12:	4b4b      	ldr	r3, [pc, #300]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a4a      	ldr	r2, [pc, #296]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005c18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c1c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c1e:	4b48      	ldr	r3, [pc, #288]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	4a47      	ldr	r2, [pc, #284]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005c24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c28:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2a:	f7fc fecd 	bl	80029c8 <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c32:	f7fc fec9 	bl	80029c8 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e078      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c44:	4b3e      	ldr	r3, [pc, #248]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0f0      	beq.n	8005c32 <HAL_RCC_OscConfig+0x64a>
 8005c50:	e070      	b.n	8005d34 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c52:	4b3b      	ldr	r3, [pc, #236]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a3a      	ldr	r2, [pc, #232]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005c58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c5c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005c5e:	4b38      	ldr	r3, [pc, #224]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d105      	bne.n	8005c76 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005c6a:	4b35      	ldr	r3, [pc, #212]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	4a34      	ldr	r2, [pc, #208]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005c70:	f023 0303 	bic.w	r3, r3, #3
 8005c74:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c76:	4b32      	ldr	r3, [pc, #200]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	4a31      	ldr	r2, [pc, #196]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005c7c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c84:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c86:	f7fc fe9f 	bl	80029c8 <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c8e:	f7fc fe9b 	bl	80029c8 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e04a      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ca0:	4b27      	ldr	r3, [pc, #156]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f0      	bne.n	8005c8e <HAL_RCC_OscConfig+0x6a6>
 8005cac:	e042      	b.n	8005d34 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d101      	bne.n	8005cba <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e03d      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005cba:	4b21      	ldr	r3, [pc, #132]	; (8005d40 <HAL_RCC_OscConfig+0x758>)
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f003 0203 	and.w	r2, r3, #3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d130      	bne.n	8005d30 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d127      	bne.n	8005d30 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cea:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d11f      	bne.n	8005d30 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cfa:	2a07      	cmp	r2, #7
 8005cfc:	bf14      	ite	ne
 8005cfe:	2201      	movne	r2, #1
 8005d00:	2200      	moveq	r2, #0
 8005d02:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d113      	bne.n	8005d30 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d12:	085b      	lsrs	r3, r3, #1
 8005d14:	3b01      	subs	r3, #1
 8005d16:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d109      	bne.n	8005d30 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	085b      	lsrs	r3, r3, #1
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d001      	beq.n	8005d34 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e000      	b.n	8005d36 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3720      	adds	r7, #32
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	40021000 	.word	0x40021000
 8005d44:	f99d808c 	.word	0xf99d808c

08005d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e0c8      	b.n	8005eee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d5c:	4b66      	ldr	r3, [pc, #408]	; (8005ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0307 	and.w	r3, r3, #7
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d910      	bls.n	8005d8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d6a:	4b63      	ldr	r3, [pc, #396]	; (8005ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f023 0207 	bic.w	r2, r3, #7
 8005d72:	4961      	ldr	r1, [pc, #388]	; (8005ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d7a:	4b5f      	ldr	r3, [pc, #380]	; (8005ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d001      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0b0      	b.n	8005eee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d04c      	beq.n	8005e32 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2b03      	cmp	r3, #3
 8005d9e:	d107      	bne.n	8005db0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005da0:	4b56      	ldr	r3, [pc, #344]	; (8005efc <HAL_RCC_ClockConfig+0x1b4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d121      	bne.n	8005df0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e09e      	b.n	8005eee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d107      	bne.n	8005dc8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005db8:	4b50      	ldr	r3, [pc, #320]	; (8005efc <HAL_RCC_ClockConfig+0x1b4>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d115      	bne.n	8005df0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e092      	b.n	8005eee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d107      	bne.n	8005de0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005dd0:	4b4a      	ldr	r3, [pc, #296]	; (8005efc <HAL_RCC_ClockConfig+0x1b4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d109      	bne.n	8005df0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e086      	b.n	8005eee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005de0:	4b46      	ldr	r3, [pc, #280]	; (8005efc <HAL_RCC_ClockConfig+0x1b4>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e07e      	b.n	8005eee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005df0:	4b42      	ldr	r3, [pc, #264]	; (8005efc <HAL_RCC_ClockConfig+0x1b4>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f023 0203 	bic.w	r2, r3, #3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	493f      	ldr	r1, [pc, #252]	; (8005efc <HAL_RCC_ClockConfig+0x1b4>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e02:	f7fc fde1 	bl	80029c8 <HAL_GetTick>
 8005e06:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e08:	e00a      	b.n	8005e20 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e0a:	f7fc fddd 	bl	80029c8 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e066      	b.n	8005eee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e20:	4b36      	ldr	r3, [pc, #216]	; (8005efc <HAL_RCC_ClockConfig+0x1b4>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f003 020c 	and.w	r2, r3, #12
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d1eb      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d008      	beq.n	8005e50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e3e:	4b2f      	ldr	r3, [pc, #188]	; (8005efc <HAL_RCC_ClockConfig+0x1b4>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	492c      	ldr	r1, [pc, #176]	; (8005efc <HAL_RCC_ClockConfig+0x1b4>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e50:	4b29      	ldr	r3, [pc, #164]	; (8005ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0307 	and.w	r3, r3, #7
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d210      	bcs.n	8005e80 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e5e:	4b26      	ldr	r3, [pc, #152]	; (8005ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f023 0207 	bic.w	r2, r3, #7
 8005e66:	4924      	ldr	r1, [pc, #144]	; (8005ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e6e:	4b22      	ldr	r3, [pc, #136]	; (8005ef8 <HAL_RCC_ClockConfig+0x1b0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d001      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e036      	b.n	8005eee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e8c:	4b1b      	ldr	r3, [pc, #108]	; (8005efc <HAL_RCC_ClockConfig+0x1b4>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	4918      	ldr	r1, [pc, #96]	; (8005efc <HAL_RCC_ClockConfig+0x1b4>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d009      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eaa:	4b14      	ldr	r3, [pc, #80]	; (8005efc <HAL_RCC_ClockConfig+0x1b4>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	4910      	ldr	r1, [pc, #64]	; (8005efc <HAL_RCC_ClockConfig+0x1b4>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ebe:	f000 f825 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8005ec2:	4601      	mov	r1, r0
 8005ec4:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <HAL_RCC_ClockConfig+0x1b4>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	091b      	lsrs	r3, r3, #4
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	4a0c      	ldr	r2, [pc, #48]	; (8005f00 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed0:	5cd3      	ldrb	r3, [r2, r3]
 8005ed2:	f003 031f 	and.w	r3, r3, #31
 8005ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8005eda:	4a0a      	ldr	r2, [pc, #40]	; (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ede:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <HAL_RCC_ClockConfig+0x1c0>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fc fd24 	bl	8002930 <HAL_InitTick>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	72fb      	strb	r3, [r7, #11]

  return status;
 8005eec:	7afb      	ldrb	r3, [r7, #11]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40022000 	.word	0x40022000
 8005efc:	40021000 	.word	0x40021000
 8005f00:	0800e2f0 	.word	0x0800e2f0
 8005f04:	20000020 	.word	0x20000020
 8005f08:	20000024 	.word	0x20000024

08005f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b089      	sub	sp, #36	; 0x24
 8005f10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	61fb      	str	r3, [r7, #28]
 8005f16:	2300      	movs	r3, #0
 8005f18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f1a:	4b3d      	ldr	r3, [pc, #244]	; (8006010 <HAL_RCC_GetSysClockFreq+0x104>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 030c 	and.w	r3, r3, #12
 8005f22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f24:	4b3a      	ldr	r3, [pc, #232]	; (8006010 <HAL_RCC_GetSysClockFreq+0x104>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <HAL_RCC_GetSysClockFreq+0x34>
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	2b0c      	cmp	r3, #12
 8005f38:	d121      	bne.n	8005f7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d11e      	bne.n	8005f7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f40:	4b33      	ldr	r3, [pc, #204]	; (8006010 <HAL_RCC_GetSysClockFreq+0x104>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0308 	and.w	r3, r3, #8
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d107      	bne.n	8005f5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f4c:	4b30      	ldr	r3, [pc, #192]	; (8006010 <HAL_RCC_GetSysClockFreq+0x104>)
 8005f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f52:	0a1b      	lsrs	r3, r3, #8
 8005f54:	f003 030f 	and.w	r3, r3, #15
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	e005      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f5c:	4b2c      	ldr	r3, [pc, #176]	; (8006010 <HAL_RCC_GetSysClockFreq+0x104>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	091b      	lsrs	r3, r3, #4
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f68:	4a2a      	ldr	r2, [pc, #168]	; (8006014 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10d      	bne.n	8005f94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f7c:	e00a      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d102      	bne.n	8005f8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f84:	4b24      	ldr	r3, [pc, #144]	; (8006018 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f86:	61bb      	str	r3, [r7, #24]
 8005f88:	e004      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d101      	bne.n	8005f94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f90:	4b22      	ldr	r3, [pc, #136]	; (800601c <HAL_RCC_GetSysClockFreq+0x110>)
 8005f92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	2b0c      	cmp	r3, #12
 8005f98:	d133      	bne.n	8006002 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f9a:	4b1d      	ldr	r3, [pc, #116]	; (8006010 <HAL_RCC_GetSysClockFreq+0x104>)
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d002      	beq.n	8005fb0 <HAL_RCC_GetSysClockFreq+0xa4>
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d003      	beq.n	8005fb6 <HAL_RCC_GetSysClockFreq+0xaa>
 8005fae:	e005      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005fb0:	4b19      	ldr	r3, [pc, #100]	; (8006018 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005fb2:	617b      	str	r3, [r7, #20]
      break;
 8005fb4:	e005      	b.n	8005fc2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005fb6:	4b19      	ldr	r3, [pc, #100]	; (800601c <HAL_RCC_GetSysClockFreq+0x110>)
 8005fb8:	617b      	str	r3, [r7, #20]
      break;
 8005fba:	e002      	b.n	8005fc2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	617b      	str	r3, [r7, #20]
      break;
 8005fc0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fc2:	4b13      	ldr	r3, [pc, #76]	; (8006010 <HAL_RCC_GetSysClockFreq+0x104>)
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	091b      	lsrs	r3, r3, #4
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	3301      	adds	r3, #1
 8005fce:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005fd0:	4b0f      	ldr	r3, [pc, #60]	; (8006010 <HAL_RCC_GetSysClockFreq+0x104>)
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	0a1b      	lsrs	r3, r3, #8
 8005fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	fb02 f203 	mul.w	r2, r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fe8:	4b09      	ldr	r3, [pc, #36]	; (8006010 <HAL_RCC_GetSysClockFreq+0x104>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	0e5b      	lsrs	r3, r3, #25
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006000:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006002:	69bb      	ldr	r3, [r7, #24]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3724      	adds	r7, #36	; 0x24
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	40021000 	.word	0x40021000
 8006014:	0800e308 	.word	0x0800e308
 8006018:	00f42400 	.word	0x00f42400
 800601c:	007a1200 	.word	0x007a1200

08006020 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006024:	4b03      	ldr	r3, [pc, #12]	; (8006034 <HAL_RCC_GetHCLKFreq+0x14>)
 8006026:	681b      	ldr	r3, [r3, #0]
}
 8006028:	4618      	mov	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20000020 	.word	0x20000020

08006038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800603c:	f7ff fff0 	bl	8006020 <HAL_RCC_GetHCLKFreq>
 8006040:	4601      	mov	r1, r0
 8006042:	4b06      	ldr	r3, [pc, #24]	; (800605c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	0a1b      	lsrs	r3, r3, #8
 8006048:	f003 0307 	and.w	r3, r3, #7
 800604c:	4a04      	ldr	r2, [pc, #16]	; (8006060 <HAL_RCC_GetPCLK1Freq+0x28>)
 800604e:	5cd3      	ldrb	r3, [r2, r3]
 8006050:	f003 031f 	and.w	r3, r3, #31
 8006054:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006058:	4618      	mov	r0, r3
 800605a:	bd80      	pop	{r7, pc}
 800605c:	40021000 	.word	0x40021000
 8006060:	0800e300 	.word	0x0800e300

08006064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006068:	f7ff ffda 	bl	8006020 <HAL_RCC_GetHCLKFreq>
 800606c:	4601      	mov	r1, r0
 800606e:	4b06      	ldr	r3, [pc, #24]	; (8006088 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	0adb      	lsrs	r3, r3, #11
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	4a04      	ldr	r2, [pc, #16]	; (800608c <HAL_RCC_GetPCLK2Freq+0x28>)
 800607a:	5cd3      	ldrb	r3, [r2, r3]
 800607c:	f003 031f 	and.w	r3, r3, #31
 8006080:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006084:	4618      	mov	r0, r3
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40021000 	.word	0x40021000
 800608c:	0800e300 	.word	0x0800e300

08006090 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006098:	2300      	movs	r3, #0
 800609a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800609c:	4b2a      	ldr	r3, [pc, #168]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800609e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060a8:	f7ff f962 	bl	8005370 <HAL_PWREx_GetVoltageRange>
 80060ac:	6178      	str	r0, [r7, #20]
 80060ae:	e014      	b.n	80060da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060b0:	4b25      	ldr	r3, [pc, #148]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b4:	4a24      	ldr	r2, [pc, #144]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ba:	6593      	str	r3, [r2, #88]	; 0x58
 80060bc:	4b22      	ldr	r3, [pc, #136]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060c8:	f7ff f952 	bl	8005370 <HAL_PWREx_GetVoltageRange>
 80060cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80060ce:	4b1e      	ldr	r3, [pc, #120]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d2:	4a1d      	ldr	r2, [pc, #116]	; (8006148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060e0:	d10b      	bne.n	80060fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b80      	cmp	r3, #128	; 0x80
 80060e6:	d919      	bls.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2ba0      	cmp	r3, #160	; 0xa0
 80060ec:	d902      	bls.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060ee:	2302      	movs	r3, #2
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	e013      	b.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060f4:	2301      	movs	r3, #1
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	e010      	b.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b80      	cmp	r3, #128	; 0x80
 80060fe:	d902      	bls.n	8006106 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006100:	2303      	movs	r3, #3
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	e00a      	b.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b80      	cmp	r3, #128	; 0x80
 800610a:	d102      	bne.n	8006112 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800610c:	2302      	movs	r3, #2
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	e004      	b.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b70      	cmp	r3, #112	; 0x70
 8006116:	d101      	bne.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006118:	2301      	movs	r3, #1
 800611a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800611c:	4b0b      	ldr	r3, [pc, #44]	; (800614c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f023 0207 	bic.w	r2, r3, #7
 8006124:	4909      	ldr	r1, [pc, #36]	; (800614c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800612c:	4b07      	ldr	r3, [pc, #28]	; (800614c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	429a      	cmp	r2, r3
 8006138:	d001      	beq.n	800613e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40021000 	.word	0x40021000
 800614c:	40022000 	.word	0x40022000

08006150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006158:	2300      	movs	r3, #0
 800615a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800615c:	2300      	movs	r3, #0
 800615e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006168:	2b00      	cmp	r3, #0
 800616a:	d03f      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006174:	d01c      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800617a:	d802      	bhi.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00e      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006180:	e01f      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006182:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006186:	d003      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006188:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800618c:	d01c      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800618e:	e018      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006190:	4b85      	ldr	r3, [pc, #532]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	4a84      	ldr	r2, [pc, #528]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800619a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800619c:	e015      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	3304      	adds	r3, #4
 80061a2:	2100      	movs	r1, #0
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 ff41 	bl	800702c <RCCEx_PLLSAI1_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061ae:	e00c      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3320      	adds	r3, #32
 80061b4:	2100      	movs	r1, #0
 80061b6:	4618      	mov	r0, r3
 80061b8:	f001 f828 	bl	800720c <RCCEx_PLLSAI2_Config>
 80061bc:	4603      	mov	r3, r0
 80061be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061c0:	e003      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	74fb      	strb	r3, [r7, #19]
      break;
 80061c6:	e000      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80061c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061ca:	7cfb      	ldrb	r3, [r7, #19]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10b      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061d0:	4b75      	ldr	r3, [pc, #468]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061de:	4972      	ldr	r1, [pc, #456]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061e6:	e001      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e8:	7cfb      	ldrb	r3, [r7, #19]
 80061ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d03f      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006200:	d01c      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006202:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006206:	d802      	bhi.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00e      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800620c:	e01f      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800620e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006212:	d003      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8006214:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006218:	d01c      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800621a:	e018      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800621c:	4b62      	ldr	r3, [pc, #392]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	4a61      	ldr	r2, [pc, #388]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006226:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006228:	e015      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3304      	adds	r3, #4
 800622e:	2100      	movs	r1, #0
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fefb 	bl	800702c <RCCEx_PLLSAI1_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800623a:	e00c      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3320      	adds	r3, #32
 8006240:	2100      	movs	r1, #0
 8006242:	4618      	mov	r0, r3
 8006244:	f000 ffe2 	bl	800720c <RCCEx_PLLSAI2_Config>
 8006248:	4603      	mov	r3, r0
 800624a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800624c:	e003      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	74fb      	strb	r3, [r7, #19]
      break;
 8006252:	e000      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006256:	7cfb      	ldrb	r3, [r7, #19]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10b      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800625c:	4b52      	ldr	r3, [pc, #328]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006262:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800626a:	494f      	ldr	r1, [pc, #316]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006272:	e001      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006274:	7cfb      	ldrb	r3, [r7, #19]
 8006276:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 80a0 	beq.w	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006286:	2300      	movs	r3, #0
 8006288:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800628a:	4b47      	ldr	r3, [pc, #284]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800628c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800629a:	2300      	movs	r3, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00d      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062a0:	4b41      	ldr	r3, [pc, #260]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80062a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a4:	4a40      	ldr	r2, [pc, #256]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80062a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062aa:	6593      	str	r3, [r2, #88]	; 0x58
 80062ac:	4b3e      	ldr	r3, [pc, #248]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80062ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062b8:	2301      	movs	r3, #1
 80062ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062bc:	4b3b      	ldr	r3, [pc, #236]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a3a      	ldr	r2, [pc, #232]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80062c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062c8:	f7fc fb7e 	bl	80029c8 <HAL_GetTick>
 80062cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062ce:	e009      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062d0:	f7fc fb7a 	bl	80029c8 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d902      	bls.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	74fb      	strb	r3, [r7, #19]
        break;
 80062e2:	e005      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062e4:	4b31      	ldr	r3, [pc, #196]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0ef      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80062f0:	7cfb      	ldrb	r3, [r7, #19]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d15c      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062f6:	4b2c      	ldr	r3, [pc, #176]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80062f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006300:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01f      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	429a      	cmp	r2, r3
 8006312:	d019      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006314:	4b24      	ldr	r3, [pc, #144]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800631e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006320:	4b21      	ldr	r3, [pc, #132]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006326:	4a20      	ldr	r2, [pc, #128]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800632c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006330:	4b1d      	ldr	r3, [pc, #116]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006336:	4a1c      	ldr	r2, [pc, #112]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800633c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006340:	4a19      	ldr	r2, [pc, #100]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d016      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006352:	f7fc fb39 	bl	80029c8 <HAL_GetTick>
 8006356:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006358:	e00b      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800635a:	f7fc fb35 	bl	80029c8 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	f241 3288 	movw	r2, #5000	; 0x1388
 8006368:	4293      	cmp	r3, r2
 800636a:	d902      	bls.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	74fb      	strb	r3, [r7, #19]
            break;
 8006370:	e006      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006372:	4b0d      	ldr	r3, [pc, #52]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0ec      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8006380:	7cfb      	ldrb	r3, [r7, #19]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10c      	bne.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006386:	4b08      	ldr	r3, [pc, #32]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006396:	4904      	ldr	r1, [pc, #16]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800639e:	e009      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063a0:	7cfb      	ldrb	r3, [r7, #19]
 80063a2:	74bb      	strb	r3, [r7, #18]
 80063a4:	e006      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80063a6:	bf00      	nop
 80063a8:	40021000 	.word	0x40021000
 80063ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b0:	7cfb      	ldrb	r3, [r7, #19]
 80063b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063b4:	7c7b      	ldrb	r3, [r7, #17]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d105      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ba:	4b9e      	ldr	r3, [pc, #632]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80063bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063be:	4a9d      	ldr	r2, [pc, #628]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80063c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063d2:	4b98      	ldr	r3, [pc, #608]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d8:	f023 0203 	bic.w	r2, r3, #3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e0:	4994      	ldr	r1, [pc, #592]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063f4:	4b8f      	ldr	r3, [pc, #572]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80063f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fa:	f023 020c 	bic.w	r2, r3, #12
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006402:	498c      	ldr	r1, [pc, #560]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006416:	4b87      	ldr	r3, [pc, #540]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	4983      	ldr	r1, [pc, #524]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006438:	4b7e      	ldr	r3, [pc, #504]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006446:	497b      	ldr	r1, [pc, #492]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800645a:	4b76      	ldr	r3, [pc, #472]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006468:	4972      	ldr	r1, [pc, #456]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800647c:	4b6d      	ldr	r3, [pc, #436]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006482:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800648a:	496a      	ldr	r1, [pc, #424]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800649e:	4b65      	ldr	r3, [pc, #404]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ac:	4961      	ldr	r1, [pc, #388]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064c0:	4b5c      	ldr	r3, [pc, #368]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80064c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ce:	4959      	ldr	r1, [pc, #356]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064e2:	4b54      	ldr	r3, [pc, #336]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f0:	4950      	ldr	r1, [pc, #320]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006504:	4b4b      	ldr	r3, [pc, #300]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006512:	4948      	ldr	r1, [pc, #288]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006514:	4313      	orrs	r3, r2
 8006516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006526:	4b43      	ldr	r3, [pc, #268]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006534:	493f      	ldr	r1, [pc, #252]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d028      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006548:	4b3a      	ldr	r3, [pc, #232]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006556:	4937      	ldr	r1, [pc, #220]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006562:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006566:	d106      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006568:	4b32      	ldr	r3, [pc, #200]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	4a31      	ldr	r2, [pc, #196]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800656e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006572:	60d3      	str	r3, [r2, #12]
 8006574:	e011      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800657a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800657e:	d10c      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3304      	adds	r3, #4
 8006584:	2101      	movs	r1, #1
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fd50 	bl	800702c <RCCEx_PLLSAI1_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006590:	7cfb      	ldrb	r3, [r7, #19]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8006596:	7cfb      	ldrb	r3, [r7, #19]
 8006598:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d028      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80065a6:	4b23      	ldr	r3, [pc, #140]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80065a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b4:	491f      	ldr	r1, [pc, #124]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065c4:	d106      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065c6:	4b1b      	ldr	r3, [pc, #108]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	4a1a      	ldr	r2, [pc, #104]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80065cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065d0:	60d3      	str	r3, [r2, #12]
 80065d2:	e011      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065dc:	d10c      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3304      	adds	r3, #4
 80065e2:	2101      	movs	r1, #1
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 fd21 	bl	800702c <RCCEx_PLLSAI1_Config>
 80065ea:	4603      	mov	r3, r0
 80065ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065ee:	7cfb      	ldrb	r3, [r7, #19]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80065f4:	7cfb      	ldrb	r3, [r7, #19]
 80065f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d02b      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006604:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006612:	4908      	ldr	r1, [pc, #32]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006614:	4313      	orrs	r3, r2
 8006616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800661e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006622:	d109      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006624:	4b03      	ldr	r3, [pc, #12]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	4a02      	ldr	r2, [pc, #8]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800662a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800662e:	60d3      	str	r3, [r2, #12]
 8006630:	e014      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006632:	bf00      	nop
 8006634:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800663c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006640:	d10c      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3304      	adds	r3, #4
 8006646:	2101      	movs	r1, #1
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fcef 	bl	800702c <RCCEx_PLLSAI1_Config>
 800664e:	4603      	mov	r3, r0
 8006650:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006652:	7cfb      	ldrb	r3, [r7, #19]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8006658:	7cfb      	ldrb	r3, [r7, #19]
 800665a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d02f      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006668:	4b2b      	ldr	r3, [pc, #172]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800666a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006676:	4928      	ldr	r1, [pc, #160]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006678:	4313      	orrs	r3, r2
 800667a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006686:	d10d      	bne.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3304      	adds	r3, #4
 800668c:	2102      	movs	r1, #2
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fccc 	bl	800702c <RCCEx_PLLSAI1_Config>
 8006694:	4603      	mov	r3, r0
 8006696:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006698:	7cfb      	ldrb	r3, [r7, #19]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d014      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800669e:	7cfb      	ldrb	r3, [r7, #19]
 80066a0:	74bb      	strb	r3, [r7, #18]
 80066a2:	e011      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ac:	d10c      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	3320      	adds	r3, #32
 80066b2:	2102      	movs	r1, #2
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 fda9 	bl	800720c <RCCEx_PLLSAI2_Config>
 80066ba:	4603      	mov	r3, r0
 80066bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066be:	7cfb      	ldrb	r3, [r7, #19]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80066c4:	7cfb      	ldrb	r3, [r7, #19]
 80066c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00a      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80066d4:	4b10      	ldr	r3, [pc, #64]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066e2:	490d      	ldr	r1, [pc, #52]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00b      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066f6:	4b08      	ldr	r3, [pc, #32]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006706:	4904      	ldr	r1, [pc, #16]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006708:	4313      	orrs	r3, r2
 800670a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800670e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	40021000 	.word	0x40021000

0800671c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b088      	sub	sp, #32
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800672e:	d137      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006730:	4bb8      	ldr	r3, [pc, #736]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800673a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006742:	d014      	beq.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8006744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006748:	d01e      	beq.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 800674a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800674e:	d001      	beq.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006750:	f000 bc53 	b.w	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006754:	4baf      	ldr	r3, [pc, #700]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b02      	cmp	r3, #2
 8006760:	f040 8446 	bne.w	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 8006764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006768:	61fb      	str	r3, [r7, #28]
      break;
 800676a:	f000 bc41 	b.w	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800676e:	4ba9      	ldr	r3, [pc, #676]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b02      	cmp	r3, #2
 800677a:	f040 843b 	bne.w	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = LSI_VALUE;
 800677e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006782:	61fb      	str	r3, [r7, #28]
      break;
 8006784:	f000 bc36 	b.w	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006788:	4ba2      	ldr	r3, [pc, #648]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006794:	f040 8430 	bne.w	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 8006798:	4b9f      	ldr	r3, [pc, #636]	; (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800679a:	61fb      	str	r3, [r7, #28]
      break;
 800679c:	f000 bc2c 	b.w	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067a0:	4b9c      	ldr	r3, [pc, #624]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f003 0303 	and.w	r3, r3, #3
 80067a8:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d023      	beq.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d02e      	beq.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d139      	bne.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80067b8:	4b96      	ldr	r3, [pc, #600]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d116      	bne.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80067c4:	4b93      	ldr	r3, [pc, #588]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0308 	and.w	r3, r3, #8
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d005      	beq.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 80067d0:	4b90      	ldr	r3, [pc, #576]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	091b      	lsrs	r3, r3, #4
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	e005      	b.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80067dc:	4b8d      	ldr	r3, [pc, #564]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80067de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067e2:	0a1b      	lsrs	r3, r3, #8
 80067e4:	f003 030f 	and.w	r3, r3, #15
 80067e8:	4a8c      	ldr	r2, [pc, #560]	; (8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80067ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ee:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80067f0:	e01f      	b.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	61bb      	str	r3, [r7, #24]
      break;
 80067f6:	e01c      	b.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067f8:	4b86      	ldr	r3, [pc, #536]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006804:	d102      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8006806:	4b86      	ldr	r3, [pc, #536]	; (8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8006808:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800680a:	e012      	b.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	61bb      	str	r3, [r7, #24]
      break;
 8006810:	e00f      	b.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006812:	4b80      	ldr	r3, [pc, #512]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800681a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800681e:	d102      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8006820:	4b80      	ldr	r3, [pc, #512]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8006822:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006824:	e005      	b.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	61bb      	str	r3, [r7, #24]
      break;
 800682a:	e002      	b.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	61bb      	str	r3, [r7, #24]
      break;
 8006830:	bf00      	nop
    }

    switch(PeriphClk)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006838:	f000 8337 	beq.w	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 800683c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006840:	d825      	bhi.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8006842:	2b10      	cmp	r3, #16
 8006844:	f000 81df 	beq.w	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006848:	2b10      	cmp	r3, #16
 800684a:	d80f      	bhi.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800684c:	2b02      	cmp	r3, #2
 800684e:	f000 8128 	beq.w	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8006852:	2b02      	cmp	r3, #2
 8006854:	d803      	bhi.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8006856:	2b01      	cmp	r3, #1
 8006858:	f000 80ec 	beq.w	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800685c:	e3cd      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 800685e:	2b04      	cmp	r3, #4
 8006860:	f000 8169 	beq.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8006864:	2b08      	cmp	r3, #8
 8006866:	f000 819a 	beq.w	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 800686a:	e3c6      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 800686c:	2b40      	cmp	r3, #64	; 0x40
 800686e:	f000 82b3 	beq.w	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 8006872:	2b40      	cmp	r3, #64	; 0x40
 8006874:	d803      	bhi.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8006876:	2b20      	cmp	r3, #32
 8006878:	f000 81fd 	beq.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 800687c:	e3bd      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 800687e:	2b80      	cmp	r3, #128	; 0x80
 8006880:	f000 82cd 	beq.w	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8006884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006888:	f000 82ec 	beq.w	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 800688c:	e3b5      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 800688e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006892:	f000 822d 	beq.w	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8006896:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800689a:	d811      	bhi.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800689c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068a0:	d021      	beq.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 80068a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068a6:	d804      	bhi.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80068a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ac:	f000 833e 	beq.w	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 80068b0:	e3a3      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80068b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b6:	d01d      	beq.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80068b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068bc:	d021      	beq.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 80068be:	e39c      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80068c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c4:	f000 8277 	beq.w	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 80068c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068cc:	d804      	bhi.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80068ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d2:	f000 8371 	beq.w	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 80068d6:	e390      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80068d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068dc:	d011      	beq.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80068de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068e2:	d00e      	beq.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 80068e4:	e389      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80068e6:	69b9      	ldr	r1, [r7, #24]
 80068e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80068ec:	f000 fd68 	bl	80073c0 <RCCEx_GetSAIxPeriphCLKFreq>
 80068f0:	61f8      	str	r0, [r7, #28]
      break;
 80068f2:	e382      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80068f4:	69b9      	ldr	r1, [r7, #24]
 80068f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80068fa:	f000 fd61 	bl	80073c0 <RCCEx_GetSAIxPeriphCLKFreq>
 80068fe:	61f8      	str	r0, [r7, #28]
      break;
 8006900:	e37b      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006902:	4b44      	ldr	r3, [pc, #272]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006908:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800690c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006914:	d023      	beq.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8006916:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800691a:	d003      	beq.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800691c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006920:	d04a      	beq.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8006922:	e086      	b.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006924:	4b3b      	ldr	r3, [pc, #236]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b02      	cmp	r3, #2
 800692e:	d17b      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006930:	4b38      	ldr	r3, [pc, #224]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0308 	and.w	r3, r3, #8
 8006938:	2b00      	cmp	r3, #0
 800693a:	d005      	beq.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800693c:	4b35      	ldr	r3, [pc, #212]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	091b      	lsrs	r3, r3, #4
 8006942:	f003 030f 	and.w	r3, r3, #15
 8006946:	e005      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8006948:	4b32      	ldr	r3, [pc, #200]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800694a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800694e:	0a1b      	lsrs	r3, r3, #8
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	4a31      	ldr	r2, [pc, #196]	; (8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800695a:	61fb      	str	r3, [r7, #28]
          break;
 800695c:	e064      	b.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800695e:	4b2d      	ldr	r3, [pc, #180]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006966:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800696a:	d15f      	bne.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800696c:	4b29      	ldr	r3, [pc, #164]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006974:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006978:	d158      	bne.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800697a:	4b26      	ldr	r3, [pc, #152]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	0a1b      	lsrs	r3, r3, #8
 8006980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006984:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	fb02 f203 	mul.w	r2, r2, r3
 800698e:	4b21      	ldr	r3, [pc, #132]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	091b      	lsrs	r3, r3, #4
 8006994:	f003 0307 	and.w	r3, r3, #7
 8006998:	3301      	adds	r3, #1
 800699a:	fbb2 f3f3 	udiv	r3, r2, r3
 800699e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80069a0:	4b1c      	ldr	r3, [pc, #112]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	0d5b      	lsrs	r3, r3, #21
 80069a6:	f003 0303 	and.w	r3, r3, #3
 80069aa:	3301      	adds	r3, #1
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b4:	61fb      	str	r3, [r7, #28]
          break;
 80069b6:	e039      	b.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80069b8:	4b16      	ldr	r3, [pc, #88]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069c4:	d134      	bne.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80069c6:	4b13      	ldr	r3, [pc, #76]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069d2:	d12d      	bne.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80069d4:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	0a1b      	lsrs	r3, r3, #8
 80069da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069de:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	fb02 f203 	mul.w	r2, r2, r3
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	091b      	lsrs	r3, r3, #4
 80069ee:	f003 0307 	and.w	r3, r3, #7
 80069f2:	3301      	adds	r3, #1
 80069f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80069fa:	4b06      	ldr	r3, [pc, #24]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	0d5b      	lsrs	r3, r3, #21
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	3301      	adds	r3, #1
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0e:	61fb      	str	r3, [r7, #28]
          break;
 8006a10:	e00e      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8006a12:	bf00      	nop
 8006a14:	40021000 	.word	0x40021000
 8006a18:	0003d090 	.word	0x0003d090
 8006a1c:	0800e308 	.word	0x0800e308
 8006a20:	00f42400 	.word	0x00f42400
 8006a24:	007a1200 	.word	0x007a1200
          break;
 8006a28:	bf00      	nop
 8006a2a:	e2e6      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006a2c:	bf00      	nop
 8006a2e:	e2e4      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006a30:	bf00      	nop
        break;
 8006a32:	e2e2      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006a34:	4bac      	ldr	r3, [pc, #688]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3a:	f003 0303 	and.w	r3, r3, #3
 8006a3e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d827      	bhi.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8006a46:	a201      	add	r2, pc, #4	; (adr r2, 8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8006a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4c:	08006a5d 	.word	0x08006a5d
 8006a50:	08006a65 	.word	0x08006a65
 8006a54:	08006a6d 	.word	0x08006a6d
 8006a58:	08006a81 	.word	0x08006a81
          frequency = HAL_RCC_GetPCLK2Freq();
 8006a5c:	f7ff fb02 	bl	8006064 <HAL_RCC_GetPCLK2Freq>
 8006a60:	61f8      	str	r0, [r7, #28]
          break;
 8006a62:	e01d      	b.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a64:	f7ff fa52 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006a68:	61f8      	str	r0, [r7, #28]
          break;
 8006a6a:	e019      	b.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a6c:	4b9e      	ldr	r3, [pc, #632]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a78:	d10f      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 8006a7a:	4b9c      	ldr	r3, [pc, #624]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006a7c:	61fb      	str	r3, [r7, #28]
          break;
 8006a7e:	e00c      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a80:	4b99      	ldr	r3, [pc, #612]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d107      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8006a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a92:	61fb      	str	r3, [r7, #28]
          break;
 8006a94:	e003      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 8006a96:	bf00      	nop
 8006a98:	e2af      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006a9a:	bf00      	nop
 8006a9c:	e2ad      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006a9e:	bf00      	nop
        break;
 8006aa0:	e2ab      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006aa2:	4b91      	ldr	r3, [pc, #580]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa8:	f003 030c 	and.w	r3, r3, #12
 8006aac:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	2b0c      	cmp	r3, #12
 8006ab2:	d83a      	bhi.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006ab4:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8006ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aba:	bf00      	nop
 8006abc:	08006af1 	.word	0x08006af1
 8006ac0:	08006b2b 	.word	0x08006b2b
 8006ac4:	08006b2b 	.word	0x08006b2b
 8006ac8:	08006b2b 	.word	0x08006b2b
 8006acc:	08006af9 	.word	0x08006af9
 8006ad0:	08006b2b 	.word	0x08006b2b
 8006ad4:	08006b2b 	.word	0x08006b2b
 8006ad8:	08006b2b 	.word	0x08006b2b
 8006adc:	08006b01 	.word	0x08006b01
 8006ae0:	08006b2b 	.word	0x08006b2b
 8006ae4:	08006b2b 	.word	0x08006b2b
 8006ae8:	08006b2b 	.word	0x08006b2b
 8006aec:	08006b15 	.word	0x08006b15
          frequency = HAL_RCC_GetPCLK1Freq();
 8006af0:	f7ff faa2 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8006af4:	61f8      	str	r0, [r7, #28]
          break;
 8006af6:	e01d      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8006af8:	f7ff fa08 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006afc:	61f8      	str	r0, [r7, #28]
          break;
 8006afe:	e019      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b00:	4b79      	ldr	r3, [pc, #484]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b0c:	d10f      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 8006b0e:	4b77      	ldr	r3, [pc, #476]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006b10:	61fb      	str	r3, [r7, #28]
          break;
 8006b12:	e00c      	b.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b14:	4b74      	ldr	r3, [pc, #464]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d107      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 8006b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b26:	61fb      	str	r3, [r7, #28]
          break;
 8006b28:	e003      	b.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 8006b2a:	bf00      	nop
 8006b2c:	e265      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006b2e:	bf00      	nop
 8006b30:	e263      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006b32:	bf00      	nop
        break;
 8006b34:	e261      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006b36:	4b6c      	ldr	r3, [pc, #432]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b40:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	2b10      	cmp	r3, #16
 8006b46:	d00d      	beq.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8006b48:	2b10      	cmp	r3, #16
 8006b4a:	d802      	bhi.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d005      	beq.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8006b50:	e024      	b.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	d00a      	beq.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8006b56:	2b30      	cmp	r3, #48	; 0x30
 8006b58:	d012      	beq.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 8006b5a:	e01f      	b.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b5c:	f7ff fa6c 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8006b60:	61f8      	str	r0, [r7, #28]
          break;
 8006b62:	e01b      	b.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b64:	f7ff f9d2 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006b68:	61f8      	str	r0, [r7, #28]
          break;
 8006b6a:	e017      	b.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b6c:	4b5e      	ldr	r3, [pc, #376]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b78:	d10d      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 8006b7a:	4b5c      	ldr	r3, [pc, #368]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006b7c:	61fb      	str	r3, [r7, #28]
          break;
 8006b7e:	e00a      	b.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b80:	4b59      	ldr	r3, [pc, #356]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d105      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 8006b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b92:	61fb      	str	r3, [r7, #28]
          break;
 8006b94:	e001      	b.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8006b96:	bf00      	nop
 8006b98:	e22f      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006b9a:	bf00      	nop
        break;
 8006b9c:	e22d      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006b9e:	4b52      	ldr	r3, [pc, #328]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ba8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	d00d      	beq.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d802      	bhi.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 8006bb8:	e024      	b.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 8006bba:	2b80      	cmp	r3, #128	; 0x80
 8006bbc:	d00a      	beq.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8006bbe:	2bc0      	cmp	r3, #192	; 0xc0
 8006bc0:	d012      	beq.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 8006bc2:	e01f      	b.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006bc4:	f7ff fa38 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8006bc8:	61f8      	str	r0, [r7, #28]
          break;
 8006bca:	e01b      	b.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006bcc:	f7ff f99e 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006bd0:	61f8      	str	r0, [r7, #28]
          break;
 8006bd2:	e017      	b.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bd4:	4b44      	ldr	r3, [pc, #272]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be0:	d10d      	bne.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 8006be2:	4b42      	ldr	r3, [pc, #264]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006be4:	61fb      	str	r3, [r7, #28]
          break;
 8006be6:	e00a      	b.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006be8:	4b3f      	ldr	r3, [pc, #252]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d105      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 8006bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bfa:	61fb      	str	r3, [r7, #28]
          break;
 8006bfc:	e001      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 8006bfe:	bf00      	nop
 8006c00:	e1fb      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006c02:	bf00      	nop
        break;
 8006c04:	e1f9      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006c06:	4b38      	ldr	r3, [pc, #224]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c10:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c18:	d010      	beq.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8006c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c1e:	d802      	bhi.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d007      	beq.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 8006c24:	e026      	b.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 8006c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c2a:	d00b      	beq.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c30:	d012      	beq.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 8006c32:	e01f      	b.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c34:	f7ff fa00 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8006c38:	61f8      	str	r0, [r7, #28]
          break;
 8006c3a:	e01b      	b.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c3c:	f7ff f966 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006c40:	61f8      	str	r0, [r7, #28]
          break;
 8006c42:	e017      	b.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c44:	4b28      	ldr	r3, [pc, #160]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c50:	d10d      	bne.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 8006c52:	4b26      	ldr	r3, [pc, #152]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006c54:	61fb      	str	r3, [r7, #28]
          break;
 8006c56:	e00a      	b.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c58:	4b23      	ldr	r3, [pc, #140]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d105      	bne.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 8006c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c6a:	61fb      	str	r3, [r7, #28]
          break;
 8006c6c:	e001      	b.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 8006c6e:	bf00      	nop
 8006c70:	e1c3      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006c72:	bf00      	nop
        break;
 8006c74:	e1c1      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006c76:	4b1c      	ldr	r3, [pc, #112]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c80:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c88:	d010      	beq.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8006c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c8e:	d802      	bhi.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d007      	beq.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8006c94:	e026      	b.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 8006c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c9a:	d00b      	beq.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8006c9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ca0:	d012      	beq.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 8006ca2:	e01f      	b.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ca4:	f7ff f9c8 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8006ca8:	61f8      	str	r0, [r7, #28]
          break;
 8006caa:	e01b      	b.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006cac:	f7ff f92e 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006cb0:	61f8      	str	r0, [r7, #28]
          break;
 8006cb2:	e017      	b.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cb4:	4b0c      	ldr	r3, [pc, #48]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cc0:	d10d      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006cc4:	61fb      	str	r3, [r7, #28]
          break;
 8006cc6:	e00a      	b.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006cc8:	4b07      	ldr	r3, [pc, #28]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d105      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 8006cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cda:	61fb      	str	r3, [r7, #28]
          break;
 8006cdc:	e001      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 8006cde:	bf00      	nop
 8006ce0:	e18b      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006ce2:	bf00      	nop
        break;
 8006ce4:	e189      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006ce6:	bf00      	nop
 8006ce8:	40021000 	.word	0x40021000
 8006cec:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006cf0:	4bae      	ldr	r3, [pc, #696]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cfa:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d02:	d02f      	beq.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8006d04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d08:	d003      	beq.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006d0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d0e:	d004      	beq.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 8006d10:	e050      	b.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d12:	f7ff f8fb 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006d16:	61f8      	str	r0, [r7, #28]
          break;
 8006d18:	e04c      	b.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8006d1a:	4ba4      	ldr	r3, [pc, #656]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d043      	beq.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006d26:	4ba1      	ldr	r3, [pc, #644]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	0a1b      	lsrs	r3, r3, #8
 8006d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d30:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	fb02 f203 	mul.w	r2, r2, r3
 8006d3a:	4b9c      	ldr	r3, [pc, #624]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	091b      	lsrs	r3, r3, #4
 8006d40:	f003 0307 	and.w	r3, r3, #7
 8006d44:	3301      	adds	r3, #1
 8006d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d4a:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006d4c:	4b97      	ldr	r3, [pc, #604]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	0e5b      	lsrs	r3, r3, #25
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	3301      	adds	r3, #1
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d60:	61fb      	str	r3, [r7, #28]
          break;
 8006d62:	e024      	b.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8006d64:	4b91      	ldr	r3, [pc, #580]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d020      	beq.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006d70:	4b8e      	ldr	r3, [pc, #568]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	0a1b      	lsrs	r3, r3, #8
 8006d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d7a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	fb02 f203 	mul.w	r2, r2, r3
 8006d84:	4b89      	ldr	r3, [pc, #548]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	091b      	lsrs	r3, r3, #4
 8006d8a:	f003 0307 	and.w	r3, r3, #7
 8006d8e:	3301      	adds	r3, #1
 8006d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d94:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8006d96:	4b85      	ldr	r3, [pc, #532]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	0e5b      	lsrs	r3, r3, #25
 8006d9c:	f003 0303 	and.w	r3, r3, #3
 8006da0:	3301      	adds	r3, #1
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006daa:	61fb      	str	r3, [r7, #28]
          break;
 8006dac:	e001      	b.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 8006dae:	bf00      	nop
 8006db0:	e123      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006db2:	bf00      	nop
        break;
 8006db4:	e121      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006db6:	4b7d      	ldr	r3, [pc, #500]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dc0:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d103      	bne.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006dc8:	f7ff f94c 	bl	8006064 <HAL_RCC_GetPCLK2Freq>
 8006dcc:	61f8      	str	r0, [r7, #28]
        break;
 8006dce:	e114      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 8006dd0:	f7ff f89c 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006dd4:	61f8      	str	r0, [r7, #28]
        break;
 8006dd6:	e110      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006dd8:	4b74      	ldr	r3, [pc, #464]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dde:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006de2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dea:	d009      	beq.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8006dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006df0:	d00a      	beq.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d000      	beq.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 8006df6:	e011      	b.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006df8:	f7ff f91e 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8006dfc:	61f8      	str	r0, [r7, #28]
          break;
 8006dfe:	e00d      	b.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e00:	f7ff f884 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006e04:	61f8      	str	r0, [r7, #28]
          break;
 8006e06:	e009      	b.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e08:	4b68      	ldr	r3, [pc, #416]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e14:	d101      	bne.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 8006e16:	4b66      	ldr	r3, [pc, #408]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006e18:	61fb      	str	r3, [r7, #28]
          break;
 8006e1a:	bf00      	nop
        break;
 8006e1c:	e0ed      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006e1e:	4b63      	ldr	r3, [pc, #396]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e28:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e30:	d009      	beq.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e36:	d00a      	beq.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d000      	beq.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8006e3c:	e011      	b.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e3e:	f7ff f8fb 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8006e42:	61f8      	str	r0, [r7, #28]
          break;
 8006e44:	e00d      	b.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e46:	f7ff f861 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006e4a:	61f8      	str	r0, [r7, #28]
          break;
 8006e4c:	e009      	b.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e4e:	4b57      	ldr	r3, [pc, #348]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e5a:	d101      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 8006e5c:	4b54      	ldr	r3, [pc, #336]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006e5e:	61fb      	str	r3, [r7, #28]
          break;
 8006e60:	bf00      	nop
        break;
 8006e62:	e0ca      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006e64:	4b51      	ldr	r3, [pc, #324]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e6e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e76:	d009      	beq.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006e78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e7c:	d00a      	beq.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d000      	beq.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 8006e82:	e011      	b.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e84:	f7ff f8d8 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8006e88:	61f8      	str	r0, [r7, #28]
          break;
 8006e8a:	e00d      	b.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e8c:	f7ff f83e 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8006e90:	61f8      	str	r0, [r7, #28]
          break;
 8006e92:	e009      	b.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e94:	4b45      	ldr	r3, [pc, #276]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea0:	d101      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 8006ea2:	4b43      	ldr	r3, [pc, #268]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006ea4:	61fb      	str	r3, [r7, #28]
          break;
 8006ea6:	bf00      	nop
        break;
 8006ea8:	e0a7      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006eaa:	4b40      	ldr	r3, [pc, #256]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006eb4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ebc:	d010      	beq.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8006ebe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ec2:	d802      	bhi.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d007      	beq.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 8006ec8:	e02f      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 8006eca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ece:	d012      	beq.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8006ed0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ed4:	d019      	beq.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8006ed6:	e028      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ed8:	f7ff f8ae 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8006edc:	61f8      	str	r0, [r7, #28]
          break;
 8006ede:	e024      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006ee0:	4b32      	ldr	r3, [pc, #200]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d118      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
              frequency = LSI_VALUE;
 8006eee:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ef2:	61fb      	str	r3, [r7, #28]
          break;
 8006ef4:	e014      	b.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ef6:	4b2d      	ldr	r3, [pc, #180]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f02:	d10f      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 8006f04:	4b2a      	ldr	r3, [pc, #168]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006f06:	61fb      	str	r3, [r7, #28]
          break;
 8006f08:	e00c      	b.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f0a:	4b28      	ldr	r3, [pc, #160]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d107      	bne.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 8006f18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f1c:	61fb      	str	r3, [r7, #28]
          break;
 8006f1e:	e003      	b.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 8006f20:	bf00      	nop
 8006f22:	e06a      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006f24:	bf00      	nop
 8006f26:	e068      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006f28:	bf00      	nop
        break;
 8006f2a:	e066      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006f2c:	4b1f      	ldr	r3, [pc, #124]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f32:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006f36:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f3e:	d010      	beq.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f44:	d802      	bhi.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d007      	beq.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 8006f4a:	e034      	b.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 8006f4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f50:	d012      	beq.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8006f52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f56:	d019      	beq.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 8006f58:	e02d      	b.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f5a:	f7ff f86d 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8006f5e:	61f8      	str	r0, [r7, #28]
          break;
 8006f60:	e029      	b.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006f62:	4b12      	ldr	r3, [pc, #72]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f68:	f003 0302 	and.w	r3, r3, #2
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d118      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = LSI_VALUE;
 8006f70:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006f74:	61fb      	str	r3, [r7, #28]
          break;
 8006f76:	e014      	b.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f78:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f84:	d10f      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 8006f86:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006f88:	61fb      	str	r3, [r7, #28]
          break;
 8006f8a:	e00c      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f8c:	4b07      	ldr	r3, [pc, #28]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d10c      	bne.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 8006f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f9e:	61fb      	str	r3, [r7, #28]
          break;
 8006fa0:	e008      	b.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 8006fa2:	bf00      	nop
 8006fa4:	e029      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8006fa6:	bf00      	nop
 8006fa8:	e027      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006faa:	bf00      	nop
 8006fac:	40021000 	.word	0x40021000
 8006fb0:	00f42400 	.word	0x00f42400
          break;
 8006fb4:	bf00      	nop
        break;
 8006fb6:	e020      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8006fb8:	4b12      	ldr	r3, [pc, #72]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fbe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fc2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 8006fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fce:	d004      	beq.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 8006fd0:	e00d      	b.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fd2:	f7ff f831 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8006fd6:	61f8      	str	r0, [r7, #28]
          break;
 8006fd8:	e009      	b.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fda:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe6:	d101      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 8006fe8:	4b07      	ldr	r3, [pc, #28]	; (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 8006fea:	61fb      	str	r3, [r7, #28]
          break;
 8006fec:	bf00      	nop
        break;
 8006fee:	e004      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8006ff0:	bf00      	nop
 8006ff2:	e002      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8006ff4:	bf00      	nop
 8006ff6:	e000      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8006ff8:	bf00      	nop
    }
  }

  return(frequency);
 8006ffa:	69fb      	ldr	r3, [r7, #28]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3720      	adds	r7, #32
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	40021000 	.word	0x40021000
 8007008:	00f42400 	.word	0x00f42400

0800700c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800700c:	b480      	push	{r7}
 800700e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007010:	4b05      	ldr	r3, [pc, #20]	; (8007028 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a04      	ldr	r2, [pc, #16]	; (8007028 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007016:	f043 0304 	orr.w	r3, r3, #4
 800701a:	6013      	str	r3, [r2, #0]
}
 800701c:	bf00      	nop
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	40021000 	.word	0x40021000

0800702c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800703a:	4b73      	ldr	r3, [pc, #460]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f003 0303 	and.w	r3, r3, #3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d018      	beq.n	8007078 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007046:	4b70      	ldr	r3, [pc, #448]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	f003 0203 	and.w	r2, r3, #3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	429a      	cmp	r2, r3
 8007054:	d10d      	bne.n	8007072 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
       ||
 800705a:	2b00      	cmp	r3, #0
 800705c:	d009      	beq.n	8007072 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800705e:	4b6a      	ldr	r3, [pc, #424]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	091b      	lsrs	r3, r3, #4
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
       ||
 800706e:	429a      	cmp	r2, r3
 8007070:	d044      	beq.n	80070fc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	73fb      	strb	r3, [r7, #15]
 8007076:	e041      	b.n	80070fc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d00c      	beq.n	800709a <RCCEx_PLLSAI1_Config+0x6e>
 8007080:	2b03      	cmp	r3, #3
 8007082:	d013      	beq.n	80070ac <RCCEx_PLLSAI1_Config+0x80>
 8007084:	2b01      	cmp	r3, #1
 8007086:	d120      	bne.n	80070ca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007088:	4b5f      	ldr	r3, [pc, #380]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d11d      	bne.n	80070d0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007098:	e01a      	b.n	80070d0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800709a:	4b5b      	ldr	r3, [pc, #364]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d116      	bne.n	80070d4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070aa:	e013      	b.n	80070d4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80070ac:	4b56      	ldr	r3, [pc, #344]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10f      	bne.n	80070d8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80070b8:	4b53      	ldr	r3, [pc, #332]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d109      	bne.n	80070d8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80070c8:	e006      	b.n	80070d8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	73fb      	strb	r3, [r7, #15]
      break;
 80070ce:	e004      	b.n	80070da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80070d0:	bf00      	nop
 80070d2:	e002      	b.n	80070da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80070d4:	bf00      	nop
 80070d6:	e000      	b.n	80070da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80070d8:	bf00      	nop
    }

    if(status == HAL_OK)
 80070da:	7bfb      	ldrb	r3, [r7, #15]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10d      	bne.n	80070fc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80070e0:	4b49      	ldr	r3, [pc, #292]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6819      	ldr	r1, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	011b      	lsls	r3, r3, #4
 80070f4:	430b      	orrs	r3, r1
 80070f6:	4944      	ldr	r1, [pc, #272]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d17d      	bne.n	80071fe <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007102:	4b41      	ldr	r3, [pc, #260]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a40      	ldr	r2, [pc, #256]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007108:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800710c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800710e:	f7fb fc5b 	bl	80029c8 <HAL_GetTick>
 8007112:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007114:	e009      	b.n	800712a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007116:	f7fb fc57 	bl	80029c8 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	2b02      	cmp	r3, #2
 8007122:	d902      	bls.n	800712a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	73fb      	strb	r3, [r7, #15]
        break;
 8007128:	e005      	b.n	8007136 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800712a:	4b37      	ldr	r3, [pc, #220]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1ef      	bne.n	8007116 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d160      	bne.n	80071fe <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d111      	bne.n	8007166 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007142:	4b31      	ldr	r3, [pc, #196]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800714a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	6892      	ldr	r2, [r2, #8]
 8007152:	0211      	lsls	r1, r2, #8
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	68d2      	ldr	r2, [r2, #12]
 8007158:	0912      	lsrs	r2, r2, #4
 800715a:	0452      	lsls	r2, r2, #17
 800715c:	430a      	orrs	r2, r1
 800715e:	492a      	ldr	r1, [pc, #168]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007160:	4313      	orrs	r3, r2
 8007162:	610b      	str	r3, [r1, #16]
 8007164:	e027      	b.n	80071b6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d112      	bne.n	8007192 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800716c:	4b26      	ldr	r3, [pc, #152]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007174:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	6892      	ldr	r2, [r2, #8]
 800717c:	0211      	lsls	r1, r2, #8
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6912      	ldr	r2, [r2, #16]
 8007182:	0852      	lsrs	r2, r2, #1
 8007184:	3a01      	subs	r2, #1
 8007186:	0552      	lsls	r2, r2, #21
 8007188:	430a      	orrs	r2, r1
 800718a:	491f      	ldr	r1, [pc, #124]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 800718c:	4313      	orrs	r3, r2
 800718e:	610b      	str	r3, [r1, #16]
 8007190:	e011      	b.n	80071b6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007192:	4b1d      	ldr	r3, [pc, #116]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800719a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	6892      	ldr	r2, [r2, #8]
 80071a2:	0211      	lsls	r1, r2, #8
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6952      	ldr	r2, [r2, #20]
 80071a8:	0852      	lsrs	r2, r2, #1
 80071aa:	3a01      	subs	r2, #1
 80071ac:	0652      	lsls	r2, r2, #25
 80071ae:	430a      	orrs	r2, r1
 80071b0:	4915      	ldr	r1, [pc, #84]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80071b6:	4b14      	ldr	r3, [pc, #80]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a13      	ldr	r2, [pc, #76]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80071bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c2:	f7fb fc01 	bl	80029c8 <HAL_GetTick>
 80071c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80071c8:	e009      	b.n	80071de <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071ca:	f7fb fbfd 	bl	80029c8 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d902      	bls.n	80071de <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	73fb      	strb	r3, [r7, #15]
          break;
 80071dc:	e005      	b.n	80071ea <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80071de:	4b0a      	ldr	r3, [pc, #40]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0ef      	beq.n	80071ca <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d106      	bne.n	80071fe <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80071f0:	4b05      	ldr	r3, [pc, #20]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	4903      	ldr	r1, [pc, #12]	; (8007208 <RCCEx_PLLSAI1_Config+0x1dc>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	40021000 	.word	0x40021000

0800720c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800721a:	4b68      	ldr	r3, [pc, #416]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d018      	beq.n	8007258 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007226:	4b65      	ldr	r3, [pc, #404]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f003 0203 	and.w	r2, r3, #3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	429a      	cmp	r2, r3
 8007234:	d10d      	bne.n	8007252 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
       ||
 800723a:	2b00      	cmp	r3, #0
 800723c:	d009      	beq.n	8007252 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800723e:	4b5f      	ldr	r3, [pc, #380]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	091b      	lsrs	r3, r3, #4
 8007244:	f003 0307 	and.w	r3, r3, #7
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
       ||
 800724e:	429a      	cmp	r2, r3
 8007250:	d044      	beq.n	80072dc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	73fb      	strb	r3, [r7, #15]
 8007256:	e041      	b.n	80072dc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d00c      	beq.n	800727a <RCCEx_PLLSAI2_Config+0x6e>
 8007260:	2b03      	cmp	r3, #3
 8007262:	d013      	beq.n	800728c <RCCEx_PLLSAI2_Config+0x80>
 8007264:	2b01      	cmp	r3, #1
 8007266:	d120      	bne.n	80072aa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007268:	4b54      	ldr	r3, [pc, #336]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d11d      	bne.n	80072b0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007278:	e01a      	b.n	80072b0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800727a:	4b50      	ldr	r3, [pc, #320]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007282:	2b00      	cmp	r3, #0
 8007284:	d116      	bne.n	80072b4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800728a:	e013      	b.n	80072b4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800728c:	4b4b      	ldr	r3, [pc, #300]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10f      	bne.n	80072b8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007298:	4b48      	ldr	r3, [pc, #288]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d109      	bne.n	80072b8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80072a8:	e006      	b.n	80072b8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	73fb      	strb	r3, [r7, #15]
      break;
 80072ae:	e004      	b.n	80072ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80072b0:	bf00      	nop
 80072b2:	e002      	b.n	80072ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80072b4:	bf00      	nop
 80072b6:	e000      	b.n	80072ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80072b8:	bf00      	nop
    }

    if(status == HAL_OK)
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10d      	bne.n	80072dc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80072c0:	4b3e      	ldr	r3, [pc, #248]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6819      	ldr	r1, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	011b      	lsls	r3, r3, #4
 80072d4:	430b      	orrs	r3, r1
 80072d6:	4939      	ldr	r1, [pc, #228]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d167      	bne.n	80073b2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80072e2:	4b36      	ldr	r3, [pc, #216]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a35      	ldr	r2, [pc, #212]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80072e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ee:	f7fb fb6b 	bl	80029c8 <HAL_GetTick>
 80072f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80072f4:	e009      	b.n	800730a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80072f6:	f7fb fb67 	bl	80029c8 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b02      	cmp	r3, #2
 8007302:	d902      	bls.n	800730a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	73fb      	strb	r3, [r7, #15]
        break;
 8007308:	e005      	b.n	8007316 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800730a:	4b2c      	ldr	r3, [pc, #176]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1ef      	bne.n	80072f6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d14a      	bne.n	80073b2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d111      	bne.n	8007346 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007322:	4b26      	ldr	r3, [pc, #152]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800732a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	6892      	ldr	r2, [r2, #8]
 8007332:	0211      	lsls	r1, r2, #8
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	68d2      	ldr	r2, [r2, #12]
 8007338:	0912      	lsrs	r2, r2, #4
 800733a:	0452      	lsls	r2, r2, #17
 800733c:	430a      	orrs	r2, r1
 800733e:	491f      	ldr	r1, [pc, #124]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8007340:	4313      	orrs	r3, r2
 8007342:	614b      	str	r3, [r1, #20]
 8007344:	e011      	b.n	800736a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007346:	4b1d      	ldr	r3, [pc, #116]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800734e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6892      	ldr	r2, [r2, #8]
 8007356:	0211      	lsls	r1, r2, #8
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6912      	ldr	r2, [r2, #16]
 800735c:	0852      	lsrs	r2, r2, #1
 800735e:	3a01      	subs	r2, #1
 8007360:	0652      	lsls	r2, r2, #25
 8007362:	430a      	orrs	r2, r1
 8007364:	4915      	ldr	r1, [pc, #84]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8007366:	4313      	orrs	r3, r2
 8007368:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800736a:	4b14      	ldr	r3, [pc, #80]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a13      	ldr	r2, [pc, #76]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8007370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007374:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007376:	f7fb fb27 	bl	80029c8 <HAL_GetTick>
 800737a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800737c:	e009      	b.n	8007392 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800737e:	f7fb fb23 	bl	80029c8 <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	2b02      	cmp	r3, #2
 800738a:	d902      	bls.n	8007392 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	73fb      	strb	r3, [r7, #15]
          break;
 8007390:	e005      	b.n	800739e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007392:	4b0a      	ldr	r3, [pc, #40]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0ef      	beq.n	800737e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d106      	bne.n	80073b2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80073a4:	4b05      	ldr	r3, [pc, #20]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80073a6:	695a      	ldr	r2, [r3, #20]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	4903      	ldr	r1, [pc, #12]	; (80073bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	40021000 	.word	0x40021000

080073c0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b089      	sub	sp, #36	; 0x24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80073ca:	2300      	movs	r3, #0
 80073cc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073dc:	d10c      	bne.n	80073f8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80073de:	4b62      	ldr	r3, [pc, #392]	; (8007568 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80073e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80073e8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80073f0:	d112      	bne.n	8007418 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80073f2:	4b5e      	ldr	r3, [pc, #376]	; (800756c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80073f4:	61fb      	str	r3, [r7, #28]
 80073f6:	e00f      	b.n	8007418 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073fe:	d10b      	bne.n	8007418 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007400:	4b59      	ldr	r3, [pc, #356]	; (8007568 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8007402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007406:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800740a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007412:	d101      	bne.n	8007418 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007414:	4b55      	ldr	r3, [pc, #340]	; (800756c <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8007416:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	2b00      	cmp	r3, #0
 800741c:	f040 809c 	bne.w	8007558 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
  {
    pllvco = InputFrequency;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800742a:	d003      	beq.n	8007434 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007432:	d12d      	bne.n	8007490 <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8007434:	4b4c      	ldr	r3, [pc, #304]	; (8007568 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 808b 	beq.w	8007558 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007442:	4b49      	ldr	r3, [pc, #292]	; (8007568 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	091b      	lsrs	r3, r3, #4
 8007448:	f003 0307 	and.w	r3, r3, #7
 800744c:	3301      	adds	r3, #1
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	fbb2 f3f3 	udiv	r3, r2, r3
 8007454:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007456:	4b44      	ldr	r3, [pc, #272]	; (8007568 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	0a1b      	lsrs	r3, r3, #8
 800745c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007460:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10a      	bne.n	800747e <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007468:	4b3f      	ldr	r3, [pc, #252]	; (8007568 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <RCCEx_GetSAIxPeriphCLKFreq+0xba>
          {
            pllp = 17U;
 8007474:	2311      	movs	r3, #17
 8007476:	617b      	str	r3, [r7, #20]
 8007478:	e001      	b.n	800747e <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          }
          else
          {
            pllp = 7U;
 800747a:	2307      	movs	r3, #7
 800747c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	fb02 f203 	mul.w	r2, r2, r3
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	fbb2 f3f3 	udiv	r3, r2, r3
 800748c:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 800748e:	e063      	b.n	8007558 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d12c      	bne.n	80074f0 <RCCEx_GetSAIxPeriphCLKFreq+0x130>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8007496:	4b34      	ldr	r3, [pc, #208]	; (8007568 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d05a      	beq.n	8007558 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80074a2:	4b31      	ldr	r3, [pc, #196]	; (8007568 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	091b      	lsrs	r3, r3, #4
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	3301      	adds	r3, #1
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b4:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80074b6:	4b2c      	ldr	r3, [pc, #176]	; (8007568 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	0a1b      	lsrs	r3, r3, #8
 80074bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10a      	bne.n	80074de <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80074c8:	4b27      	ldr	r3, [pc, #156]	; (8007568 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <RCCEx_GetSAIxPeriphCLKFreq+0x11a>
          {
            pllp = 17U;
 80074d4:	2311      	movs	r3, #17
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	e001      	b.n	80074de <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          }
          else
          {
            pllp = 7U;
 80074da:	2307      	movs	r3, #7
 80074dc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	fb02 f203 	mul.w	r2, r2, r3
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ec:	61fb      	str	r3, [r7, #28]
 80074ee:	e033      	b.n	8007558 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074f6:	d003      	beq.n	8007500 <RCCEx_GetSAIxPeriphCLKFreq+0x140>
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074fe:	d12b      	bne.n	8007558 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8007500:	4b19      	ldr	r3, [pc, #100]	; (8007568 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d025      	beq.n	8007558 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800750c:	4b16      	ldr	r3, [pc, #88]	; (8007568 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	091b      	lsrs	r3, r3, #4
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	3301      	adds	r3, #1
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	fbb2 f3f3 	udiv	r3, r2, r3
 800751e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007520:	4b11      	ldr	r3, [pc, #68]	; (8007568 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	0a1b      	lsrs	r3, r3, #8
 8007526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800752a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10a      	bne.n	8007548 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8007532:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <RCCEx_GetSAIxPeriphCLKFreq+0x184>
          {
            pllp = 17U;
 800753e:	2311      	movs	r3, #17
 8007540:	617b      	str	r3, [r7, #20]
 8007542:	e001      	b.n	8007548 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          }
          else
          {
            pllp = 7U;
 8007544:	2307      	movs	r3, #7
 8007546:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	fb02 f203 	mul.w	r2, r2, r3
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	fbb2 f3f3 	udiv	r3, r2, r3
 8007556:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007558:	69fb      	ldr	r3, [r7, #28]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3724      	adds	r7, #36	; 0x24
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	40021000 	.word	0x40021000
 800756c:	001fff68 	.word	0x001fff68

08007570 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d06f      	beq.n	8007662 <HAL_RTC_Init+0xf2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d106      	bne.n	800759c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7fa fb0a 	bl	8001bb0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	22ca      	movs	r2, #202	; 0xca
 80075aa:	625a      	str	r2, [r3, #36]	; 0x24
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2253      	movs	r2, #83	; 0x53
 80075b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fa4c 	bl	8007a52 <RTC_EnterInitMode>
 80075ba:	4603      	mov	r3, r0
 80075bc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d14e      	bne.n	8007662 <HAL_RTC_Init+0xf2>
#if defined(STM32L412xx) || defined(STM32L422xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6812      	ldr	r2, [r2, #0]
 80075ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075d6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6899      	ldr	r1, [r3, #8]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	431a      	orrs	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	431a      	orrs	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	68d2      	ldr	r2, [r2, #12]
 80075fe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6919      	ldr	r1, [r3, #16]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	041a      	lsls	r2, r3, #16
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fa4f 	bl	8007ab8 <RTC_ExitInitMode>
 800761a:	4603      	mov	r3, r0
 800761c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d11e      	bne.n	8007662 <HAL_RTC_Init+0xf2>
      {
#if defined(STM32L412xx) || defined(STM32L422xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f022 0203 	bic.w	r2, r2, #3
 8007632:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	69da      	ldr	r2, [r3, #28]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	430a      	orrs	r2, r1
 800764a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	22ff      	movs	r2, #255	; 0xff
 8007652:	625a      	str	r2, [r3, #36]	; 0x24

        if (status == HAL_OK)
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d103      	bne.n	8007662 <HAL_RTC_Init+0xf2>
        {
          hrtc->State = HAL_RTC_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
      }
    }
  }

  return status;
 8007662:	7bfb      	ldrb	r3, [r7, #15]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800766c:	b590      	push	{r4, r7, lr}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d101      	bne.n	8007686 <HAL_RTC_SetTime+0x1a>
 8007682:	2302      	movs	r3, #2
 8007684:	e08b      	b.n	800779e <HAL_RTC_SetTime+0x132>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2202      	movs	r2, #2
 8007692:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	22ca      	movs	r2, #202	; 0xca
 800769c:	625a      	str	r2, [r3, #36]	; 0x24
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2253      	movs	r2, #83	; 0x53
 80076a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 f9d3 	bl	8007a52 <RTC_EnterInitMode>
 80076ac:	4603      	mov	r3, r0
 80076ae:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80076b0:	7cfb      	ldrb	r3, [r7, #19]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d163      	bne.n	800777e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d126      	bne.n	800770a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d102      	bne.n	80076d0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2200      	movs	r2, #0
 80076ce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fa2d 	bl	8007b34 <RTC_ByteToBcd2>
 80076da:	4603      	mov	r3, r0
 80076dc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	785b      	ldrb	r3, [r3, #1]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 fa26 	bl	8007b34 <RTC_ByteToBcd2>
 80076e8:	4603      	mov	r3, r0
 80076ea:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80076ec:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	789b      	ldrb	r3, [r3, #2]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 fa1e 	bl	8007b34 <RTC_ByteToBcd2>
 80076f8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80076fa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	78db      	ldrb	r3, [r3, #3]
 8007702:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	e018      	b.n	800773c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007714:	2b00      	cmp	r3, #0
 8007716:	d102      	bne.n	800771e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2200      	movs	r2, #0
 800771c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	785b      	ldrb	r3, [r3, #1]
 8007728:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800772a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007730:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	78db      	ldrb	r3, [r3, #3]
 8007736:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007738:	4313      	orrs	r3, r2
 800773a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007746:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800774a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800775a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6899      	ldr	r1, [r3, #8]
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	431a      	orrs	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	430a      	orrs	r2, r1
 8007772:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f99f 	bl	8007ab8 <RTC_ExitInitMode>
 800777a:	4603      	mov	r3, r0
 800777c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	22ff      	movs	r2, #255	; 0xff
 8007784:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007786:	7cfb      	ldrb	r3, [r7, #19]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d103      	bne.n	8007794 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800779c:	7cfb      	ldrb	r3, [r7, #19]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	371c      	adds	r7, #28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd90      	pop	{r4, r7, pc}

080077a6 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b086      	sub	sp, #24
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	60f8      	str	r0, [r7, #12]
 80077ae:	60b9      	str	r1, [r7, #8]
 80077b0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80077d4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80077d8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	0c1b      	lsrs	r3, r3, #16
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	0a1b      	lsrs	r3, r3, #8
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007802:	b2da      	uxtb	r2, r3
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	0d9b      	lsrs	r3, r3, #22
 800780c:	b2db      	uxtb	r3, r3
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	b2da      	uxtb	r2, r3
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d11a      	bne.n	8007854 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	4618      	mov	r0, r3
 8007824:	f000 f9a6 	bl	8007b74 <RTC_Bcd2ToByte>
 8007828:	4603      	mov	r3, r0
 800782a:	461a      	mov	r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	785b      	ldrb	r3, [r3, #1]
 8007834:	4618      	mov	r0, r3
 8007836:	f000 f99d 	bl	8007b74 <RTC_Bcd2ToByte>
 800783a:	4603      	mov	r3, r0
 800783c:	461a      	mov	r2, r3
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	789b      	ldrb	r3, [r3, #2]
 8007846:	4618      	mov	r0, r3
 8007848:	f000 f994 	bl	8007b74 <RTC_Bcd2ToByte>
 800784c:	4603      	mov	r3, r0
 800784e:	461a      	mov	r2, r3
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3718      	adds	r7, #24
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800785e:	b590      	push	{r4, r7, lr}
 8007860:	b087      	sub	sp, #28
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d101      	bne.n	8007878 <HAL_RTC_SetDate+0x1a>
 8007874:	2302      	movs	r3, #2
 8007876:	e075      	b.n	8007964 <HAL_RTC_SetDate+0x106>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10e      	bne.n	80078ac <HAL_RTC_SetDate+0x4e>
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	785b      	ldrb	r3, [r3, #1]
 8007892:	f003 0310 	and.w	r3, r3, #16
 8007896:	2b00      	cmp	r3, #0
 8007898:	d008      	beq.n	80078ac <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	785b      	ldrb	r3, [r3, #1]
 800789e:	f023 0310 	bic.w	r3, r3, #16
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	330a      	adds	r3, #10
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d11c      	bne.n	80078ec <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	78db      	ldrb	r3, [r3, #3]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 f93c 	bl	8007b34 <RTC_ByteToBcd2>
 80078bc:	4603      	mov	r3, r0
 80078be:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	785b      	ldrb	r3, [r3, #1]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 f935 	bl	8007b34 <RTC_ByteToBcd2>
 80078ca:	4603      	mov	r3, r0
 80078cc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80078ce:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	789b      	ldrb	r3, [r3, #2]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 f92d 	bl	8007b34 <RTC_ByteToBcd2>
 80078da:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80078dc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80078e6:	4313      	orrs	r3, r2
 80078e8:	617b      	str	r3, [r7, #20]
 80078ea:	e00e      	b.n	800790a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	78db      	ldrb	r3, [r3, #3]
 80078f0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	785b      	ldrb	r3, [r3, #1]
 80078f6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80078f8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80078fe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007906:	4313      	orrs	r3, r2
 8007908:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	22ca      	movs	r2, #202	; 0xca
 8007910:	625a      	str	r2, [r3, #36]	; 0x24
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2253      	movs	r2, #83	; 0x53
 8007918:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f000 f899 	bl	8007a52 <RTC_EnterInitMode>
 8007920:	4603      	mov	r3, r0
 8007922:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007924:	7cfb      	ldrb	r3, [r7, #19]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10c      	bne.n	8007944 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007934:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007938:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 f8bc 	bl	8007ab8 <RTC_ExitInitMode>
 8007940:	4603      	mov	r3, r0
 8007942:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	22ff      	movs	r2, #255	; 0xff
 800794a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800794c:	7cfb      	ldrb	r3, [r7, #19]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d103      	bne.n	800795a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007962:	7cfb      	ldrb	r3, [r7, #19]
}
 8007964:	4618      	mov	r0, r3
 8007966:	371c      	adds	r7, #28
 8007968:	46bd      	mov	sp, r7
 800796a:	bd90      	pop	{r4, r7, pc}

0800796c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007982:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007986:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	0c1b      	lsrs	r3, r3, #16
 800798c:	b2da      	uxtb	r2, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	0a1b      	lsrs	r3, r3, #8
 8007996:	b2db      	uxtb	r3, r3
 8007998:	f003 031f 	and.w	r3, r3, #31
 800799c:	b2da      	uxtb	r2, r3
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	0b5b      	lsrs	r3, r3, #13
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	f003 0307 	and.w	r3, r3, #7
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d11a      	bne.n	80079fc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	78db      	ldrb	r3, [r3, #3]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 f8d2 	bl	8007b74 <RTC_Bcd2ToByte>
 80079d0:	4603      	mov	r3, r0
 80079d2:	461a      	mov	r2, r3
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	785b      	ldrb	r3, [r3, #1]
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 f8c9 	bl	8007b74 <RTC_Bcd2ToByte>
 80079e2:	4603      	mov	r3, r0
 80079e4:	461a      	mov	r2, r3
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	789b      	ldrb	r3, [r3, #2]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 f8c0 	bl	8007b74 <RTC_Bcd2ToByte>
 80079f4:	4603      	mov	r3, r0
 80079f6:	461a      	mov	r2, r3
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3718      	adds	r7, #24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68da      	ldr	r2, [r3, #12]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a1c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007a1e:	f7fa ffd3 	bl	80029c8 <HAL_GetTick>
 8007a22:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007a24:	e009      	b.n	8007a3a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a26:	f7fa ffcf 	bl	80029c8 <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a34:	d901      	bls.n	8007a3a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e007      	b.n	8007a4a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f003 0320 	and.w	r3, r3, #32
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d0ee      	beq.n	8007a26 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d120      	bne.n	8007aae <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f04f 32ff 	mov.w	r2, #4294967295
 8007a74:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007a76:	f7fa ffa7 	bl	80029c8 <HAL_GetTick>
 8007a7a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007a7c:	e00d      	b.n	8007a9a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007a7e:	f7fa ffa3 	bl	80029c8 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a8c:	d905      	bls.n	8007a9a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2203      	movs	r2, #3
 8007a96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d102      	bne.n	8007aae <RTC_EnterInitMode+0x5c>
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d1e7      	bne.n	8007a7e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
 8007aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007ac4:	4b1a      	ldr	r3, [pc, #104]	; (8007b30 <RTC_ExitInitMode+0x78>)
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	4a19      	ldr	r2, [pc, #100]	; (8007b30 <RTC_ExitInitMode+0x78>)
 8007aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ace:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007ad0:	4b17      	ldr	r3, [pc, #92]	; (8007b30 <RTC_ExitInitMode+0x78>)
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f003 0320 	and.w	r3, r3, #32
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10c      	bne.n	8007af6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7ff ff92 	bl	8007a06 <HAL_RTC_WaitForSynchro>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d01e      	beq.n	8007b26 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2203      	movs	r2, #3
 8007aec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	73fb      	strb	r3, [r7, #15]
 8007af4:	e017      	b.n	8007b26 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007af6:	4b0e      	ldr	r3, [pc, #56]	; (8007b30 <RTC_ExitInitMode+0x78>)
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	4a0d      	ldr	r2, [pc, #52]	; (8007b30 <RTC_ExitInitMode+0x78>)
 8007afc:	f023 0320 	bic.w	r3, r3, #32
 8007b00:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7ff ff7f 	bl	8007a06 <HAL_RTC_WaitForSynchro>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d005      	beq.n	8007b1a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2203      	movs	r2, #3
 8007b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007b1a:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <RTC_ExitInitMode+0x78>)
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	4a04      	ldr	r2, [pc, #16]	; (8007b30 <RTC_ExitInitMode+0x78>)
 8007b20:	f043 0320 	orr.w	r3, r3, #32
 8007b24:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	40002800 	.word	0x40002800

08007b34 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007b46:	e005      	b.n	8007b54 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007b4e:	7afb      	ldrb	r3, [r7, #11]
 8007b50:	3b0a      	subs	r3, #10
 8007b52:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007b54:	7afb      	ldrb	r3, [r7, #11]
 8007b56:	2b09      	cmp	r3, #9
 8007b58:	d8f6      	bhi.n	8007b48 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	011b      	lsls	r3, r3, #4
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	7afb      	ldrb	r3, [r7, #11]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	b2db      	uxtb	r3, r3
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007b7e:	79fb      	ldrb	r3, [r7, #7]
 8007b80:	091b      	lsrs	r3, r3, #4
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	461a      	mov	r2, r3
 8007b86:	0092      	lsls	r2, r2, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	f003 030f 	and.w	r3, r3, #15
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
 8007b98:	4413      	add	r3, r2
 8007b9a:	b2db      	uxtb	r3, r3
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e14a      	b.n	8007e50 <HAL_SAI_Init+0x2a8>
      return HAL_ERROR;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d106      	bne.n	8007bd4 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7fa f8b2 	bl	8001d38 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f94d 	bl	8007e74 <SAI_Disable>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e135      	b.n	8007e50 <HAL_SAI_Init+0x2a8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d007      	beq.n	8007c04 <HAL_SAI_Init+0x5c>
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d302      	bcc.n	8007bfe <HAL_SAI_Init+0x56>
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d006      	beq.n	8007c0a <HAL_SAI_Init+0x62>
 8007bfc:	e008      	b.n	8007c10 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	61fb      	str	r3, [r7, #28]
      break;
 8007c02:	e008      	b.n	8007c16 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007c04:	2310      	movs	r3, #16
 8007c06:	61fb      	str	r3, [r7, #28]
      break;
 8007c08:	e005      	b.n	8007c16 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007c0a:	2320      	movs	r3, #32
 8007c0c:	61fb      	str	r3, [r7, #28]
      break;
 8007c0e:	e002      	b.n	8007c16 <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	61fb      	str	r3, [r7, #28]
      break;
 8007c14:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d81d      	bhi.n	8007c5a <HAL_SAI_Init+0xb2>
 8007c1e:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <HAL_SAI_Init+0x7c>)
 8007c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c24:	08007c35 	.word	0x08007c35
 8007c28:	08007c3b 	.word	0x08007c3b
 8007c2c:	08007c43 	.word	0x08007c43
 8007c30:	08007c4b 	.word	0x08007c4b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	617b      	str	r3, [r7, #20]
      break;
 8007c38:	e012      	b.n	8007c60 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c3e:	617b      	str	r3, [r7, #20]
      break;
 8007c40:	e00e      	b.n	8007c60 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007c42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c46:	617b      	str	r3, [r7, #20]
      break;
 8007c48:	e00a      	b.n	8007c60 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007c4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c4e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	f043 0301 	orr.w	r3, r3, #1
 8007c56:	61fb      	str	r3, [r7, #28]
      break;
 8007c58:	e002      	b.n	8007c60 <HAL_SAI_Init+0xb8>
    default :
      syncen_bits = 0;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	617b      	str	r3, [r7, #20]
      break;
 8007c5e:	bf00      	nop

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a7c      	ldr	r2, [pc, #496]	; (8007e58 <HAL_SAI_Init+0x2b0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d004      	beq.n	8007c74 <HAL_SAI_Init+0xcc>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a7b      	ldr	r2, [pc, #492]	; (8007e5c <HAL_SAI_Init+0x2b4>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d103      	bne.n	8007c7c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8007c74:	4a7a      	ldr	r2, [pc, #488]	; (8007e60 <HAL_SAI_Init+0x2b8>)
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	6013      	str	r3, [r2, #0]
 8007c7a:	e002      	b.n	8007c82 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007c7c:	4a79      	ldr	r2, [pc, #484]	; (8007e64 <HAL_SAI_Init+0x2bc>)
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	6013      	str	r3, [r2, #0]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || */
  /* STM32L496xx || STM32L4A6xx || */
  /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d038      	beq.n	8007cfc <HAL_SAI_Init+0x154>
    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a72      	ldr	r2, [pc, #456]	; (8007e58 <HAL_SAI_Init+0x2b0>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d004      	beq.n	8007c9e <HAL_SAI_Init+0xf6>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a70      	ldr	r2, [pc, #448]	; (8007e5c <HAL_SAI_Init+0x2b4>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d105      	bne.n	8007caa <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007c9e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007ca2:	f7fe fd3b 	bl	800671c <HAL_RCCEx_GetPeriphCLKFreq>
 8007ca6:	6138      	str	r0, [r7, #16]
 8007ca8:	e004      	b.n	8007cb4 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007caa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007cae:	f7fe fd35 	bl	800671c <HAL_RCCEx_GetPeriphCLKFreq>
 8007cb2:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	025b      	lsls	r3, r3, #9
 8007cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cca:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4a66      	ldr	r2, [pc, #408]	; (8007e68 <HAL_SAI_Init+0x2c0>)
 8007cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd4:	08da      	lsrs	r2, r3, #3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007cda:	68f9      	ldr	r1, [r7, #12]
 8007cdc:	4b62      	ldr	r3, [pc, #392]	; (8007e68 <HAL_SAI_Init+0x2c0>)
 8007cde:	fba3 2301 	umull	r2, r3, r3, r1
 8007ce2:	08da      	lsrs	r2, r3, #3
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	1aca      	subs	r2, r1, r3
 8007cee:	2a08      	cmp	r2, #8
 8007cf0:	d904      	bls.n	8007cfc <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	1c5a      	adds	r2, r3, #1
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <HAL_SAI_Init+0x164>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d109      	bne.n	8007d20 <HAL_SAI_Init+0x178>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d101      	bne.n	8007d18 <HAL_SAI_Init+0x170>
 8007d14:	2300      	movs	r3, #0
 8007d16:	e001      	b.n	8007d1c <HAL_SAI_Init+0x174>
 8007d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d1c:	61bb      	str	r3, [r7, #24]
 8007d1e:	e008      	b.n	8007d32 <HAL_SAI_Init+0x18a>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d102      	bne.n	8007d2e <HAL_SAI_Init+0x186>
 8007d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d2c:	e000      	b.n	8007d30 <HAL_SAI_Init+0x188>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6819      	ldr	r1, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	4b4b      	ldr	r3, [pc, #300]	; (8007e6c <HAL_SAI_Init+0x2c4>)
 8007d3e:	400b      	ands	r3, r1
 8007d40:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6819      	ldr	r1, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d50:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d56:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8007d6a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d76:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a1b      	ldr	r3, [r3, #32]
 8007d7c:	051b      	lsls	r3, r3, #20
 8007d7e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	430a      	orrs	r2, r1
 8007d86:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	6812      	ldr	r2, [r2, #0]
 8007d92:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007d96:	f023 030f 	bic.w	r3, r3, #15
 8007d9a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6859      	ldr	r1, [r3, #4]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	699a      	ldr	r2, [r3, #24]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007daa:	431a      	orrs	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db0:	431a      	orrs	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6899      	ldr	r1, [r3, #8]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	4b2a      	ldr	r3, [pc, #168]	; (8007e70 <HAL_SAI_Init+0x2c8>)
 8007dc6:	400b      	ands	r3, r1
 8007dc8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6899      	ldr	r1, [r3, #8]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007dda:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8007de0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8007de6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dec:	3b01      	subs	r3, #1
 8007dee:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007df0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68d9      	ldr	r1, [r3, #12]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007e08:	400b      	ands	r3, r1
 8007e0a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68d9      	ldr	r1, [r3, #12]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e1a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e20:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007e22:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	021b      	lsls	r3, r3, #8
 8007e2c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3720      	adds	r7, #32
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	40015404 	.word	0x40015404
 8007e5c:	40015424 	.word	0x40015424
 8007e60:	40015400 	.word	0x40015400
 8007e64:	40015800 	.word	0x40015800
 8007e68:	cccccccd 	.word	0xcccccccd
 8007e6c:	ff05c010 	.word	0xff05c010
 8007e70:	fff88000 	.word	0xfff88000

08007e74 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007e74:	b490      	push	{r4, r7}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007e7c:	4b15      	ldr	r3, [pc, #84]	; (8007ed4 <SAI_Disable+0x60>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a15      	ldr	r2, [pc, #84]	; (8007ed8 <SAI_Disable+0x64>)
 8007e82:	fba2 2303 	umull	r2, r3, r2, r3
 8007e86:	0b1b      	lsrs	r3, r3, #12
 8007e88:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007e9c:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007e9e:	2c00      	cmp	r4, #0
 8007ea0:	d10a      	bne.n	8007eb8 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ea8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb6:	e007      	b.n	8007ec8 <SAI_Disable+0x54>
    }
    count--;
 8007eb8:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1ea      	bne.n	8007e9e <SAI_Disable+0x2a>

  return status;
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bc90      	pop	{r4, r7}
 8007ed2:	4770      	bx	lr
 8007ed4:	20000020 	.word	0x20000020
 8007ed8:	95cbec1b 	.word	0x95cbec1b

08007edc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e07c      	b.n	8007fe8 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d106      	bne.n	8007f0e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7f9 ffcb 	bl	8001ea4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2202      	movs	r2, #2
 8007f12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f24:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f2e:	d902      	bls.n	8007f36 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f30:	2300      	movs	r3, #0
 8007f32:	60fb      	str	r3, [r7, #12]
 8007f34:	e002      	b.n	8007f3c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f3a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007f44:	d007      	beq.n	8007f56 <HAL_SPI_Init+0x7a>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f4e:	d002      	beq.n	8007f56 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10b      	bne.n	8007f76 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f66:	d903      	bls.n	8007f70 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8007f6e:	e002      	b.n	8007f76 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	431a      	orrs	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f94:	431a      	orrs	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a1b      	ldr	r3, [r3, #32]
 8007fa0:	ea42 0103 	orr.w	r1, r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	0c1b      	lsrs	r3, r3, #16
 8007fb6:	f003 0204 	and.w	r2, r3, #4
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc4:	431a      	orrs	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	ea42 0103 	orr.w	r1, r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e040      	b.n	8008084 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008006:	2b00      	cmp	r3, #0
 8008008:	d106      	bne.n	8008018 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7fa fc00 	bl	8002818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2224      	movs	r2, #36	; 0x24
 800801c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 0201 	bic.w	r2, r2, #1
 800802c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f98c 	bl	800834c <UART_SetConfig>
 8008034:	4603      	mov	r3, r0
 8008036:	2b01      	cmp	r3, #1
 8008038:	d101      	bne.n	800803e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e022      	b.n	8008084 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fcc8 	bl	80089dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800805a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	689a      	ldr	r2, [r3, #8]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800806a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0201 	orr.w	r2, r2, #1
 800807a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fd4f 	bl	8008b20 <UART_CheckIdleState>
 8008082:	4603      	mov	r3, r0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08a      	sub	sp, #40	; 0x28
 8008090:	af02      	add	r7, sp, #8
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	603b      	str	r3, [r7, #0]
 8008098:	4613      	mov	r3, r2
 800809a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080a0:	2b20      	cmp	r3, #32
 80080a2:	f040 8081 	bne.w	80081a8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <HAL_UART_Transmit+0x26>
 80080ac:	88fb      	ldrh	r3, [r7, #6]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e079      	b.n	80081aa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d101      	bne.n	80080c4 <HAL_UART_Transmit+0x38>
 80080c0:	2302      	movs	r3, #2
 80080c2:	e072      	b.n	80081aa <HAL_UART_Transmit+0x11e>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2221      	movs	r2, #33	; 0x21
 80080d6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80080d8:	f7fa fc76 	bl	80029c8 <HAL_GetTick>
 80080dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	88fa      	ldrh	r2, [r7, #6]
 80080e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	88fa      	ldrh	r2, [r7, #6]
 80080ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080f6:	d108      	bne.n	800810a <HAL_UART_Transmit+0x7e>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d104      	bne.n	800810a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8008100:	2300      	movs	r3, #0
 8008102:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	61bb      	str	r3, [r7, #24]
 8008108:	e003      	b.n	8008112 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800810e:	2300      	movs	r3, #0
 8008110:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008112:	e02d      	b.n	8008170 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2200      	movs	r2, #0
 800811c:	2180      	movs	r1, #128	; 0x80
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 fd43 	bl	8008baa <UART_WaitOnFlagUntilTimeout>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e03d      	b.n	80081aa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10b      	bne.n	800814c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	881a      	ldrh	r2, [r3, #0]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008140:	b292      	uxth	r2, r2
 8008142:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	3302      	adds	r3, #2
 8008148:	61bb      	str	r3, [r7, #24]
 800814a:	e008      	b.n	800815e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	781a      	ldrb	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	b292      	uxth	r2, r2
 8008156:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	3301      	adds	r3, #1
 800815c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008164:	b29b      	uxth	r3, r3
 8008166:	3b01      	subs	r3, #1
 8008168:	b29a      	uxth	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008176:	b29b      	uxth	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1cb      	bne.n	8008114 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	2200      	movs	r2, #0
 8008184:	2140      	movs	r1, #64	; 0x40
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 fd0f 	bl	8008baa <UART_WaitOnFlagUntilTimeout>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e009      	b.n	80081aa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2220      	movs	r2, #32
 800819a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	e000      	b.n	80081aa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80081a8:	2302      	movs	r3, #2
  }
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3720      	adds	r7, #32
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b08a      	sub	sp, #40	; 0x28
 80081b6:	af02      	add	r7, sp, #8
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	603b      	str	r3, [r7, #0]
 80081be:	4613      	mov	r3, r2
 80081c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081c6:	2b20      	cmp	r3, #32
 80081c8:	f040 80bb 	bne.w	8008342 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <HAL_UART_Receive+0x26>
 80081d2:	88fb      	ldrh	r3, [r7, #6]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e0b3      	b.n	8008344 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d101      	bne.n	80081ea <HAL_UART_Receive+0x38>
 80081e6:	2302      	movs	r3, #2
 80081e8:	e0ac      	b.n	8008344 <HAL_UART_Receive+0x192>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2222      	movs	r2, #34	; 0x22
 80081fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80081fe:	f7fa fbe3 	bl	80029c8 <HAL_GetTick>
 8008202:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	88fa      	ldrh	r2, [r7, #6]
 8008208:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	88fa      	ldrh	r2, [r7, #6]
 8008210:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800821c:	d10e      	bne.n	800823c <HAL_UART_Receive+0x8a>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d105      	bne.n	8008232 <HAL_UART_Receive+0x80>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f240 12ff 	movw	r2, #511	; 0x1ff
 800822c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008230:	e02d      	b.n	800828e <HAL_UART_Receive+0xdc>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	22ff      	movs	r2, #255	; 0xff
 8008236:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800823a:	e028      	b.n	800828e <HAL_UART_Receive+0xdc>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10d      	bne.n	8008260 <HAL_UART_Receive+0xae>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d104      	bne.n	8008256 <HAL_UART_Receive+0xa4>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	22ff      	movs	r2, #255	; 0xff
 8008250:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008254:	e01b      	b.n	800828e <HAL_UART_Receive+0xdc>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	227f      	movs	r2, #127	; 0x7f
 800825a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800825e:	e016      	b.n	800828e <HAL_UART_Receive+0xdc>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008268:	d10d      	bne.n	8008286 <HAL_UART_Receive+0xd4>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d104      	bne.n	800827c <HAL_UART_Receive+0xca>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	227f      	movs	r2, #127	; 0x7f
 8008276:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800827a:	e008      	b.n	800828e <HAL_UART_Receive+0xdc>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	223f      	movs	r2, #63	; 0x3f
 8008280:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008284:	e003      	b.n	800828e <HAL_UART_Receive+0xdc>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008294:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800829e:	d108      	bne.n	80082b2 <HAL_UART_Receive+0x100>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d104      	bne.n	80082b2 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80082a8:	2300      	movs	r3, #0
 80082aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	61bb      	str	r3, [r7, #24]
 80082b0:	e003      	b.n	80082ba <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80082ba:	e033      	b.n	8008324 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2200      	movs	r2, #0
 80082c4:	2120      	movs	r1, #32
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 fc6f 	bl	8008baa <UART_WaitOnFlagUntilTimeout>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e036      	b.n	8008344 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10c      	bne.n	80082f6 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	8a7b      	ldrh	r3, [r7, #18]
 80082e6:	4013      	ands	r3, r2
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	3302      	adds	r3, #2
 80082f2:	61bb      	str	r3, [r7, #24]
 80082f4:	e00d      	b.n	8008312 <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	8a7b      	ldrh	r3, [r7, #18]
 8008302:	b2db      	uxtb	r3, r3
 8008304:	4013      	ands	r3, r2
 8008306:	b2da      	uxtb	r2, r3
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	3301      	adds	r3, #1
 8008310:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008318:	b29b      	uxth	r3, r3
 800831a:	3b01      	subs	r3, #1
 800831c:	b29a      	uxth	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800832a:	b29b      	uxth	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1c5      	bne.n	80082bc <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2220      	movs	r2, #32
 8008334:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800833e:	2300      	movs	r3, #0
 8008340:	e000      	b.n	8008344 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8008342:	2302      	movs	r3, #2
  }
}
 8008344:	4618      	mov	r0, r3
 8008346:	3720      	adds	r7, #32
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800834c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008350:	b088      	sub	sp, #32
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008356:	2300      	movs	r3, #0
 8008358:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800835e:	2300      	movs	r3, #0
 8008360:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	689a      	ldr	r2, [r3, #8]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	431a      	orrs	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	4313      	orrs	r3, r2
 8008378:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	4bac      	ldr	r3, [pc, #688]	; (8008634 <UART_SetConfig+0x2e8>)
 8008382:	4013      	ands	r3, r2
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	6812      	ldr	r2, [r2, #0]
 8008388:	69f9      	ldr	r1, [r7, #28]
 800838a:	430b      	orrs	r3, r1
 800838c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	68da      	ldr	r2, [r3, #12]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4aa2      	ldr	r2, [pc, #648]	; (8008638 <UART_SetConfig+0x2ec>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d004      	beq.n	80083be <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a1b      	ldr	r3, [r3, #32]
 80083b8:	69fa      	ldr	r2, [r7, #28]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a99      	ldr	r2, [pc, #612]	; (800863c <UART_SetConfig+0x2f0>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d121      	bne.n	8008420 <UART_SetConfig+0xd4>
 80083dc:	4b98      	ldr	r3, [pc, #608]	; (8008640 <UART_SetConfig+0x2f4>)
 80083de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e2:	f003 0303 	and.w	r3, r3, #3
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d816      	bhi.n	8008418 <UART_SetConfig+0xcc>
 80083ea:	a201      	add	r2, pc, #4	; (adr r2, 80083f0 <UART_SetConfig+0xa4>)
 80083ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f0:	08008401 	.word	0x08008401
 80083f4:	0800840d 	.word	0x0800840d
 80083f8:	08008407 	.word	0x08008407
 80083fc:	08008413 	.word	0x08008413
 8008400:	2301      	movs	r3, #1
 8008402:	76fb      	strb	r3, [r7, #27]
 8008404:	e0e8      	b.n	80085d8 <UART_SetConfig+0x28c>
 8008406:	2302      	movs	r3, #2
 8008408:	76fb      	strb	r3, [r7, #27]
 800840a:	e0e5      	b.n	80085d8 <UART_SetConfig+0x28c>
 800840c:	2304      	movs	r3, #4
 800840e:	76fb      	strb	r3, [r7, #27]
 8008410:	e0e2      	b.n	80085d8 <UART_SetConfig+0x28c>
 8008412:	2308      	movs	r3, #8
 8008414:	76fb      	strb	r3, [r7, #27]
 8008416:	e0df      	b.n	80085d8 <UART_SetConfig+0x28c>
 8008418:	2310      	movs	r3, #16
 800841a:	76fb      	strb	r3, [r7, #27]
 800841c:	bf00      	nop
 800841e:	e0db      	b.n	80085d8 <UART_SetConfig+0x28c>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a87      	ldr	r2, [pc, #540]	; (8008644 <UART_SetConfig+0x2f8>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d134      	bne.n	8008494 <UART_SetConfig+0x148>
 800842a:	4b85      	ldr	r3, [pc, #532]	; (8008640 <UART_SetConfig+0x2f4>)
 800842c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008430:	f003 030c 	and.w	r3, r3, #12
 8008434:	2b0c      	cmp	r3, #12
 8008436:	d829      	bhi.n	800848c <UART_SetConfig+0x140>
 8008438:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <UART_SetConfig+0xf4>)
 800843a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843e:	bf00      	nop
 8008440:	08008475 	.word	0x08008475
 8008444:	0800848d 	.word	0x0800848d
 8008448:	0800848d 	.word	0x0800848d
 800844c:	0800848d 	.word	0x0800848d
 8008450:	08008481 	.word	0x08008481
 8008454:	0800848d 	.word	0x0800848d
 8008458:	0800848d 	.word	0x0800848d
 800845c:	0800848d 	.word	0x0800848d
 8008460:	0800847b 	.word	0x0800847b
 8008464:	0800848d 	.word	0x0800848d
 8008468:	0800848d 	.word	0x0800848d
 800846c:	0800848d 	.word	0x0800848d
 8008470:	08008487 	.word	0x08008487
 8008474:	2300      	movs	r3, #0
 8008476:	76fb      	strb	r3, [r7, #27]
 8008478:	e0ae      	b.n	80085d8 <UART_SetConfig+0x28c>
 800847a:	2302      	movs	r3, #2
 800847c:	76fb      	strb	r3, [r7, #27]
 800847e:	e0ab      	b.n	80085d8 <UART_SetConfig+0x28c>
 8008480:	2304      	movs	r3, #4
 8008482:	76fb      	strb	r3, [r7, #27]
 8008484:	e0a8      	b.n	80085d8 <UART_SetConfig+0x28c>
 8008486:	2308      	movs	r3, #8
 8008488:	76fb      	strb	r3, [r7, #27]
 800848a:	e0a5      	b.n	80085d8 <UART_SetConfig+0x28c>
 800848c:	2310      	movs	r3, #16
 800848e:	76fb      	strb	r3, [r7, #27]
 8008490:	bf00      	nop
 8008492:	e0a1      	b.n	80085d8 <UART_SetConfig+0x28c>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a6b      	ldr	r2, [pc, #428]	; (8008648 <UART_SetConfig+0x2fc>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d120      	bne.n	80084e0 <UART_SetConfig+0x194>
 800849e:	4b68      	ldr	r3, [pc, #416]	; (8008640 <UART_SetConfig+0x2f4>)
 80084a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80084a8:	2b10      	cmp	r3, #16
 80084aa:	d00f      	beq.n	80084cc <UART_SetConfig+0x180>
 80084ac:	2b10      	cmp	r3, #16
 80084ae:	d802      	bhi.n	80084b6 <UART_SetConfig+0x16a>
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d005      	beq.n	80084c0 <UART_SetConfig+0x174>
 80084b4:	e010      	b.n	80084d8 <UART_SetConfig+0x18c>
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	d005      	beq.n	80084c6 <UART_SetConfig+0x17a>
 80084ba:	2b30      	cmp	r3, #48	; 0x30
 80084bc:	d009      	beq.n	80084d2 <UART_SetConfig+0x186>
 80084be:	e00b      	b.n	80084d8 <UART_SetConfig+0x18c>
 80084c0:	2300      	movs	r3, #0
 80084c2:	76fb      	strb	r3, [r7, #27]
 80084c4:	e088      	b.n	80085d8 <UART_SetConfig+0x28c>
 80084c6:	2302      	movs	r3, #2
 80084c8:	76fb      	strb	r3, [r7, #27]
 80084ca:	e085      	b.n	80085d8 <UART_SetConfig+0x28c>
 80084cc:	2304      	movs	r3, #4
 80084ce:	76fb      	strb	r3, [r7, #27]
 80084d0:	e082      	b.n	80085d8 <UART_SetConfig+0x28c>
 80084d2:	2308      	movs	r3, #8
 80084d4:	76fb      	strb	r3, [r7, #27]
 80084d6:	e07f      	b.n	80085d8 <UART_SetConfig+0x28c>
 80084d8:	2310      	movs	r3, #16
 80084da:	76fb      	strb	r3, [r7, #27]
 80084dc:	bf00      	nop
 80084de:	e07b      	b.n	80085d8 <UART_SetConfig+0x28c>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a59      	ldr	r2, [pc, #356]	; (800864c <UART_SetConfig+0x300>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d120      	bne.n	800852c <UART_SetConfig+0x1e0>
 80084ea:	4b55      	ldr	r3, [pc, #340]	; (8008640 <UART_SetConfig+0x2f4>)
 80084ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80084f4:	2b40      	cmp	r3, #64	; 0x40
 80084f6:	d00f      	beq.n	8008518 <UART_SetConfig+0x1cc>
 80084f8:	2b40      	cmp	r3, #64	; 0x40
 80084fa:	d802      	bhi.n	8008502 <UART_SetConfig+0x1b6>
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d005      	beq.n	800850c <UART_SetConfig+0x1c0>
 8008500:	e010      	b.n	8008524 <UART_SetConfig+0x1d8>
 8008502:	2b80      	cmp	r3, #128	; 0x80
 8008504:	d005      	beq.n	8008512 <UART_SetConfig+0x1c6>
 8008506:	2bc0      	cmp	r3, #192	; 0xc0
 8008508:	d009      	beq.n	800851e <UART_SetConfig+0x1d2>
 800850a:	e00b      	b.n	8008524 <UART_SetConfig+0x1d8>
 800850c:	2300      	movs	r3, #0
 800850e:	76fb      	strb	r3, [r7, #27]
 8008510:	e062      	b.n	80085d8 <UART_SetConfig+0x28c>
 8008512:	2302      	movs	r3, #2
 8008514:	76fb      	strb	r3, [r7, #27]
 8008516:	e05f      	b.n	80085d8 <UART_SetConfig+0x28c>
 8008518:	2304      	movs	r3, #4
 800851a:	76fb      	strb	r3, [r7, #27]
 800851c:	e05c      	b.n	80085d8 <UART_SetConfig+0x28c>
 800851e:	2308      	movs	r3, #8
 8008520:	76fb      	strb	r3, [r7, #27]
 8008522:	e059      	b.n	80085d8 <UART_SetConfig+0x28c>
 8008524:	2310      	movs	r3, #16
 8008526:	76fb      	strb	r3, [r7, #27]
 8008528:	bf00      	nop
 800852a:	e055      	b.n	80085d8 <UART_SetConfig+0x28c>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a47      	ldr	r2, [pc, #284]	; (8008650 <UART_SetConfig+0x304>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d124      	bne.n	8008580 <UART_SetConfig+0x234>
 8008536:	4b42      	ldr	r3, [pc, #264]	; (8008640 <UART_SetConfig+0x2f4>)
 8008538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800853c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008544:	d012      	beq.n	800856c <UART_SetConfig+0x220>
 8008546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800854a:	d802      	bhi.n	8008552 <UART_SetConfig+0x206>
 800854c:	2b00      	cmp	r3, #0
 800854e:	d007      	beq.n	8008560 <UART_SetConfig+0x214>
 8008550:	e012      	b.n	8008578 <UART_SetConfig+0x22c>
 8008552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008556:	d006      	beq.n	8008566 <UART_SetConfig+0x21a>
 8008558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800855c:	d009      	beq.n	8008572 <UART_SetConfig+0x226>
 800855e:	e00b      	b.n	8008578 <UART_SetConfig+0x22c>
 8008560:	2300      	movs	r3, #0
 8008562:	76fb      	strb	r3, [r7, #27]
 8008564:	e038      	b.n	80085d8 <UART_SetConfig+0x28c>
 8008566:	2302      	movs	r3, #2
 8008568:	76fb      	strb	r3, [r7, #27]
 800856a:	e035      	b.n	80085d8 <UART_SetConfig+0x28c>
 800856c:	2304      	movs	r3, #4
 800856e:	76fb      	strb	r3, [r7, #27]
 8008570:	e032      	b.n	80085d8 <UART_SetConfig+0x28c>
 8008572:	2308      	movs	r3, #8
 8008574:	76fb      	strb	r3, [r7, #27]
 8008576:	e02f      	b.n	80085d8 <UART_SetConfig+0x28c>
 8008578:	2310      	movs	r3, #16
 800857a:	76fb      	strb	r3, [r7, #27]
 800857c:	bf00      	nop
 800857e:	e02b      	b.n	80085d8 <UART_SetConfig+0x28c>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a2c      	ldr	r2, [pc, #176]	; (8008638 <UART_SetConfig+0x2ec>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d124      	bne.n	80085d4 <UART_SetConfig+0x288>
 800858a:	4b2d      	ldr	r3, [pc, #180]	; (8008640 <UART_SetConfig+0x2f4>)
 800858c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008590:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008598:	d012      	beq.n	80085c0 <UART_SetConfig+0x274>
 800859a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800859e:	d802      	bhi.n	80085a6 <UART_SetConfig+0x25a>
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d007      	beq.n	80085b4 <UART_SetConfig+0x268>
 80085a4:	e012      	b.n	80085cc <UART_SetConfig+0x280>
 80085a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085aa:	d006      	beq.n	80085ba <UART_SetConfig+0x26e>
 80085ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085b0:	d009      	beq.n	80085c6 <UART_SetConfig+0x27a>
 80085b2:	e00b      	b.n	80085cc <UART_SetConfig+0x280>
 80085b4:	2300      	movs	r3, #0
 80085b6:	76fb      	strb	r3, [r7, #27]
 80085b8:	e00e      	b.n	80085d8 <UART_SetConfig+0x28c>
 80085ba:	2302      	movs	r3, #2
 80085bc:	76fb      	strb	r3, [r7, #27]
 80085be:	e00b      	b.n	80085d8 <UART_SetConfig+0x28c>
 80085c0:	2304      	movs	r3, #4
 80085c2:	76fb      	strb	r3, [r7, #27]
 80085c4:	e008      	b.n	80085d8 <UART_SetConfig+0x28c>
 80085c6:	2308      	movs	r3, #8
 80085c8:	76fb      	strb	r3, [r7, #27]
 80085ca:	e005      	b.n	80085d8 <UART_SetConfig+0x28c>
 80085cc:	2310      	movs	r3, #16
 80085ce:	76fb      	strb	r3, [r7, #27]
 80085d0:	bf00      	nop
 80085d2:	e001      	b.n	80085d8 <UART_SetConfig+0x28c>
 80085d4:	2310      	movs	r3, #16
 80085d6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a16      	ldr	r2, [pc, #88]	; (8008638 <UART_SetConfig+0x2ec>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	f040 80fa 	bne.w	80087d8 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085e4:	7efb      	ldrb	r3, [r7, #27]
 80085e6:	2b08      	cmp	r3, #8
 80085e8:	d836      	bhi.n	8008658 <UART_SetConfig+0x30c>
 80085ea:	a201      	add	r2, pc, #4	; (adr r2, 80085f0 <UART_SetConfig+0x2a4>)
 80085ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f0:	08008615 	.word	0x08008615
 80085f4:	08008659 	.word	0x08008659
 80085f8:	0800861d 	.word	0x0800861d
 80085fc:	08008659 	.word	0x08008659
 8008600:	08008623 	.word	0x08008623
 8008604:	08008659 	.word	0x08008659
 8008608:	08008659 	.word	0x08008659
 800860c:	08008659 	.word	0x08008659
 8008610:	0800862b 	.word	0x0800862b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8008614:	f7fd fd10 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8008618:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800861a:	e020      	b.n	800865e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800861c:	4b0d      	ldr	r3, [pc, #52]	; (8008654 <UART_SetConfig+0x308>)
 800861e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008620:	e01d      	b.n	800865e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8008622:	f7fd fc73 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8008626:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008628:	e019      	b.n	800865e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800862a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800862e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008630:	e015      	b.n	800865e <UART_SetConfig+0x312>
 8008632:	bf00      	nop
 8008634:	efff69f3 	.word	0xefff69f3
 8008638:	40008000 	.word	0x40008000
 800863c:	40013800 	.word	0x40013800
 8008640:	40021000 	.word	0x40021000
 8008644:	40004400 	.word	0x40004400
 8008648:	40004800 	.word	0x40004800
 800864c:	40004c00 	.word	0x40004c00
 8008650:	40005000 	.word	0x40005000
 8008654:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	74fb      	strb	r3, [r7, #19]
        break;
 800865c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 81ac 	beq.w	80089be <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685a      	ldr	r2, [r3, #4]
 800866a:	4613      	mov	r3, r2
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	4413      	add	r3, r2
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	429a      	cmp	r2, r3
 8008674:	d305      	bcc.n	8008682 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	429a      	cmp	r2, r3
 8008680:	d902      	bls.n	8008688 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	74fb      	strb	r3, [r7, #19]
 8008686:	e19a      	b.n	80089be <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8008688:	7efb      	ldrb	r3, [r7, #27]
 800868a:	2b08      	cmp	r3, #8
 800868c:	f200 8091 	bhi.w	80087b2 <UART_SetConfig+0x466>
 8008690:	a201      	add	r2, pc, #4	; (adr r2, 8008698 <UART_SetConfig+0x34c>)
 8008692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008696:	bf00      	nop
 8008698:	080086bd 	.word	0x080086bd
 800869c:	080087b3 	.word	0x080087b3
 80086a0:	08008709 	.word	0x08008709
 80086a4:	080087b3 	.word	0x080087b3
 80086a8:	0800873d 	.word	0x0800873d
 80086ac:	080087b3 	.word	0x080087b3
 80086b0:	080087b3 	.word	0x080087b3
 80086b4:	080087b3 	.word	0x080087b3
 80086b8:	08008789 	.word	0x08008789
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80086bc:	f7fd fcbc 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 80086c0:	4603      	mov	r3, r0
 80086c2:	4619      	mov	r1, r3
 80086c4:	f04f 0200 	mov.w	r2, #0
 80086c8:	f04f 0300 	mov.w	r3, #0
 80086cc:	f04f 0400 	mov.w	r4, #0
 80086d0:	0214      	lsls	r4, r2, #8
 80086d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80086d6:	020b      	lsls	r3, r1, #8
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	6852      	ldr	r2, [r2, #4]
 80086dc:	0852      	lsrs	r2, r2, #1
 80086de:	4611      	mov	r1, r2
 80086e0:	f04f 0200 	mov.w	r2, #0
 80086e4:	eb13 0b01 	adds.w	fp, r3, r1
 80086e8:	eb44 0c02 	adc.w	ip, r4, r2
 80086ec:	4658      	mov	r0, fp
 80086ee:	4661      	mov	r1, ip
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f04f 0400 	mov.w	r4, #0
 80086f8:	461a      	mov	r2, r3
 80086fa:	4623      	mov	r3, r4
 80086fc:	f7f7 fdb8 	bl	8000270 <__aeabi_uldivmod>
 8008700:	4603      	mov	r3, r0
 8008702:	460c      	mov	r4, r1
 8008704:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8008706:	e057      	b.n	80087b8 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	085b      	lsrs	r3, r3, #1
 800870e:	f04f 0400 	mov.w	r4, #0
 8008712:	49b1      	ldr	r1, [pc, #708]	; (80089d8 <UART_SetConfig+0x68c>)
 8008714:	f04f 0200 	mov.w	r2, #0
 8008718:	eb13 0b01 	adds.w	fp, r3, r1
 800871c:	eb44 0c02 	adc.w	ip, r4, r2
 8008720:	4658      	mov	r0, fp
 8008722:	4661      	mov	r1, ip
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f04f 0400 	mov.w	r4, #0
 800872c:	461a      	mov	r2, r3
 800872e:	4623      	mov	r3, r4
 8008730:	f7f7 fd9e 	bl	8000270 <__aeabi_uldivmod>
 8008734:	4603      	mov	r3, r0
 8008736:	460c      	mov	r4, r1
 8008738:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800873a:	e03d      	b.n	80087b8 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800873c:	f7fd fbe6 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8008740:	4603      	mov	r3, r0
 8008742:	4619      	mov	r1, r3
 8008744:	f04f 0200 	mov.w	r2, #0
 8008748:	f04f 0300 	mov.w	r3, #0
 800874c:	f04f 0400 	mov.w	r4, #0
 8008750:	0214      	lsls	r4, r2, #8
 8008752:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008756:	020b      	lsls	r3, r1, #8
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	6852      	ldr	r2, [r2, #4]
 800875c:	0852      	lsrs	r2, r2, #1
 800875e:	4611      	mov	r1, r2
 8008760:	f04f 0200 	mov.w	r2, #0
 8008764:	eb13 0b01 	adds.w	fp, r3, r1
 8008768:	eb44 0c02 	adc.w	ip, r4, r2
 800876c:	4658      	mov	r0, fp
 800876e:	4661      	mov	r1, ip
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f04f 0400 	mov.w	r4, #0
 8008778:	461a      	mov	r2, r3
 800877a:	4623      	mov	r3, r4
 800877c:	f7f7 fd78 	bl	8000270 <__aeabi_uldivmod>
 8008780:	4603      	mov	r3, r0
 8008782:	460c      	mov	r4, r1
 8008784:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8008786:	e017      	b.n	80087b8 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	085b      	lsrs	r3, r3, #1
 800878e:	f04f 0400 	mov.w	r4, #0
 8008792:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8008796:	f144 0100 	adc.w	r1, r4, #0
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f04f 0400 	mov.w	r4, #0
 80087a2:	461a      	mov	r2, r3
 80087a4:	4623      	mov	r3, r4
 80087a6:	f7f7 fd63 	bl	8000270 <__aeabi_uldivmod>
 80087aa:	4603      	mov	r3, r0
 80087ac:	460c      	mov	r4, r1
 80087ae:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80087b0:	e002      	b.n	80087b8 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	74fb      	strb	r3, [r7, #19]
            break;
 80087b6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087be:	d308      	bcc.n	80087d2 <UART_SetConfig+0x486>
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087c6:	d204      	bcs.n	80087d2 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	60da      	str	r2, [r3, #12]
 80087d0:	e0f5      	b.n	80089be <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	74fb      	strb	r3, [r7, #19]
 80087d6:	e0f2      	b.n	80089be <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	69db      	ldr	r3, [r3, #28]
 80087dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087e0:	d17f      	bne.n	80088e2 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 80087e2:	7efb      	ldrb	r3, [r7, #27]
 80087e4:	2b08      	cmp	r3, #8
 80087e6:	d85c      	bhi.n	80088a2 <UART_SetConfig+0x556>
 80087e8:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <UART_SetConfig+0x4a4>)
 80087ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ee:	bf00      	nop
 80087f0:	08008815 	.word	0x08008815
 80087f4:	08008833 	.word	0x08008833
 80087f8:	08008851 	.word	0x08008851
 80087fc:	080088a3 	.word	0x080088a3
 8008800:	0800886d 	.word	0x0800886d
 8008804:	080088a3 	.word	0x080088a3
 8008808:	080088a3 	.word	0x080088a3
 800880c:	080088a3 	.word	0x080088a3
 8008810:	0800888b 	.word	0x0800888b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008814:	f7fd fc10 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8008818:	4603      	mov	r3, r0
 800881a:	005a      	lsls	r2, r3, #1
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	085b      	lsrs	r3, r3, #1
 8008822:	441a      	add	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	fbb2 f3f3 	udiv	r3, r2, r3
 800882c:	b29b      	uxth	r3, r3
 800882e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008830:	e03a      	b.n	80088a8 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008832:	f7fd fc17 	bl	8006064 <HAL_RCC_GetPCLK2Freq>
 8008836:	4603      	mov	r3, r0
 8008838:	005a      	lsls	r2, r3, #1
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	085b      	lsrs	r3, r3, #1
 8008840:	441a      	add	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	fbb2 f3f3 	udiv	r3, r2, r3
 800884a:	b29b      	uxth	r3, r3
 800884c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800884e:	e02b      	b.n	80088a8 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	085b      	lsrs	r3, r3, #1
 8008856:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800885a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	6852      	ldr	r2, [r2, #4]
 8008862:	fbb3 f3f2 	udiv	r3, r3, r2
 8008866:	b29b      	uxth	r3, r3
 8008868:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800886a:	e01d      	b.n	80088a8 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800886c:	f7fd fb4e 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8008870:	4603      	mov	r3, r0
 8008872:	005a      	lsls	r2, r3, #1
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	085b      	lsrs	r3, r3, #1
 800887a:	441a      	add	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	fbb2 f3f3 	udiv	r3, r2, r3
 8008884:	b29b      	uxth	r3, r3
 8008886:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008888:	e00e      	b.n	80088a8 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	085b      	lsrs	r3, r3, #1
 8008890:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	fbb2 f3f3 	udiv	r3, r2, r3
 800889c:	b29b      	uxth	r3, r3
 800889e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80088a0:	e002      	b.n	80088a8 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	74fb      	strb	r3, [r7, #19]
        break;
 80088a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2b0f      	cmp	r3, #15
 80088ac:	d916      	bls.n	80088dc <UART_SetConfig+0x590>
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088b4:	d212      	bcs.n	80088dc <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	f023 030f 	bic.w	r3, r3, #15
 80088be:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	085b      	lsrs	r3, r3, #1
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	f003 0307 	and.w	r3, r3, #7
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	897b      	ldrh	r3, [r7, #10]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	897a      	ldrh	r2, [r7, #10]
 80088d8:	60da      	str	r2, [r3, #12]
 80088da:	e070      	b.n	80089be <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	74fb      	strb	r3, [r7, #19]
 80088e0:	e06d      	b.n	80089be <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 80088e2:	7efb      	ldrb	r3, [r7, #27]
 80088e4:	2b08      	cmp	r3, #8
 80088e6:	d859      	bhi.n	800899c <UART_SetConfig+0x650>
 80088e8:	a201      	add	r2, pc, #4	; (adr r2, 80088f0 <UART_SetConfig+0x5a4>)
 80088ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ee:	bf00      	nop
 80088f0:	08008915 	.word	0x08008915
 80088f4:	08008931 	.word	0x08008931
 80088f8:	0800894d 	.word	0x0800894d
 80088fc:	0800899d 	.word	0x0800899d
 8008900:	08008969 	.word	0x08008969
 8008904:	0800899d 	.word	0x0800899d
 8008908:	0800899d 	.word	0x0800899d
 800890c:	0800899d 	.word	0x0800899d
 8008910:	08008985 	.word	0x08008985
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008914:	f7fd fb90 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8008918:	4602      	mov	r2, r0
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	441a      	add	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	fbb2 f3f3 	udiv	r3, r2, r3
 800892a:	b29b      	uxth	r3, r3
 800892c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800892e:	e038      	b.n	80089a2 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008930:	f7fd fb98 	bl	8006064 <HAL_RCC_GetPCLK2Freq>
 8008934:	4602      	mov	r2, r0
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	085b      	lsrs	r3, r3, #1
 800893c:	441a      	add	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	fbb2 f3f3 	udiv	r3, r2, r3
 8008946:	b29b      	uxth	r3, r3
 8008948:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800894a:	e02a      	b.n	80089a2 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	085b      	lsrs	r3, r3, #1
 8008952:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8008956:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	6852      	ldr	r2, [r2, #4]
 800895e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008962:	b29b      	uxth	r3, r3
 8008964:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008966:	e01c      	b.n	80089a2 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008968:	f7fd fad0 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 800896c:	4602      	mov	r2, r0
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	085b      	lsrs	r3, r3, #1
 8008974:	441a      	add	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	fbb2 f3f3 	udiv	r3, r2, r3
 800897e:	b29b      	uxth	r3, r3
 8008980:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008982:	e00e      	b.n	80089a2 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	085b      	lsrs	r3, r3, #1
 800898a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	fbb2 f3f3 	udiv	r3, r2, r3
 8008996:	b29b      	uxth	r3, r3
 8008998:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800899a:	e002      	b.n	80089a2 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	74fb      	strb	r3, [r7, #19]
        break;
 80089a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	2b0f      	cmp	r3, #15
 80089a6:	d908      	bls.n	80089ba <UART_SetConfig+0x66e>
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089ae:	d204      	bcs.n	80089ba <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	60da      	str	r2, [r3, #12]
 80089b8:	e001      	b.n	80089be <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80089ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3720      	adds	r7, #32
 80089d0:	46bd      	mov	sp, r7
 80089d2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80089d6:	bf00      	nop
 80089d8:	f4240000 	.word	0xf4240000

080089dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	f003 0301 	and.w	r3, r3, #1
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00a      	beq.n	8008a06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	430a      	orrs	r2, r1
 8008a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0a:	f003 0302 	and.w	r3, r3, #2
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00a      	beq.n	8008a28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	430a      	orrs	r2, r1
 8008a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00a      	beq.n	8008a4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	430a      	orrs	r2, r1
 8008a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4e:	f003 0308 	and.w	r3, r3, #8
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00a      	beq.n	8008a6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	430a      	orrs	r2, r1
 8008a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a70:	f003 0310 	and.w	r3, r3, #16
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00a      	beq.n	8008a8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a92:	f003 0320 	and.w	r3, r3, #32
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00a      	beq.n	8008ab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d01a      	beq.n	8008af2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ada:	d10a      	bne.n	8008af2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00a      	beq.n	8008b14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	430a      	orrs	r2, r1
 8008b12:	605a      	str	r2, [r3, #4]
  }
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af02      	add	r7, sp, #8
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008b2e:	f7f9 ff4b 	bl	80029c8 <HAL_GetTick>
 8008b32:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 0308 	and.w	r3, r3, #8
 8008b3e:	2b08      	cmp	r3, #8
 8008b40:	d10e      	bne.n	8008b60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f82a 	bl	8008baa <UART_WaitOnFlagUntilTimeout>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e020      	b.n	8008ba2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 0304 	and.w	r3, r3, #4
 8008b6a:	2b04      	cmp	r3, #4
 8008b6c:	d10e      	bne.n	8008b8c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f814 	bl	8008baa <UART_WaitOnFlagUntilTimeout>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	e00a      	b.n	8008ba2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2220      	movs	r2, #32
 8008b96:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	60f8      	str	r0, [r7, #12]
 8008bb2:	60b9      	str	r1, [r7, #8]
 8008bb4:	603b      	str	r3, [r7, #0]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bba:	e02a      	b.n	8008c12 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc2:	d026      	beq.n	8008c12 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bc4:	f7f9 ff00 	bl	80029c8 <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d302      	bcc.n	8008bda <UART_WaitOnFlagUntilTimeout+0x30>
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d11b      	bne.n	8008c12 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008be8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f022 0201 	bic.w	r2, r2, #1
 8008bf8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2220      	movs	r2, #32
 8008c04:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e00f      	b.n	8008c32 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	69da      	ldr	r2, [r3, #28]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	bf0c      	ite	eq
 8008c22:	2301      	moveq	r3, #1
 8008c24:	2300      	movne	r3, #0
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	461a      	mov	r2, r3
 8008c2a:	79fb      	ldrb	r3, [r7, #7]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d0c5      	beq.n	8008bbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	f107 001c 	add.w	r0, r7, #28
 8008c48:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d122      	bne.n	8008c98 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d105      	bne.n	8008c8c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f937 	bl	8008f00 <USB_CoreReset>
 8008c92:	4603      	mov	r3, r0
 8008c94:	73fb      	strb	r3, [r7, #15]
 8008c96:	e01a      	b.n	8008cce <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f92b 	bl	8008f00 <USB_CoreReset>
 8008caa:	4603      	mov	r3, r0
 8008cac:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d106      	bne.n	8008cc2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	639a      	str	r2, [r3, #56]	; 0x38
 8008cc0:	e005      	b.n	8008cce <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cda:	b004      	add	sp, #16
 8008cdc:	4770      	bx	lr

08008cde <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b083      	sub	sp, #12
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f043 0201 	orr.w	r2, r3, #1
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f023 0201 	bic.w	r2, r3, #1
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b082      	sub	sp, #8
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d106      	bne.n	8008d4e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	60da      	str	r2, [r3, #12]
 8008d4c:	e00b      	b.n	8008d66 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d106      	bne.n	8008d62 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	60da      	str	r2, [r3, #12]
 8008d60:	e001      	b.n	8008d66 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e003      	b.n	8008d6e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008d66:	2032      	movs	r0, #50	; 0x32
 8008d68:	f7f9 fe3a 	bl	80029e0 <HAL_Delay>

  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
	...

08008d78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	019b      	lsls	r3, r3, #6
 8008d8a:	f043 0220 	orr.w	r2, r3, #32
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	3301      	adds	r3, #1
 8008d96:	60fb      	str	r3, [r7, #12]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4a09      	ldr	r2, [pc, #36]	; (8008dc0 <USB_FlushTxFifo+0x48>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d901      	bls.n	8008da4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e006      	b.n	8008db2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b20      	cmp	r3, #32
 8008dae:	d0f0      	beq.n	8008d92 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	00030d40 	.word	0x00030d40

08008dc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2210      	movs	r2, #16
 8008dd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	60fb      	str	r3, [r7, #12]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	4a09      	ldr	r2, [pc, #36]	; (8008e04 <USB_FlushRxFifo+0x40>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d901      	bls.n	8008de8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008de4:	2303      	movs	r3, #3
 8008de6:	e006      	b.n	8008df6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	f003 0310 	and.w	r3, r3, #16
 8008df0:	2b10      	cmp	r3, #16
 8008df2:	d0f0      	beq.n	8008dd6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	00030d40 	.word	0x00030d40

08008e08 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b089      	sub	sp, #36	; 0x24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	4611      	mov	r1, r2
 8008e14:	461a      	mov	r2, r3
 8008e16:	460b      	mov	r3, r1
 8008e18:	71fb      	strb	r3, [r7, #7]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008e26:	88bb      	ldrh	r3, [r7, #4]
 8008e28:	3303      	adds	r3, #3
 8008e2a:	089b      	lsrs	r3, r3, #2
 8008e2c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008e2e:	2300      	movs	r3, #0
 8008e30:	61bb      	str	r3, [r7, #24]
 8008e32:	e00f      	b.n	8008e54 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008e34:	79fb      	ldrb	r3, [r7, #7]
 8008e36:	031a      	lsls	r2, r3, #12
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e40:	461a      	mov	r2, r3
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	3301      	adds	r3, #1
 8008e52:	61bb      	str	r3, [r7, #24]
 8008e54:	69ba      	ldr	r2, [r7, #24]
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d3eb      	bcc.n	8008e34 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3724      	adds	r7, #36	; 0x24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b089      	sub	sp, #36	; 0x24
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	60f8      	str	r0, [r7, #12]
 8008e72:	60b9      	str	r1, [r7, #8]
 8008e74:	4613      	mov	r3, r2
 8008e76:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008e80:	88fb      	ldrh	r3, [r7, #6]
 8008e82:	3303      	adds	r3, #3
 8008e84:	089b      	lsrs	r3, r3, #2
 8008e86:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	61bb      	str	r3, [r7, #24]
 8008e8c:	e00b      	b.n	8008ea6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	61bb      	str	r3, [r7, #24]
 8008ea6:	69ba      	ldr	r2, [r7, #24]
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d3ef      	bcc.n	8008e8e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008eae:	69fb      	ldr	r3, [r7, #28]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3724      	adds	r7, #36	; 0x24
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b083      	sub	sp, #12
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	f003 0301 	and.w	r3, r3, #1
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
	...

08008f00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	4a13      	ldr	r2, [pc, #76]	; (8008f64 <USB_CoreReset+0x64>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d901      	bls.n	8008f1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e01b      	b.n	8008f56 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	daf2      	bge.n	8008f0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f26:	2300      	movs	r3, #0
 8008f28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	f043 0201 	orr.w	r2, r3, #1
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	60fb      	str	r3, [r7, #12]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4a09      	ldr	r2, [pc, #36]	; (8008f64 <USB_CoreReset+0x64>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d901      	bls.n	8008f48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f44:	2303      	movs	r3, #3
 8008f46:	e006      	b.n	8008f56 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d0f0      	beq.n	8008f36 <USB_CoreReset+0x36>

  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	00030d40 	.word	0x00030d40

08008f68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f68:	b084      	sub	sp, #16
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b084      	sub	sp, #16
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	f107 001c 	add.w	r0, r7, #28
 8008f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f84:	461a      	mov	r2, r3
 8008f86:	2300      	movs	r3, #0
 8008f88:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fb0:	f023 0304 	bic.w	r3, r3, #4
 8008fb4:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008fb6:	2110      	movs	r1, #16
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7ff fedd 	bl	8008d78 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7ff ff00 	bl	8008dc4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	60fb      	str	r3, [r7, #12]
 8008fc8:	e015      	b.n	8008ff6 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fdc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	015a      	lsls	r2, r3, #5
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fea:	461a      	mov	r2, r3
 8008fec:	2300      	movs	r3, #0
 8008fee:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	60fb      	str	r3, [r7, #12]
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d3e5      	bcc.n	8008fca <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008ffe:	2101      	movs	r1, #1
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f893 	bl	800912c <USB_DriveVbus>

  HAL_Delay(200U);
 8009006:	20c8      	movs	r0, #200	; 0xc8
 8009008:	f7f9 fcea 	bl	80029e0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f04f 32ff 	mov.w	r2, #4294967295
 8009018:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2280      	movs	r2, #128	; 0x80
 800901e:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a0d      	ldr	r2, [pc, #52]	; (8009058 <USB_HostInit+0xf0>)
 8009024:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a0c      	ldr	r2, [pc, #48]	; (800905c <USB_HostInit+0xf4>)
 800902a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	f043 0210 	orr.w	r2, r3, #16
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	699a      	ldr	r2, [r3, #24]
 800903e:	4b08      	ldr	r3, [pc, #32]	; (8009060 <USB_HostInit+0xf8>)
 8009040:	4313      	orrs	r3, r2
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009052:	b004      	add	sp, #16
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	00600080 	.word	0x00600080
 800905c:	004000e0 	.word	0x004000e0
 8009060:	a3200008 	.word	0xa3200008

08009064 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	460b      	mov	r3, r1
 800906e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009082:	f023 0303 	bic.w	r3, r3, #3
 8009086:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	78fb      	ldrb	r3, [r7, #3]
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	68f9      	ldr	r1, [r7, #12]
 8009098:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800909c:	4313      	orrs	r3, r2
 800909e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80090a0:	78fb      	ldrb	r3, [r7, #3]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d107      	bne.n	80090b6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090ac:	461a      	mov	r2, r3
 80090ae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80090b2:	6053      	str	r3, [r2, #4]
 80090b4:	e009      	b.n	80090ca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80090b6:	78fb      	ldrb	r3, [r7, #3]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d106      	bne.n	80090ca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090c2:	461a      	mov	r2, r3
 80090c4:	f241 7370 	movw	r3, #6000	; 0x1770
 80090c8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80090f8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009106:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009108:	2064      	movs	r0, #100	; 0x64
 800910a:	f7f9 fc69 	bl	80029e0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009116:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800911a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800911c:	200a      	movs	r0, #10
 800911e:	f7f9 fc5f 	bl	80029e0 <HAL_Delay>

  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	460b      	mov	r3, r1
 8009136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800913c:	2300      	movs	r3, #0
 800913e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009150:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d109      	bne.n	8009170 <USB_DriveVbus+0x44>
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d106      	bne.n	8009170 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800916a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800916e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800917a:	d109      	bne.n	8009190 <USB_DriveVbus+0x64>
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d106      	bne.n	8009190 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800918a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800918e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800919e:	b480      	push	{r7}
 80091a0:	b085      	sub	sp, #20
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80091aa:	2300      	movs	r3, #0
 80091ac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	0c5b      	lsrs	r3, r3, #17
 80091bc:	f003 0303 	and.w	r3, r3, #3
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3714      	adds	r7, #20
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	b29b      	uxth	r3, r3
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3714      	adds	r7, #20
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
	...

080091f0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b087      	sub	sp, #28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	4608      	mov	r0, r1
 80091fa:	4611      	mov	r1, r2
 80091fc:	461a      	mov	r2, r3
 80091fe:	4603      	mov	r3, r0
 8009200:	70fb      	strb	r3, [r7, #3]
 8009202:	460b      	mov	r3, r1
 8009204:	70bb      	strb	r3, [r7, #2]
 8009206:	4613      	mov	r3, r2
 8009208:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009212:	78fb      	ldrb	r3, [r7, #3]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	4413      	add	r3, r2
 800921a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800921e:	461a      	mov	r2, r3
 8009220:	f04f 33ff 	mov.w	r3, #4294967295
 8009224:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009226:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800922a:	2b03      	cmp	r3, #3
 800922c:	d867      	bhi.n	80092fe <USB_HC_Init+0x10e>
 800922e:	a201      	add	r2, pc, #4	; (adr r2, 8009234 <USB_HC_Init+0x44>)
 8009230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009234:	08009245 	.word	0x08009245
 8009238:	080092c1 	.word	0x080092c1
 800923c:	08009245 	.word	0x08009245
 8009240:	08009283 	.word	0x08009283
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009244:	78fb      	ldrb	r3, [r7, #3]
 8009246:	015a      	lsls	r2, r3, #5
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	4413      	add	r3, r2
 800924c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009250:	461a      	mov	r2, r3
 8009252:	f240 439d 	movw	r3, #1181	; 0x49d
 8009256:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009258:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800925c:	2b00      	cmp	r3, #0
 800925e:	da51      	bge.n	8009304 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009260:	78fb      	ldrb	r3, [r7, #3]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	4413      	add	r3, r2
 8009268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	78fa      	ldrb	r2, [r7, #3]
 8009270:	0151      	lsls	r1, r2, #5
 8009272:	68ba      	ldr	r2, [r7, #8]
 8009274:	440a      	add	r2, r1
 8009276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800927a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800927e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009280:	e040      	b.n	8009304 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009282:	78fb      	ldrb	r3, [r7, #3]
 8009284:	015a      	lsls	r2, r3, #5
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	4413      	add	r3, r2
 800928a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800928e:	461a      	mov	r2, r3
 8009290:	f240 639d 	movw	r3, #1693	; 0x69d
 8009294:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009296:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800929a:	2b00      	cmp	r3, #0
 800929c:	da34      	bge.n	8009308 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800929e:	78fb      	ldrb	r3, [r7, #3]
 80092a0:	015a      	lsls	r2, r3, #5
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	4413      	add	r3, r2
 80092a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	78fa      	ldrb	r2, [r7, #3]
 80092ae:	0151      	lsls	r1, r2, #5
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	440a      	add	r2, r1
 80092b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092bc:	60d3      	str	r3, [r2, #12]
      }

      break;
 80092be:	e023      	b.n	8009308 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	015a      	lsls	r2, r3, #5
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092cc:	461a      	mov	r2, r3
 80092ce:	f240 2325 	movw	r3, #549	; 0x225
 80092d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80092d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	da17      	bge.n	800930c <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	78fa      	ldrb	r2, [r7, #3]
 80092ec:	0151      	lsls	r1, r2, #5
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	440a      	add	r2, r1
 80092f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092f6:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80092fa:	60d3      	str	r3, [r2, #12]
      }
      break;
 80092fc:	e006      	b.n	800930c <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	75fb      	strb	r3, [r7, #23]
      break;
 8009302:	e004      	b.n	800930e <USB_HC_Init+0x11e>
      break;
 8009304:	bf00      	nop
 8009306:	e002      	b.n	800930e <USB_HC_Init+0x11e>
      break;
 8009308:	bf00      	nop
 800930a:	e000      	b.n	800930e <USB_HC_Init+0x11e>
      break;
 800930c:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009314:	699a      	ldr	r2, [r3, #24]
 8009316:	78fb      	ldrb	r3, [r7, #3]
 8009318:	f003 030f 	and.w	r3, r3, #15
 800931c:	2101      	movs	r1, #1
 800931e:	fa01 f303 	lsl.w	r3, r1, r3
 8009322:	68b9      	ldr	r1, [r7, #8]
 8009324:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009328:	4313      	orrs	r3, r2
 800932a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009338:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800933c:	2b00      	cmp	r3, #0
 800933e:	da03      	bge.n	8009348 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009344:	613b      	str	r3, [r7, #16]
 8009346:	e001      	b.n	800934c <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8009348:	2300      	movs	r3, #0
 800934a:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800934c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009350:	2b02      	cmp	r3, #2
 8009352:	d103      	bne.n	800935c <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009354:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009358:	60fb      	str	r3, [r7, #12]
 800935a:	e001      	b.n	8009360 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800935c:	2300      	movs	r3, #0
 800935e:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009360:	787b      	ldrb	r3, [r7, #1]
 8009362:	059b      	lsls	r3, r3, #22
 8009364:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009368:	78bb      	ldrb	r3, [r7, #2]
 800936a:	02db      	lsls	r3, r3, #11
 800936c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009370:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009372:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009376:	049b      	lsls	r3, r3, #18
 8009378:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800937c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800937e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009380:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009384:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800938a:	78fb      	ldrb	r3, [r7, #3]
 800938c:	0159      	lsls	r1, r3, #5
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	440b      	add	r3, r1
 8009392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009396:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800939c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800939e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80093a2:	2b03      	cmp	r3, #3
 80093a4:	d10f      	bne.n	80093c6 <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80093a6:	78fb      	ldrb	r3, [r7, #3]
 80093a8:	015a      	lsls	r2, r3, #5
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	4413      	add	r3, r2
 80093ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	78fa      	ldrb	r2, [r7, #3]
 80093b6:	0151      	lsls	r1, r2, #5
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	440a      	add	r2, r1
 80093bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093c4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	371c      	adds	r7, #28
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b088      	sub	sp, #32
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	785b      	ldrb	r3, [r3, #1]
 80093e6:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80093e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093ec:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d018      	beq.n	8009428 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	8912      	ldrh	r2, [r2, #8]
 80093fe:	4413      	add	r3, r2
 8009400:	3b01      	subs	r3, #1
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	8912      	ldrh	r2, [r2, #8]
 8009406:	fbb3 f3f2 	udiv	r3, r3, r2
 800940a:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 800940c:	8bfa      	ldrh	r2, [r7, #30]
 800940e:	8a7b      	ldrh	r3, [r7, #18]
 8009410:	429a      	cmp	r2, r3
 8009412:	d90b      	bls.n	800942c <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8009414:	8a7b      	ldrh	r3, [r7, #18]
 8009416:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8009418:	8bfb      	ldrh	r3, [r7, #30]
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	8912      	ldrh	r2, [r2, #8]
 800941e:	fb02 f203 	mul.w	r2, r2, r3
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	611a      	str	r2, [r3, #16]
 8009426:	e001      	b.n	800942c <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8009428:	2301      	movs	r3, #1
 800942a:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	78db      	ldrb	r3, [r3, #3]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d006      	beq.n	8009442 <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8009434:	8bfb      	ldrh	r3, [r7, #30]
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	8912      	ldrh	r2, [r2, #8]
 800943a:	fb02 f203 	mul.w	r2, r2, r3
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800944a:	8bfb      	ldrh	r3, [r7, #30]
 800944c:	04d9      	lsls	r1, r3, #19
 800944e:	4b5f      	ldr	r3, [pc, #380]	; (80095cc <USB_HC_StartXfer+0x1f8>)
 8009450:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009452:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	7a9b      	ldrb	r3, [r3, #10]
 8009458:	075b      	lsls	r3, r3, #29
 800945a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800945e:	6979      	ldr	r1, [r7, #20]
 8009460:	0148      	lsls	r0, r1, #5
 8009462:	69b9      	ldr	r1, [r7, #24]
 8009464:	4401      	add	r1, r0
 8009466:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800946a:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800946c:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	2b00      	cmp	r3, #0
 800947c:	bf0c      	ite	eq
 800947e:	2301      	moveq	r3, #1
 8009480:	2300      	movne	r3, #0
 8009482:	b2db      	uxtb	r3, r3
 8009484:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	015a      	lsls	r2, r3, #5
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	4413      	add	r3, r2
 800948e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	0151      	lsls	r1, r2, #5
 8009498:	69ba      	ldr	r2, [r7, #24]
 800949a:	440a      	add	r2, r1
 800949c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80094a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	7c7b      	ldrb	r3, [r7, #17]
 80094b6:	075b      	lsls	r3, r3, #29
 80094b8:	6979      	ldr	r1, [r7, #20]
 80094ba:	0148      	lsls	r0, r1, #5
 80094bc:	69b9      	ldr	r1, [r7, #24]
 80094be:	4401      	add	r1, r0
 80094c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80094c4:	4313      	orrs	r3, r2
 80094c6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a3e      	ldr	r2, [pc, #248]	; (80095d0 <USB_HC_StartXfer+0x1fc>)
 80094d8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80094da:	4b3d      	ldr	r3, [pc, #244]	; (80095d0 <USB_HC_StartXfer+0x1fc>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80094e2:	4a3b      	ldr	r2, [pc, #236]	; (80095d0 <USB_HC_StartXfer+0x1fc>)
 80094e4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	78db      	ldrb	r3, [r3, #3]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d006      	beq.n	80094fc <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80094ee:	4b38      	ldr	r3, [pc, #224]	; (80095d0 <USB_HC_StartXfer+0x1fc>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094f6:	4a36      	ldr	r2, [pc, #216]	; (80095d0 <USB_HC_StartXfer+0x1fc>)
 80094f8:	6013      	str	r3, [r2, #0]
 80094fa:	e005      	b.n	8009508 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80094fc:	4b34      	ldr	r3, [pc, #208]	; (80095d0 <USB_HC_StartXfer+0x1fc>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009504:	4a32      	ldr	r2, [pc, #200]	; (80095d0 <USB_HC_StartXfer+0x1fc>)
 8009506:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009508:	4b31      	ldr	r3, [pc, #196]	; (80095d0 <USB_HC_StartXfer+0x1fc>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009510:	4a2f      	ldr	r2, [pc, #188]	; (80095d0 <USB_HC_StartXfer+0x1fc>)
 8009512:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	4413      	add	r3, r2
 800951c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009520:	461a      	mov	r2, r3
 8009522:	4b2b      	ldr	r3, [pc, #172]	; (80095d0 <USB_HC_StartXfer+0x1fc>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	78db      	ldrb	r3, [r3, #3]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d148      	bne.n	80095c2 <USB_HC_StartXfer+0x1ee>
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d044      	beq.n	80095c2 <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	79db      	ldrb	r3, [r3, #7]
 800953c:	2b03      	cmp	r3, #3
 800953e:	d831      	bhi.n	80095a4 <USB_HC_StartXfer+0x1d0>
 8009540:	a201      	add	r2, pc, #4	; (adr r2, 8009548 <USB_HC_StartXfer+0x174>)
 8009542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009546:	bf00      	nop
 8009548:	08009559 	.word	0x08009559
 800954c:	0800957d 	.word	0x0800957d
 8009550:	08009559 	.word	0x08009559
 8009554:	0800957d 	.word	0x0800957d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	3303      	adds	r3, #3
 800955e:	089b      	lsrs	r3, r3, #2
 8009560:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009562:	89fa      	ldrh	r2, [r7, #14]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009568:	b29b      	uxth	r3, r3
 800956a:	429a      	cmp	r2, r3
 800956c:	d91c      	bls.n	80095a8 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	f043 0220 	orr.w	r2, r3, #32
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	619a      	str	r2, [r3, #24]
          }
          break;
 800957a:	e015      	b.n	80095a8 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	3303      	adds	r3, #3
 8009582:	089b      	lsrs	r3, r3, #2
 8009584:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009586:	89fa      	ldrh	r2, [r7, #14]
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	b29b      	uxth	r3, r3
 8009592:	429a      	cmp	r2, r3
 8009594:	d90a      	bls.n	80095ac <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	619a      	str	r2, [r3, #24]
          }
          break;
 80095a2:	e003      	b.n	80095ac <USB_HC_StartXfer+0x1d8>

        default:
          break;
 80095a4:	bf00      	nop
 80095a6:	e002      	b.n	80095ae <USB_HC_StartXfer+0x1da>
          break;
 80095a8:	bf00      	nop
 80095aa:	e000      	b.n	80095ae <USB_HC_StartXfer+0x1da>
          break;
 80095ac:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	68d9      	ldr	r1, [r3, #12]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	785a      	ldrb	r2, [r3, #1]
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff fc23 	bl	8008e08 <USB_WritePacket>
    }

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3720      	adds	r7, #32
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	1ff80000 	.word	0x1ff80000
 80095d0:	200004f4 	.word	0x200004f4

080095d4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	b29b      	uxth	r3, r3
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3714      	adds	r7, #20
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b087      	sub	sp, #28
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	460b      	mov	r3, r1
 8009600:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8009606:	78fb      	ldrb	r3, [r7, #3]
 8009608:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800960a:	2300      	movs	r3, #0
 800960c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	4413      	add	r3, r2
 8009616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	0c9b      	lsrs	r3, r3, #18
 800961e:	f003 0303 	and.w	r3, r3, #3
 8009622:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d002      	beq.n	8009630 <USB_HC_Halt+0x3a>
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	2b02      	cmp	r3, #2
 800962e:	d16c      	bne.n	800970a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	4413      	add	r3, r2
 8009638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	0151      	lsls	r1, r2, #5
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	440a      	add	r2, r1
 8009646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800964a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800964e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009654:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d143      	bne.n	80096e4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	015a      	lsls	r2, r3, #5
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	4413      	add	r3, r2
 8009664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	0151      	lsls	r1, r2, #5
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	440a      	add	r2, r1
 8009672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009676:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800967a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	015a      	lsls	r2, r3, #5
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	4413      	add	r3, r2
 8009684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	0151      	lsls	r1, r2, #5
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	440a      	add	r2, r1
 8009692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009696:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800969a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	0151      	lsls	r1, r2, #5
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	440a      	add	r2, r1
 80096b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096ba:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	3301      	adds	r3, #1
 80096c0:	617b      	str	r3, [r7, #20]
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096c8:	d81d      	bhi.n	8009706 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	015a      	lsls	r2, r3, #5
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	4413      	add	r3, r2
 80096d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096e0:	d0ec      	beq.n	80096bc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80096e2:	e080      	b.n	80097e6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
=======
 8004466:	4403      	add	r3, r0
 8004468:	3358      	adds	r3, #88	; 0x58
 800446a:	6019      	str	r1, [r3, #0]
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	440b      	add	r3, r1
 800447a:	3358      	adds	r3, #88	; 0x58
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b03      	cmp	r3, #3
 8004480:	d914      	bls.n	80044ac <HCD_HC_OUT_IRQHandler+0x62a>
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	440b      	add	r3, r1
 8004490:	3358      	adds	r3, #88	; 0x58
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	440b      	add	r3, r1
 80044a4:	335c      	adds	r3, #92	; 0x5c
 80044a6:	2204      	movs	r2, #4
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	e009      	b.n	80044c0 <HCD_HC_OUT_IRQHandler+0x63e>
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	440b      	add	r3, r1
 80044ba:	335c      	adds	r3, #92	; 0x5c
 80044bc:	2202      	movs	r2, #2
 80044be:	701a      	strb	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60bb      	str	r3, [r7, #8]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ec:	461a      	mov	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fe:	461a      	mov	r2, r3
 8004500:	2302      	movs	r3, #2
 8004502:	6093      	str	r3, [r2, #8]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	b2d8      	uxtb	r0, r3
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	440b      	add	r3, r1
 8004516:	335c      	adds	r3, #92	; 0x5c
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	4601      	mov	r1, r0
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f007 f844 	bl	800b5ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8004524:	bf00      	nop
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HCD_RXQLVL_IRQHandler>:
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	; 0x28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	623b      	str	r3, [r7, #32]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	61fb      	str	r3, [r7, #28]
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	f003 030f 	and.w	r3, r3, #15
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	0c5b      	lsrs	r3, r3, #17
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d003      	beq.n	8004570 <HCD_RXQLVL_IRQHandler+0x44>
 8004568:	2b05      	cmp	r3, #5
 800456a:	f000 8082 	beq.w	8004672 <HCD_RXQLVL_IRQHandler+0x146>
 800456e:	e083      	b.n	8004678 <HCD_RXQLVL_IRQHandler+0x14c>
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d07f      	beq.n	8004676 <HCD_RXQLVL_IRQHandler+0x14a>
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	440b      	add	r3, r1
 8004584:	3344      	adds	r3, #68	; 0x44
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d074      	beq.n	8004676 <HCD_RXQLVL_IRQHandler+0x14a>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	440b      	add	r3, r1
 800459e:	3344      	adds	r3, #68	; 0x44
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	b292      	uxth	r2, r2
 80045a6:	4619      	mov	r1, r3
 80045a8:	f004 fbfd 	bl	8008da6 <USB_ReadPacket>
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4613      	mov	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	440b      	add	r3, r1
 80045ba:	3344      	adds	r3, #68	; 0x44
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	18d1      	adds	r1, r2, r3
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	4403      	add	r3, r0
 80045d0:	3344      	adds	r3, #68	; 0x44
 80045d2:	6019      	str	r1, [r3, #0]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	440b      	add	r3, r1
 80045e2:	334c      	adds	r3, #76	; 0x4c
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	18d1      	adds	r1, r2, r3
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4403      	add	r3, r0
 80045f8:	334c      	adds	r3, #76	; 0x4c
 80045fa:	6019      	str	r1, [r3, #0]
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	4413      	add	r3, r2
 8004604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <HCD_RXQLVL_IRQHandler+0x154>)
 800460c:	4013      	ands	r3, r2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d031      	beq.n	8004676 <HCD_RXQLVL_IRQHandler+0x14a>
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	4413      	add	r3, r2
 800461a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	4413      	add	r3, r2
 800463a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463e:	461a      	mov	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	440b      	add	r3, r1
 8004652:	3350      	adds	r3, #80	; 0x50
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	f083 0301 	eor.w	r3, r3, #1
 800465a:	b2d8      	uxtb	r0, r3
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	440b      	add	r3, r1
 800466a:	3350      	adds	r3, #80	; 0x50
 800466c:	4602      	mov	r2, r0
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	e001      	b.n	8004676 <HCD_RXQLVL_IRQHandler+0x14a>
 8004672:	bf00      	nop
 8004674:	e000      	b.n	8004678 <HCD_RXQLVL_IRQHandler+0x14c>
 8004676:	bf00      	nop
 8004678:	bf00      	nop
 800467a:	3728      	adds	r7, #40	; 0x28
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	1ff80000 	.word	0x1ff80000

08004684 <HCD_Port_IRQHandler>:
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d113      	bne.n	80046e4 <HCD_Port_IRQHandler+0x60>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d10a      	bne.n	80046dc <HCD_Port_IRQHandler+0x58>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699a      	ldr	r2, [r3, #24]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80046d4:	619a      	str	r2, [r3, #24]
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f006 ff4c 	bl	800b574 <HAL_HCD_Connect_Callback>
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f043 0302 	orr.w	r3, r3, #2
 80046e2:	60bb      	str	r3, [r7, #8]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d147      	bne.n	800477e <HCD_Port_IRQHandler+0xfa>
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f043 0308 	orr.w	r3, r3, #8
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d129      	bne.n	8004754 <HCD_Port_IRQHandler+0xd0>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d113      	bne.n	8004730 <HCD_Port_IRQHandler+0xac>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800470e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004712:	d106      	bne.n	8004722 <HCD_Port_IRQHandler+0x9e>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2102      	movs	r1, #2
 800471a:	4618      	mov	r0, r3
 800471c:	f004 fc40 	bl	8008fa0 <USB_InitFSLSPClkSel>
 8004720:	e011      	b.n	8004746 <HCD_Port_IRQHandler+0xc2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2101      	movs	r1, #1
 8004728:	4618      	mov	r0, r3
 800472a:	f004 fc39 	bl	8008fa0 <USB_InitFSLSPClkSel>
 800472e:	e00a      	b.n	8004746 <HCD_Port_IRQHandler+0xc2>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d106      	bne.n	8004746 <HCD_Port_IRQHandler+0xc2>
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800473e:	461a      	mov	r2, r3
 8004740:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004744:	6053      	str	r3, [r2, #4]
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f006 ff3e 	bl	800b5c8 <HAL_HCD_PortEnabled_Callback>
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f006 ff11 	bl	800b574 <HAL_HCD_Connect_Callback>
 8004752:	e014      	b.n	800477e <HCD_Port_IRQHandler+0xfa>
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f006 ff45 	bl	800b5e4 <HAL_HCD_PortDisabled_Callback>
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004768:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699a      	ldr	r2, [r3, #24]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800477c:	619a      	str	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b20      	cmp	r3, #32
 8004786:	d103      	bne.n	8004790 <HCD_Port_IRQHandler+0x10c>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f043 0320 	orr.w	r3, r3, #32
 800478e:	60bb      	str	r3, [r7, #8]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004796:	461a      	mov	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	bf00      	nop
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_I2C_Init>:
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_I2C_Init+0x12>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e081      	b.n	80048ba <HAL_I2C_Init+0x116>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <HAL_I2C_Init+0x2c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fc f992 	bl	8000af4 <HAL_I2C_MspInit>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2224      	movs	r2, #36	; 0x24
 80047d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0201 	bic.w	r2, r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047f4:	611a      	str	r2, [r3, #16]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004804:	609a      	str	r2, [r3, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d107      	bne.n	800481e <HAL_I2C_Init+0x7a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	e006      	b.n	800482c <HAL_I2C_Init+0x88>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d104      	bne.n	800483e <HAL_I2C_Init+0x9a>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800483c:	605a      	str	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800484c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004850:	6053      	str	r3, [r2, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004860:	60da      	str	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	ea42 0103 	orr.w	r1, r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	021a      	lsls	r2, r3, #8
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	60da      	str	r2, [r3, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69d9      	ldr	r1, [r3, #28]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1a      	ldr	r2, [r3, #32]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	645a      	str	r2, [r3, #68]	; 0x44
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048b8:	2300      	movs	r3, #0
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <HAL_I2C_Mem_Write>:
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	4608      	mov	r0, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	817b      	strh	r3, [r7, #10]
 80048d6:	460b      	mov	r3, r1
 80048d8:	813b      	strh	r3, [r7, #8]
 80048da:	4613      	mov	r3, r2
 80048dc:	80fb      	strh	r3, [r7, #6]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	f040 80f9 	bne.w	8004ade <HAL_I2C_Mem_Write+0x21a>
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_I2C_Mem_Write+0x34>
 80048f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d105      	bne.n	8004904 <HAL_I2C_Mem_Write+0x40>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048fe:	645a      	str	r2, [r3, #68]	; 0x44
 8004900:	2301      	movs	r3, #1
 8004902:	e0ed      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x21c>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_I2C_Mem_Write+0x4e>
 800490e:	2302      	movs	r3, #2
 8004910:	e0e6      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x21c>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800491a:	f7fd fff3 	bl	8002904 <HAL_GetTick>
 800491e:	6178      	str	r0, [r7, #20]
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	2319      	movs	r3, #25
 8004926:	2201      	movs	r2, #1
 8004928:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f955 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <HAL_I2C_Mem_Write+0x78>
 8004938:	2301      	movs	r3, #1
 800493a:	e0d1      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x21c>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2221      	movs	r2, #33	; 0x21
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2240      	movs	r2, #64	; 0x40
 8004948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	645a      	str	r2, [r3, #68]	; 0x44
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a3a      	ldr	r2, [r7, #32]
 8004956:	625a      	str	r2, [r3, #36]	; 0x24
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800495c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	635a      	str	r2, [r3, #52]	; 0x34
 8004964:	88f8      	ldrh	r0, [r7, #6]
 8004966:	893a      	ldrh	r2, [r7, #8]
 8004968:	8979      	ldrh	r1, [r7, #10]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	4603      	mov	r3, r0
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 f8b9 	bl	8004aec <I2C_RequestMemoryWrite>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_I2C_Mem_Write+0xc8>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004988:	2301      	movs	r3, #1
 800498a:	e0a9      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x21c>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	2bff      	cmp	r3, #255	; 0xff
 8004994:	d90e      	bls.n	80049b4 <HAL_I2C_Mem_Write+0xf0>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	22ff      	movs	r2, #255	; 0xff
 800499a:	851a      	strh	r2, [r3, #40]	; 0x28
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	8979      	ldrh	r1, [r7, #10]
 80049a4:	2300      	movs	r3, #0
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 fa37 	bl	8004e20 <I2C_TransferConfig>
 80049b2:	e00f      	b.n	80049d4 <HAL_I2C_Mem_Write+0x110>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	851a      	strh	r2, [r3, #40]	; 0x28
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	8979      	ldrh	r1, [r7, #10]
 80049c6:	2300      	movs	r3, #0
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 fa26 	bl	8004e20 <I2C_TransferConfig>
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f93f 	bl	8004c5c <I2C_WaitOnTXISFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_I2C_Mem_Write+0x124>
 80049e4:	2301      	movs	r3, #1
 80049e6:	e07b      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x21c>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	781a      	ldrb	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	629a      	str	r2, [r3, #40]	; 0x28
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	625a      	str	r2, [r3, #36]	; 0x24
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	851a      	strh	r2, [r3, #40]	; 0x28
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d034      	beq.n	8004a8c <HAL_I2C_Mem_Write+0x1c8>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d130      	bne.n	8004a8c <HAL_I2C_Mem_Write+0x1c8>
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	2200      	movs	r2, #0
 8004a32:	2180      	movs	r1, #128	; 0x80
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f8d1 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_I2C_Mem_Write+0x180>
 8004a40:	2301      	movs	r3, #1
 8004a42:	e04d      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x21c>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2bff      	cmp	r3, #255	; 0xff
 8004a4c:	d90e      	bls.n	8004a6c <HAL_I2C_Mem_Write+0x1a8>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	22ff      	movs	r2, #255	; 0xff
 8004a52:	851a      	strh	r2, [r3, #40]	; 0x28
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	8979      	ldrh	r1, [r7, #10]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f9db 	bl	8004e20 <I2C_TransferConfig>
 8004a6a:	e00f      	b.n	8004a8c <HAL_I2C_Mem_Write+0x1c8>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	851a      	strh	r2, [r3, #40]	; 0x28
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	8979      	ldrh	r1, [r7, #10]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f9ca 	bl	8004e20 <I2C_TransferConfig>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d19e      	bne.n	80049d4 <HAL_I2C_Mem_Write+0x110>
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 f91e 	bl	8004cdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_I2C_Mem_Write+0x1e6>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e01a      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x21c>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	61da      	str	r2, [r3, #28]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6859      	ldr	r1, [r3, #4]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <HAL_I2C_Mem_Write+0x224>)
 8004abe:	400b      	ands	r3, r1
 8004ac0:	6053      	str	r3, [r2, #4]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ada:	2300      	movs	r3, #0
 8004adc:	e000      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x21c>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	fe00e800 	.word	0xfe00e800

08004aec <I2C_RequestMemoryWrite>:
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	4608      	mov	r0, r1
 8004af6:	4611      	mov	r1, r2
 8004af8:	461a      	mov	r2, r3
 8004afa:	4603      	mov	r3, r0
 8004afc:	817b      	strh	r3, [r7, #10]
 8004afe:	460b      	mov	r3, r1
 8004b00:	813b      	strh	r3, [r7, #8]
 8004b02:	4613      	mov	r3, r2
 8004b04:	80fb      	strh	r3, [r7, #6]
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	8979      	ldrh	r1, [r7, #10]
 8004b0c:	4b20      	ldr	r3, [pc, #128]	; (8004b90 <I2C_RequestMemoryWrite+0xa4>)
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f983 	bl	8004e20 <I2C_TransferConfig>
 8004b1a:	69fa      	ldr	r2, [r7, #28]
 8004b1c:	69b9      	ldr	r1, [r7, #24]
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f89c 	bl	8004c5c <I2C_WaitOnTXISFlagUntilTimeout>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <I2C_RequestMemoryWrite+0x42>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e02c      	b.n	8004b88 <I2C_RequestMemoryWrite+0x9c>
 8004b2e:	88fb      	ldrh	r3, [r7, #6]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d105      	bne.n	8004b40 <I2C_RequestMemoryWrite+0x54>
 8004b34:	893b      	ldrh	r3, [r7, #8]
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	629a      	str	r2, [r3, #40]	; 0x28
 8004b3e:	e015      	b.n	8004b6c <I2C_RequestMemoryWrite+0x80>
 8004b40:	893b      	ldrh	r3, [r7, #8]
 8004b42:	0a1b      	lsrs	r3, r3, #8
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	629a      	str	r2, [r3, #40]	; 0x28
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	69b9      	ldr	r1, [r7, #24]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f882 	bl	8004c5c <I2C_WaitOnTXISFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <I2C_RequestMemoryWrite+0x76>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e012      	b.n	8004b88 <I2C_RequestMemoryWrite+0x9c>
 8004b62:	893b      	ldrh	r3, [r7, #8]
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2200      	movs	r2, #0
 8004b74:	2180      	movs	r1, #128	; 0x80
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 f830 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <I2C_RequestMemoryWrite+0x9a>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <I2C_RequestMemoryWrite+0x9c>
 8004b86:	2300      	movs	r3, #0
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	80002000 	.word	0x80002000

08004b94 <I2C_Flush_TXDR>:
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d103      	bne.n	8004bb2 <I2C_Flush_TXDR+0x1e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	629a      	str	r2, [r3, #40]	; 0x28
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d007      	beq.n	8004bd0 <I2C_Flush_TXDR+0x3c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	619a      	str	r2, [r3, #24]
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <I2C_WaitOnFlagUntilTimeout>:
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	71fb      	strb	r3, [r7, #7]
 8004bec:	e022      	b.n	8004c34 <I2C_WaitOnFlagUntilTimeout+0x58>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf4:	d01e      	beq.n	8004c34 <I2C_WaitOnFlagUntilTimeout+0x58>
 8004bf6:	f7fd fe85 	bl	8002904 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d302      	bcc.n	8004c0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d113      	bne.n	8004c34 <I2C_WaitOnFlagUntilTimeout+0x58>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c10:	f043 0220 	orr.w	r2, r3, #32
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	645a      	str	r2, [r3, #68]	; 0x44
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c30:	2301      	movs	r3, #1
 8004c32:	e00f      	b.n	8004c54 <I2C_WaitOnFlagUntilTimeout+0x78>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d0cd      	beq.n	8004bee <I2C_WaitOnFlagUntilTimeout+0x12>
 8004c52:	2300      	movs	r3, #0
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <I2C_WaitOnTXISFlagUntilTimeout>:
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	e02c      	b.n	8004cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 f870 	bl	8004d54 <I2C_IsAcknowledgeFailed>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e02a      	b.n	8004cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c84:	d01e      	beq.n	8004cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 8004c86:	f7fd fe3d 	bl	8002904 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d302      	bcc.n	8004c9c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d113      	bne.n	8004cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca0:	f043 0220 	orr.w	r2, r3, #32
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	645a      	str	r2, [r3, #68]	; 0x44
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e007      	b.n	8004cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d1cb      	bne.n	8004c6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <I2C_WaitOnSTOPFlagUntilTimeout>:
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	e028      	b.n	8004d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f830 	bl	8004d54 <I2C_IsAcknowledgeFailed>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e026      	b.n	8004d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
 8004cfe:	f7fd fe01 	bl	8002904 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d302      	bcc.n	8004d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d113      	bne.n	8004d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d18:	f043 0220 	orr.w	r2, r3, #32
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	645a      	str	r2, [r3, #68]	; 0x44
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e007      	b.n	8004d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	d1cf      	bne.n	8004cea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <I2C_IsAcknowledgeFailed>:
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b10      	cmp	r3, #16
 8004d6c:	d151      	bne.n	8004e12 <I2C_IsAcknowledgeFailed+0xbe>
 8004d6e:	e022      	b.n	8004db6 <I2C_IsAcknowledgeFailed+0x62>
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d76:	d01e      	beq.n	8004db6 <I2C_IsAcknowledgeFailed+0x62>
 8004d78:	f7fd fdc4 	bl	8002904 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d302      	bcc.n	8004d8e <I2C_IsAcknowledgeFailed+0x3a>
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d113      	bne.n	8004db6 <I2C_IsAcknowledgeFailed+0x62>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	f043 0220 	orr.w	r2, r3, #32
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	645a      	str	r2, [r3, #68]	; 0x44
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004db2:	2301      	movs	r3, #1
 8004db4:	e02e      	b.n	8004e14 <I2C_IsAcknowledgeFailed+0xc0>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d1d5      	bne.n	8004d70 <I2C_IsAcknowledgeFailed+0x1c>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2210      	movs	r2, #16
 8004dca:	61da      	str	r2, [r3, #28]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	61da      	str	r2, [r3, #28]
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f7ff fedd 	bl	8004b94 <I2C_Flush_TXDR>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6859      	ldr	r1, [r3, #4]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <I2C_IsAcknowledgeFailed+0xc8>)
 8004de6:	400b      	ands	r3, r1
 8004de8:	6053      	str	r3, [r2, #4]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	f043 0204 	orr.w	r2, r3, #4
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	645a      	str	r2, [r3, #68]	; 0x44
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <I2C_IsAcknowledgeFailed+0xc0>
 8004e12:	2300      	movs	r3, #0
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	fe00e800 	.word	0xfe00e800

08004e20 <I2C_TransferConfig>:
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	607b      	str	r3, [r7, #4]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	817b      	strh	r3, [r7, #10]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	727b      	strb	r3, [r7, #9]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	0d5b      	lsrs	r3, r3, #21
 8004e3c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004e40:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <I2C_TransferConfig+0x58>)
 8004e42:	430b      	orrs	r3, r1
 8004e44:	43db      	mvns	r3, r3
 8004e46:	ea02 0103 	and.w	r1, r2, r3
 8004e4a:	897b      	ldrh	r3, [r7, #10]
 8004e4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e50:	7a7b      	ldrb	r3, [r7, #9]
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	431a      	orrs	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	bf00      	nop
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	03ff63ff 	.word	0x03ff63ff

08004e7c <HAL_I2CEx_ConfigAnalogFilter>:
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d138      	bne.n	8004f04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e032      	b.n	8004f06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2224      	movs	r2, #36	; 0x24
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0201 	bic.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6819      	ldr	r1, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f00:	2300      	movs	r3, #0
 8004f02:	e000      	b.n	8004f06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f04:	2302      	movs	r3, #2
 8004f06:	4618      	mov	r0, r3
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <HAL_I2CEx_ConfigDigitalFilter>:
 8004f12:	b480      	push	{r7}
 8004f14:	b085      	sub	sp, #20
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	6039      	str	r1, [r7, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d139      	bne.n	8004f9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e033      	b.n	8004f9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2224      	movs	r2, #36	; 0x24
 8004f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0201 	bic.w	r2, r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	021b      	lsls	r3, r3, #8
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e000      	b.n	8004f9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <HAL_LCD_Init>:
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_LCD_Init+0x12>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e0af      	b.n	800511e <HAL_LCD_Init+0x172>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_LCD_Init+0x2c>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fb fe3a 	bl	8000c4c <HAL_LCD_MspInit>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0201 	bic.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	e00a      	b.n	800500c <HAL_LCD_Init+0x60>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	2200      	movs	r2, #0
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	3301      	adds	r3, #1
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2b0f      	cmp	r3, #15
 8005010:	d9f1      	bls.n	8004ff6 <HAL_LCD_Init+0x4a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0204 	orr.w	r2, r2, #4
 8005020:	609a      	str	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	4b3f      	ldr	r3, [pc, #252]	; (8005128 <HAL_LCD_Init+0x17c>)
 800502a:	4013      	ands	r3, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6851      	ldr	r1, [r2, #4]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6892      	ldr	r2, [r2, #8]
 8005034:	4311      	orrs	r1, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800503a:	4311      	orrs	r1, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005040:	4311      	orrs	r1, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	69d2      	ldr	r2, [r2, #28]
 8005046:	4311      	orrs	r1, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6a12      	ldr	r2, [r2, #32]
 800504c:	4311      	orrs	r1, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6992      	ldr	r2, [r2, #24]
 8005052:	4311      	orrs	r1, r2
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005058:	4311      	orrs	r1, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	430b      	orrs	r3, r1
 8005060:	6053      	str	r3, [r2, #4]
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f8f1 	bl	800524a <LCD_WaitForSynchro>
 8005068:	4603      	mov	r3, r0
 800506a:	74fb      	strb	r3, [r7, #19]
 800506c:	7cfb      	ldrb	r3, [r7, #19]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_LCD_Init+0xca>
 8005072:	7cfb      	ldrb	r3, [r7, #19]
 8005074:	e053      	b.n	800511e <HAL_LCD_Init+0x172>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	431a      	orrs	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f042 0201 	orr.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	f7fd fc29 	bl	8002904 <HAL_GetTick>
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	e00c      	b.n	80050d0 <HAL_LCD_Init+0x124>
 80050b6:	f7fd fc25 	bl	8002904 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050c4:	d904      	bls.n	80050d0 <HAL_LCD_Init+0x124>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2208      	movs	r2, #8
 80050ca:	639a      	str	r2, [r3, #56]	; 0x38
 80050cc:	2303      	movs	r3, #3
 80050ce:	e026      	b.n	800511e <HAL_LCD_Init+0x172>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d1eb      	bne.n	80050b6 <HAL_LCD_Init+0x10a>
 80050de:	f7fd fc11 	bl	8002904 <HAL_GetTick>
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	e00c      	b.n	8005100 <HAL_LCD_Init+0x154>
 80050e6:	f7fd fc0d 	bl	8002904 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050f4:	d904      	bls.n	8005100 <HAL_LCD_Init+0x154>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2210      	movs	r2, #16
 80050fa:	639a      	str	r2, [r3, #56]	; 0x38
 80050fc:	2303      	movs	r3, #3
 80050fe:	e00e      	b.n	800511e <HAL_LCD_Init+0x172>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b10      	cmp	r3, #16
 800510c:	d1eb      	bne.n	80050e6 <HAL_LCD_Init+0x13a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	639a      	str	r2, [r3, #56]	; 0x38
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800511c:	7cfb      	ldrb	r3, [r7, #19]
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	fc00000e 	.word	0xfc00000e

0800512c <HAL_LCD_Clear>:
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	2301      	movs	r3, #1
 8005136:	74fb      	strb	r3, [r7, #19]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800513e:	74bb      	strb	r3, [r7, #18]
 8005140:	7cbb      	ldrb	r3, [r7, #18]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d002      	beq.n	800514c <HAL_LCD_Clear+0x20>
 8005146:	7cbb      	ldrb	r3, [r7, #18]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d140      	bne.n	80051ce <HAL_LCD_Clear+0xa2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_LCD_Clear+0x2e>
 8005156:	2302      	movs	r3, #2
 8005158:	e03a      	b.n	80051d0 <HAL_LCD_Clear+0xa4>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2202      	movs	r2, #2
 8005166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800516a:	f7fd fbcb 	bl	8002904 <HAL_GetTick>
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	e010      	b.n	8005194 <HAL_LCD_Clear+0x68>
 8005172:	f7fd fbc7 	bl	8002904 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005180:	d908      	bls.n	8005194 <HAL_LCD_Clear+0x68>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2202      	movs	r2, #2
 8005186:	639a      	str	r2, [r3, #56]	; 0x38
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005190:	2303      	movs	r3, #3
 8005192:	e01d      	b.n	80051d0 <HAL_LCD_Clear+0xa4>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d0e7      	beq.n	8005172 <HAL_LCD_Clear+0x46>
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	e00a      	b.n	80051be <HAL_LCD_Clear+0x92>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	3304      	adds	r3, #4
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	2200      	movs	r2, #0
 80051b6:	605a      	str	r2, [r3, #4]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	3301      	adds	r3, #1
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b0f      	cmp	r3, #15
 80051c2:	d9f1      	bls.n	80051a8 <HAL_LCD_Clear+0x7c>
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f807 	bl	80051d8 <HAL_LCD_UpdateDisplayRequest>
 80051ca:	4603      	mov	r3, r0
 80051cc:	74fb      	strb	r3, [r7, #19]
 80051ce:	7cfb      	ldrb	r3, [r7, #19]
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_LCD_UpdateDisplayRequest>:
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2208      	movs	r2, #8
 80051e6:	60da      	str	r2, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0204 	orr.w	r2, r2, #4
 80051f6:	609a      	str	r2, [r3, #8]
 80051f8:	f7fd fb84 	bl	8002904 <HAL_GetTick>
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	e010      	b.n	8005222 <HAL_LCD_UpdateDisplayRequest+0x4a>
 8005200:	f7fd fb80 	bl	8002904 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800520e:	d908      	bls.n	8005222 <HAL_LCD_UpdateDisplayRequest+0x4a>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2204      	movs	r2, #4
 8005214:	639a      	str	r2, [r3, #56]	; 0x38
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800521e:	2303      	movs	r3, #3
 8005220:	e00f      	b.n	8005242 <HAL_LCD_UpdateDisplayRequest+0x6a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b08      	cmp	r3, #8
 800522e:	d1e7      	bne.n	8005200 <HAL_LCD_UpdateDisplayRequest+0x28>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005240:	2300      	movs	r3, #0
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <LCD_WaitForSynchro>:
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	f7fd fb57 	bl	8002904 <HAL_GetTick>
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	e00c      	b.n	8005274 <LCD_WaitForSynchro+0x2a>
 800525a:	f7fd fb53 	bl	8002904 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005268:	d904      	bls.n	8005274 <LCD_WaitForSynchro+0x2a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	639a      	str	r2, [r3, #56]	; 0x38
 8005270:	2303      	movs	r3, #3
 8005272:	e007      	b.n	8005284 <LCD_WaitForSynchro+0x3a>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b20      	cmp	r3, #32
 8005280:	d1eb      	bne.n	800525a <LCD_WaitForSynchro+0x10>
 8005282:	2300      	movs	r3, #0
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_PWR_EnableBkUpAccess>:
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
 8005290:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a04      	ldr	r2, [pc, #16]	; (80052a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	bf00      	nop
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40007000 	.word	0x40007000

080052ac <HAL_PWREx_GetVoltageRange>:
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	4b04      	ldr	r3, [pc, #16]	; (80052c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052b8:	4618      	mov	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40007000 	.word	0x40007000

080052c8 <HAL_PWREx_ControlVoltageScaling>:
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052d6:	d130      	bne.n	800533a <HAL_PWREx_ControlVoltageScaling+0x72>
 80052d8:	4b23      	ldr	r3, [pc, #140]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e4:	d038      	beq.n	8005358 <HAL_PWREx_ControlVoltageScaling+0x90>
 80052e6:	4b20      	ldr	r3, [pc, #128]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052ee:	4a1e      	ldr	r2, [pc, #120]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	4b1d      	ldr	r3, [pc, #116]	; (800536c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2232      	movs	r2, #50	; 0x32
 80052fc:	fb02 f303 	mul.w	r3, r2, r3
 8005300:	4a1b      	ldr	r2, [pc, #108]	; (8005370 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005302:	fba2 2303 	umull	r2, r3, r2, r3
 8005306:	0c9b      	lsrs	r3, r3, #18
 8005308:	3301      	adds	r3, #1
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	e002      	b.n	8005314 <HAL_PWREx_ControlVoltageScaling+0x4c>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3b01      	subs	r3, #1
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	4b14      	ldr	r3, [pc, #80]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005320:	d102      	bne.n	8005328 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f2      	bne.n	800530e <HAL_PWREx_ControlVoltageScaling+0x46>
 8005328:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005334:	d110      	bne.n	8005358 <HAL_PWREx_ControlVoltageScaling+0x90>
 8005336:	2303      	movs	r3, #3
 8005338:	e00f      	b.n	800535a <HAL_PWREx_ControlVoltageScaling+0x92>
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005346:	d007      	beq.n	8005358 <HAL_PWREx_ControlVoltageScaling+0x90>
 8005348:	4b07      	ldr	r3, [pc, #28]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005350:	4a05      	ldr	r2, [pc, #20]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	2300      	movs	r3, #0
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40007000 	.word	0x40007000
 800536c:	20000020 	.word	0x20000020
 8005370:	431bde83 	.word	0x431bde83

08005374 <HAL_PWREx_EnableVddUSB>:
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <HAL_PWREx_EnableVddUSB+0x1c>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	4a04      	ldr	r2, [pc, #16]	; (8005390 <HAL_PWREx_EnableVddUSB+0x1c>)
 800537e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005382:	6053      	str	r3, [r2, #4]
 8005384:	bf00      	nop
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40007000 	.word	0x40007000

08005394 <HAL_QSPI_Init>:
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af02      	add	r7, sp, #8
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	f7fd fab2 	bl	8002904 <HAL_GetTick>
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_QSPI_Init+0x18>
 80053a8:	2301      	movs	r3, #1
 80053aa:	e06f      	b.n	800548c <HAL_QSPI_Init+0xf8>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_QSPI_Init+0x28>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e067      	b.n	800548c <HAL_QSPI_Init+0xf8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10b      	bne.n	80053e8 <HAL_QSPI_Init+0x54>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7fc fae7 	bl	80019ac <HAL_QSPI_MspInit>
 80053de:	f241 3188 	movw	r1, #5000	; 0x1388
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f858 	bl	8005498 <HAL_QSPI_SetTimeout>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	021a      	lsls	r2, r3, #8
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	2120      	movs	r1, #32
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f850 	bl	80054b4 <QSPI_WaitFlagStateUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	72fb      	strb	r3, [r7, #11]
 8005418:	7afb      	ldrb	r3, [r7, #11]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d131      	bne.n	8005482 <HAL_QSPI_Init+0xee>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005428:	f023 0310 	bic.w	r3, r3, #16
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6852      	ldr	r2, [r2, #4]
 8005430:	0611      	lsls	r1, r2, #24
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68d2      	ldr	r2, [r2, #12]
 8005436:	4311      	orrs	r1, r2
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6812      	ldr	r2, [r2, #0]
 800543c:	430b      	orrs	r3, r1
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	4b13      	ldr	r3, [pc, #76]	; (8005494 <HAL_QSPI_Init+0x100>)
 8005448:	4013      	ands	r3, r2
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6912      	ldr	r2, [r2, #16]
 800544e:	0411      	lsls	r1, r2, #16
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6952      	ldr	r2, [r2, #20]
 8005454:	4311      	orrs	r1, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6992      	ldr	r2, [r2, #24]
 800545a:	4311      	orrs	r1, r2
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6812      	ldr	r2, [r2, #0]
 8005460:	430b      	orrs	r3, r1
 8005462:	6053      	str	r3, [r2, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	63da      	str	r2, [r3, #60]	; 0x3c
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800548a:	7afb      	ldrb	r3, [r7, #11]
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	ffe0f8fe 	.word	0xffe0f8fe

08005498 <HAL_QSPI_SetTimeout>:
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <QSPI_WaitFlagStateUntilTimeout>:
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	71fb      	strb	r3, [r7, #7]
 80054c4:	e01a      	b.n	80054fc <QSPI_WaitFlagStateUntilTimeout+0x48>
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d016      	beq.n	80054fc <QSPI_WaitFlagStateUntilTimeout+0x48>
 80054ce:	f7fd fa19 	bl	8002904 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10b      	bne.n	80054fc <QSPI_WaitFlagStateUntilTimeout+0x48>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2204      	movs	r2, #4
 80054e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f0:	f043 0201 	orr.w	r2, r3, #1
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80054f8:	2301      	movs	r3, #1
 80054fa:	e00e      	b.n	800551a <QSPI_WaitFlagStateUntilTimeout+0x66>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4013      	ands	r3, r2
 8005506:	2b00      	cmp	r3, #0
 8005508:	bf14      	ite	ne
 800550a:	2301      	movne	r3, #1
 800550c:	2300      	moveq	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	429a      	cmp	r2, r3
 8005516:	d1d6      	bne.n	80054c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
 8005518:	2300      	movs	r3, #0
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <HAL_RCC_OscConfig>:
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_RCC_OscConfig+0x12>
 8005532:	2301      	movs	r3, #1
 8005534:	e39d      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 8005536:	4ba4      	ldr	r3, [pc, #656]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 030c 	and.w	r3, r3, #12
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	4ba1      	ldr	r3, [pc, #644]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0303 	and.w	r3, r3, #3
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 80e1 	beq.w	800571a <HAL_RCC_OscConfig+0x1f6>
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d007      	beq.n	800556e <HAL_RCC_OscConfig+0x4a>
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	2b0c      	cmp	r3, #12
 8005562:	f040 8088 	bne.w	8005676 <HAL_RCC_OscConfig+0x152>
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b01      	cmp	r3, #1
 800556a:	f040 8084 	bne.w	8005676 <HAL_RCC_OscConfig+0x152>
 800556e:	4b96      	ldr	r3, [pc, #600]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d005      	beq.n	8005586 <HAL_RCC_OscConfig+0x62>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_RCC_OscConfig+0x62>
 8005582:	2301      	movs	r3, #1
 8005584:	e375      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1a      	ldr	r2, [r3, #32]
 800558a:	4b8f      	ldr	r3, [pc, #572]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d004      	beq.n	80055a0 <HAL_RCC_OscConfig+0x7c>
 8005596:	4b8c      	ldr	r3, [pc, #560]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800559e:	e005      	b.n	80055ac <HAL_RCC_OscConfig+0x88>
 80055a0:	4b89      	ldr	r3, [pc, #548]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80055a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055a6:	091b      	lsrs	r3, r3, #4
 80055a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d223      	bcs.n	80055f8 <HAL_RCC_OscConfig+0xd4>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fd09 	bl	8005fcc <RCC_SetFlashLatencyFromMSIRange>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <HAL_RCC_OscConfig+0xa0>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e356      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 80055c4:	4b80      	ldr	r3, [pc, #512]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a7f      	ldr	r2, [pc, #508]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80055ca:	f043 0308 	orr.w	r3, r3, #8
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	4b7d      	ldr	r3, [pc, #500]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	497a      	ldr	r1, [pc, #488]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	600b      	str	r3, [r1, #0]
 80055e2:	4b79      	ldr	r3, [pc, #484]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	021b      	lsls	r3, r3, #8
 80055f0:	4975      	ldr	r1, [pc, #468]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	604b      	str	r3, [r1, #4]
 80055f6:	e022      	b.n	800563e <HAL_RCC_OscConfig+0x11a>
 80055f8:	4b73      	ldr	r3, [pc, #460]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a72      	ldr	r2, [pc, #456]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80055fe:	f043 0308 	orr.w	r3, r3, #8
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	4b70      	ldr	r3, [pc, #448]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	496d      	ldr	r1, [pc, #436]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 8005612:	4313      	orrs	r3, r2
 8005614:	600b      	str	r3, [r1, #0]
 8005616:	4b6c      	ldr	r3, [pc, #432]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	021b      	lsls	r3, r3, #8
 8005624:	4968      	ldr	r1, [pc, #416]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 8005626:	4313      	orrs	r3, r2
 8005628:	604b      	str	r3, [r1, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fccc 	bl	8005fcc <RCC_SetFlashLatencyFromMSIRange>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <HAL_RCC_OscConfig+0x11a>
 800563a:	2301      	movs	r3, #1
 800563c:	e319      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 800563e:	f000 fc03 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8005642:	4601      	mov	r1, r0
 8005644:	4b60      	ldr	r3, [pc, #384]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	091b      	lsrs	r3, r3, #4
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	4a5f      	ldr	r2, [pc, #380]	; (80057cc <HAL_RCC_OscConfig+0x2a8>)
 8005650:	5cd3      	ldrb	r3, [r2, r3]
 8005652:	f003 031f 	and.w	r3, r3, #31
 8005656:	fa21 f303 	lsr.w	r3, r1, r3
 800565a:	4a5d      	ldr	r2, [pc, #372]	; (80057d0 <HAL_RCC_OscConfig+0x2ac>)
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	4b5d      	ldr	r3, [pc, #372]	; (80057d4 <HAL_RCC_OscConfig+0x2b0>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f7fd f902 	bl	800286c <HAL_InitTick>
 8005668:	4603      	mov	r3, r0
 800566a:	73fb      	strb	r3, [r7, #15]
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d052      	beq.n	8005718 <HAL_RCC_OscConfig+0x1f4>
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	e2fd      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d032      	beq.n	80056e4 <HAL_RCC_OscConfig+0x1c0>
 800567e:	4b52      	ldr	r3, [pc, #328]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a51      	ldr	r2, [pc, #324]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	f7fd f93b 	bl	8002904 <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]
 8005690:	e008      	b.n	80056a4 <HAL_RCC_OscConfig+0x180>
 8005692:	f7fd f937 	bl	8002904 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x180>
 80056a0:	2303      	movs	r3, #3
 80056a2:	e2e6      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 80056a4:	4b48      	ldr	r3, [pc, #288]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0f0      	beq.n	8005692 <HAL_RCC_OscConfig+0x16e>
 80056b0:	4b45      	ldr	r3, [pc, #276]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a44      	ldr	r2, [pc, #272]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80056b6:	f043 0308 	orr.w	r3, r3, #8
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	4b42      	ldr	r3, [pc, #264]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	493f      	ldr	r1, [pc, #252]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	600b      	str	r3, [r1, #0]
 80056ce:	4b3e      	ldr	r3, [pc, #248]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	021b      	lsls	r3, r3, #8
 80056dc:	493a      	ldr	r1, [pc, #232]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	604b      	str	r3, [r1, #4]
 80056e2:	e01a      	b.n	800571a <HAL_RCC_OscConfig+0x1f6>
 80056e4:	4b38      	ldr	r3, [pc, #224]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a37      	ldr	r2, [pc, #220]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 80056ea:	f023 0301 	bic.w	r3, r3, #1
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	f7fd f908 	bl	8002904 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x1e6>
 80056f8:	f7fd f904 	bl	8002904 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x1e6>
 8005706:	2303      	movs	r3, #3
 8005708:	e2b3      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 800570a:	4b2f      	ldr	r3, [pc, #188]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x1d4>
 8005716:	e000      	b.n	800571a <HAL_RCC_OscConfig+0x1f6>
 8005718:	bf00      	nop
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d074      	beq.n	8005810 <HAL_RCC_OscConfig+0x2ec>
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b08      	cmp	r3, #8
 800572a:	d005      	beq.n	8005738 <HAL_RCC_OscConfig+0x214>
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b0c      	cmp	r3, #12
 8005730:	d10e      	bne.n	8005750 <HAL_RCC_OscConfig+0x22c>
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b03      	cmp	r3, #3
 8005736:	d10b      	bne.n	8005750 <HAL_RCC_OscConfig+0x22c>
 8005738:	4b23      	ldr	r3, [pc, #140]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d064      	beq.n	800580e <HAL_RCC_OscConfig+0x2ea>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d160      	bne.n	800580e <HAL_RCC_OscConfig+0x2ea>
 800574c:	2301      	movs	r3, #1
 800574e:	e290      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005758:	d106      	bne.n	8005768 <HAL_RCC_OscConfig+0x244>
 800575a:	4b1b      	ldr	r3, [pc, #108]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a1a      	ldr	r2, [pc, #104]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 8005760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	e01d      	b.n	80057a4 <HAL_RCC_OscConfig+0x280>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005770:	d10c      	bne.n	800578c <HAL_RCC_OscConfig+0x268>
 8005772:	4b15      	ldr	r3, [pc, #84]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a14      	ldr	r2, [pc, #80]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 8005778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a11      	ldr	r2, [pc, #68]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 8005784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	e00b      	b.n	80057a4 <HAL_RCC_OscConfig+0x280>
 800578c:	4b0e      	ldr	r3, [pc, #56]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a0d      	ldr	r2, [pc, #52]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 8005792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a0a      	ldr	r2, [pc, #40]	; (80057c8 <HAL_RCC_OscConfig+0x2a4>)
 800579e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01c      	beq.n	80057e6 <HAL_RCC_OscConfig+0x2c2>
 80057ac:	f7fd f8aa 	bl	8002904 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]
 80057b2:	e011      	b.n	80057d8 <HAL_RCC_OscConfig+0x2b4>
 80057b4:	f7fd f8a6 	bl	8002904 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b64      	cmp	r3, #100	; 0x64
 80057c0:	d90a      	bls.n	80057d8 <HAL_RCC_OscConfig+0x2b4>
 80057c2:	2303      	movs	r3, #3
 80057c4:	e255      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 80057c6:	bf00      	nop
 80057c8:	40021000 	.word	0x40021000
 80057cc:	0800e204 	.word	0x0800e204
 80057d0:	20000020 	.word	0x20000020
 80057d4:	20000024 	.word	0x20000024
 80057d8:	4bae      	ldr	r3, [pc, #696]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0e7      	beq.n	80057b4 <HAL_RCC_OscConfig+0x290>
 80057e4:	e014      	b.n	8005810 <HAL_RCC_OscConfig+0x2ec>
 80057e6:	f7fd f88d 	bl	8002904 <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x2dc>
 80057ee:	f7fd f889 	bl	8002904 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b64      	cmp	r3, #100	; 0x64
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x2dc>
 80057fc:	2303      	movs	r3, #3
 80057fe:	e238      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 8005800:	4ba4      	ldr	r3, [pc, #656]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1f0      	bne.n	80057ee <HAL_RCC_OscConfig+0x2ca>
 800580c:	e000      	b.n	8005810 <HAL_RCC_OscConfig+0x2ec>
 800580e:	bf00      	nop
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d060      	beq.n	80058de <HAL_RCC_OscConfig+0x3ba>
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	2b04      	cmp	r3, #4
 8005820:	d005      	beq.n	800582e <HAL_RCC_OscConfig+0x30a>
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2b0c      	cmp	r3, #12
 8005826:	d119      	bne.n	800585c <HAL_RCC_OscConfig+0x338>
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d116      	bne.n	800585c <HAL_RCC_OscConfig+0x338>
 800582e:	4b99      	ldr	r3, [pc, #612]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005836:	2b00      	cmp	r3, #0
 8005838:	d005      	beq.n	8005846 <HAL_RCC_OscConfig+0x322>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_RCC_OscConfig+0x322>
 8005842:	2301      	movs	r3, #1
 8005844:	e215      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 8005846:	4b93      	ldr	r3, [pc, #588]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	061b      	lsls	r3, r3, #24
 8005854:	498f      	ldr	r1, [pc, #572]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005856:	4313      	orrs	r3, r2
 8005858:	604b      	str	r3, [r1, #4]
 800585a:	e040      	b.n	80058de <HAL_RCC_OscConfig+0x3ba>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d023      	beq.n	80058ac <HAL_RCC_OscConfig+0x388>
 8005864:	4b8b      	ldr	r3, [pc, #556]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a8a      	ldr	r2, [pc, #552]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 800586a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	f7fd f848 	bl	8002904 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x366>
 8005878:	f7fd f844 	bl	8002904 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x366>
 8005886:	2303      	movs	r3, #3
 8005888:	e1f3      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 800588a:	4b82      	ldr	r3, [pc, #520]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0f0      	beq.n	8005878 <HAL_RCC_OscConfig+0x354>
 8005896:	4b7f      	ldr	r3, [pc, #508]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	061b      	lsls	r3, r3, #24
 80058a4:	497b      	ldr	r1, [pc, #492]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	604b      	str	r3, [r1, #4]
 80058aa:	e018      	b.n	80058de <HAL_RCC_OscConfig+0x3ba>
 80058ac:	4b79      	ldr	r3, [pc, #484]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a78      	ldr	r2, [pc, #480]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 80058b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b6:	6013      	str	r3, [r2, #0]
 80058b8:	f7fd f824 	bl	8002904 <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x3ae>
 80058c0:	f7fd f820 	bl	8002904 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x3ae>
 80058ce:	2303      	movs	r3, #3
 80058d0:	e1cf      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 80058d2:	4b70      	ldr	r3, [pc, #448]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f0      	bne.n	80058c0 <HAL_RCC_OscConfig+0x39c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d03c      	beq.n	8005964 <HAL_RCC_OscConfig+0x440>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d01c      	beq.n	800592c <HAL_RCC_OscConfig+0x408>
 80058f2:	4b68      	ldr	r3, [pc, #416]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 80058f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058f8:	4a66      	ldr	r2, [pc, #408]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 80058fa:	f043 0301 	orr.w	r3, r3, #1
 80058fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005902:	f7fc ffff 	bl	8002904 <HAL_GetTick>
 8005906:	6138      	str	r0, [r7, #16]
 8005908:	e008      	b.n	800591c <HAL_RCC_OscConfig+0x3f8>
 800590a:	f7fc fffb 	bl	8002904 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x3f8>
 8005918:	2303      	movs	r3, #3
 800591a:	e1aa      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 800591c:	4b5d      	ldr	r3, [pc, #372]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 800591e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0ef      	beq.n	800590a <HAL_RCC_OscConfig+0x3e6>
 800592a:	e01b      	b.n	8005964 <HAL_RCC_OscConfig+0x440>
 800592c:	4b59      	ldr	r3, [pc, #356]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 800592e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005932:	4a58      	ldr	r2, [pc, #352]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005934:	f023 0301 	bic.w	r3, r3, #1
 8005938:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800593c:	f7fc ffe2 	bl	8002904 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x432>
 8005944:	f7fc ffde 	bl	8002904 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x432>
 8005952:	2303      	movs	r3, #3
 8005954:	e18d      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 8005956:	4b4f      	ldr	r3, [pc, #316]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1ef      	bne.n	8005944 <HAL_RCC_OscConfig+0x420>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 80a5 	beq.w	8005abc <HAL_RCC_OscConfig+0x598>
 8005972:	2300      	movs	r3, #0
 8005974:	77fb      	strb	r3, [r7, #31]
 8005976:	4b47      	ldr	r3, [pc, #284]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800597a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10d      	bne.n	800599e <HAL_RCC_OscConfig+0x47a>
 8005982:	4b44      	ldr	r3, [pc, #272]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005986:	4a43      	ldr	r2, [pc, #268]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800598c:	6593      	str	r3, [r2, #88]	; 0x58
 800598e:	4b41      	ldr	r3, [pc, #260]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005996:	60bb      	str	r3, [r7, #8]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2301      	movs	r3, #1
 800599c:	77fb      	strb	r3, [r7, #31]
 800599e:	4b3e      	ldr	r3, [pc, #248]	; (8005a98 <HAL_RCC_OscConfig+0x574>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d118      	bne.n	80059dc <HAL_RCC_OscConfig+0x4b8>
 80059aa:	4b3b      	ldr	r3, [pc, #236]	; (8005a98 <HAL_RCC_OscConfig+0x574>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a3a      	ldr	r2, [pc, #232]	; (8005a98 <HAL_RCC_OscConfig+0x574>)
 80059b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	f7fc ffa5 	bl	8002904 <HAL_GetTick>
 80059ba:	6138      	str	r0, [r7, #16]
 80059bc:	e008      	b.n	80059d0 <HAL_RCC_OscConfig+0x4ac>
 80059be:	f7fc ffa1 	bl	8002904 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x4ac>
 80059cc:	2303      	movs	r3, #3
 80059ce:	e150      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 80059d0:	4b31      	ldr	r3, [pc, #196]	; (8005a98 <HAL_RCC_OscConfig+0x574>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0f0      	beq.n	80059be <HAL_RCC_OscConfig+0x49a>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d108      	bne.n	80059f6 <HAL_RCC_OscConfig+0x4d2>
 80059e4:	4b2b      	ldr	r3, [pc, #172]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 80059e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ea:	4a2a      	ldr	r2, [pc, #168]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 80059ec:	f043 0301 	orr.w	r3, r3, #1
 80059f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059f4:	e024      	b.n	8005a40 <HAL_RCC_OscConfig+0x51c>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	2b05      	cmp	r3, #5
 80059fc:	d110      	bne.n	8005a20 <HAL_RCC_OscConfig+0x4fc>
 80059fe:	4b25      	ldr	r3, [pc, #148]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a04:	4a23      	ldr	r2, [pc, #140]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005a06:	f043 0304 	orr.w	r3, r3, #4
 8005a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a0e:	4b21      	ldr	r3, [pc, #132]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a14:	4a1f      	ldr	r2, [pc, #124]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005a16:	f043 0301 	orr.w	r3, r3, #1
 8005a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a1e:	e00f      	b.n	8005a40 <HAL_RCC_OscConfig+0x51c>
 8005a20:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a26:	4a1b      	ldr	r2, [pc, #108]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005a28:	f023 0301 	bic.w	r3, r3, #1
 8005a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a30:	4b18      	ldr	r3, [pc, #96]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a36:	4a17      	ldr	r2, [pc, #92]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005a38:	f023 0304 	bic.w	r3, r3, #4
 8005a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d016      	beq.n	8005a76 <HAL_RCC_OscConfig+0x552>
 8005a48:	f7fc ff5c 	bl	8002904 <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]
 8005a4e:	e00a      	b.n	8005a66 <HAL_RCC_OscConfig+0x542>
 8005a50:	f7fc ff58 	bl	8002904 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x542>
 8005a62:	2303      	movs	r3, #3
 8005a64:	e105      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 8005a66:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <HAL_RCC_OscConfig+0x570>)
 8005a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0ed      	beq.n	8005a50 <HAL_RCC_OscConfig+0x52c>
 8005a74:	e019      	b.n	8005aaa <HAL_RCC_OscConfig+0x586>
 8005a76:	f7fc ff45 	bl	8002904 <HAL_GetTick>
 8005a7a:	6138      	str	r0, [r7, #16]
 8005a7c:	e00e      	b.n	8005a9c <HAL_RCC_OscConfig+0x578>
 8005a7e:	f7fc ff41 	bl	8002904 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d905      	bls.n	8005a9c <HAL_RCC_OscConfig+0x578>
 8005a90:	2303      	movs	r3, #3
 8005a92:	e0ee      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 8005a94:	40021000 	.word	0x40021000
 8005a98:	40007000 	.word	0x40007000
 8005a9c:	4b77      	ldr	r3, [pc, #476]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e9      	bne.n	8005a7e <HAL_RCC_OscConfig+0x55a>
 8005aaa:	7ffb      	ldrb	r3, [r7, #31]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d105      	bne.n	8005abc <HAL_RCC_OscConfig+0x598>
 8005ab0:	4b72      	ldr	r3, [pc, #456]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab4:	4a71      	ldr	r2, [pc, #452]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aba:	6593      	str	r3, [r2, #88]	; 0x58
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80d5 	beq.w	8005c70 <HAL_RCC_OscConfig+0x74c>
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	2b0c      	cmp	r3, #12
 8005aca:	f000 808e 	beq.w	8005bea <HAL_RCC_OscConfig+0x6c6>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d15b      	bne.n	8005b8e <HAL_RCC_OscConfig+0x66a>
 8005ad6:	4b69      	ldr	r3, [pc, #420]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a68      	ldr	r2, [pc, #416]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005adc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	f7fc ff0f 	bl	8002904 <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]
 8005ae8:	e008      	b.n	8005afc <HAL_RCC_OscConfig+0x5d8>
 8005aea:	f7fc ff0b 	bl	8002904 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x5d8>
 8005af8:	2303      	movs	r3, #3
 8005afa:	e0ba      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 8005afc:	4b5f      	ldr	r3, [pc, #380]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1f0      	bne.n	8005aea <HAL_RCC_OscConfig+0x5c6>
 8005b08:	4b5c      	ldr	r3, [pc, #368]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	4b5c      	ldr	r3, [pc, #368]	; (8005c80 <HAL_RCC_OscConfig+0x75c>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b18:	3a01      	subs	r2, #1
 8005b1a:	0112      	lsls	r2, r2, #4
 8005b1c:	4311      	orrs	r1, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b22:	0212      	lsls	r2, r2, #8
 8005b24:	4311      	orrs	r1, r2
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b2a:	0852      	lsrs	r2, r2, #1
 8005b2c:	3a01      	subs	r2, #1
 8005b2e:	0552      	lsls	r2, r2, #21
 8005b30:	4311      	orrs	r1, r2
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b36:	0852      	lsrs	r2, r2, #1
 8005b38:	3a01      	subs	r2, #1
 8005b3a:	0652      	lsls	r2, r2, #25
 8005b3c:	4311      	orrs	r1, r2
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b42:	0912      	lsrs	r2, r2, #4
 8005b44:	0452      	lsls	r2, r2, #17
 8005b46:	430a      	orrs	r2, r1
 8005b48:	494c      	ldr	r1, [pc, #304]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60cb      	str	r3, [r1, #12]
 8005b4e:	4b4b      	ldr	r3, [pc, #300]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a4a      	ldr	r2, [pc, #296]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005b54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	4b48      	ldr	r3, [pc, #288]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	4a47      	ldr	r2, [pc, #284]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005b60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b64:	60d3      	str	r3, [r2, #12]
 8005b66:	f7fc fecd 	bl	8002904 <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]
 8005b6c:	e008      	b.n	8005b80 <HAL_RCC_OscConfig+0x65c>
 8005b6e:	f7fc fec9 	bl	8002904 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x65c>
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e078      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 8005b80:	4b3e      	ldr	r3, [pc, #248]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0f0      	beq.n	8005b6e <HAL_RCC_OscConfig+0x64a>
 8005b8c:	e070      	b.n	8005c70 <HAL_RCC_OscConfig+0x74c>
 8005b8e:	4b3b      	ldr	r3, [pc, #236]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a3a      	ldr	r2, [pc, #232]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005b94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	4b38      	ldr	r3, [pc, #224]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d105      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x68e>
 8005ba6:	4b35      	ldr	r3, [pc, #212]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	4a34      	ldr	r2, [pc, #208]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005bac:	f023 0303 	bic.w	r3, r3, #3
 8005bb0:	60d3      	str	r3, [r2, #12]
 8005bb2:	4b32      	ldr	r3, [pc, #200]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	4a31      	ldr	r2, [pc, #196]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005bb8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bc0:	60d3      	str	r3, [r2, #12]
 8005bc2:	f7fc fe9f 	bl	8002904 <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x6b8>
 8005bca:	f7fc fe9b 	bl	8002904 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x6b8>
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e04a      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 8005bdc:	4b27      	ldr	r3, [pc, #156]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1f0      	bne.n	8005bca <HAL_RCC_OscConfig+0x6a6>
 8005be8:	e042      	b.n	8005c70 <HAL_RCC_OscConfig+0x74c>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d101      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x6d2>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e03d      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 8005bf6:	4b21      	ldr	r3, [pc, #132]	; (8005c7c <HAL_RCC_OscConfig+0x758>)
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f003 0203 	and.w	r2, r3, #3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d130      	bne.n	8005c6c <HAL_RCC_OscConfig+0x748>
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c14:	3b01      	subs	r3, #1
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d127      	bne.n	8005c6c <HAL_RCC_OscConfig+0x748>
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d11f      	bne.n	8005c6c <HAL_RCC_OscConfig+0x748>
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c36:	2a07      	cmp	r2, #7
 8005c38:	bf14      	ite	ne
 8005c3a:	2201      	movne	r2, #1
 8005c3c:	2200      	moveq	r2, #0
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d113      	bne.n	8005c6c <HAL_RCC_OscConfig+0x748>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4e:	085b      	lsrs	r3, r3, #1
 8005c50:	3b01      	subs	r3, #1
 8005c52:	055b      	lsls	r3, r3, #21
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d109      	bne.n	8005c6c <HAL_RCC_OscConfig+0x748>
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	085b      	lsrs	r3, r3, #1
 8005c64:	3b01      	subs	r3, #1
 8005c66:	065b      	lsls	r3, r3, #25
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d001      	beq.n	8005c70 <HAL_RCC_OscConfig+0x74c>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e000      	b.n	8005c72 <HAL_RCC_OscConfig+0x74e>
 8005c70:	2300      	movs	r3, #0
 8005c72:	4618      	mov	r0, r3
 8005c74:	3720      	adds	r7, #32
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	f99d808c 	.word	0xf99d808c

08005c84 <HAL_RCC_ClockConfig>:
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <HAL_RCC_ClockConfig+0x14>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e0c8      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1a6>
 8005c98:	4b66      	ldr	r3, [pc, #408]	; (8005e34 <HAL_RCC_ClockConfig+0x1b0>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d910      	bls.n	8005cc8 <HAL_RCC_ClockConfig+0x44>
 8005ca6:	4b63      	ldr	r3, [pc, #396]	; (8005e34 <HAL_RCC_ClockConfig+0x1b0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f023 0207 	bic.w	r2, r3, #7
 8005cae:	4961      	ldr	r1, [pc, #388]	; (8005e34 <HAL_RCC_ClockConfig+0x1b0>)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	600b      	str	r3, [r1, #0]
 8005cb6:	4b5f      	ldr	r3, [pc, #380]	; (8005e34 <HAL_RCC_ClockConfig+0x1b0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d001      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x44>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e0b0      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1a6>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d04c      	beq.n	8005d6e <HAL_RCC_ClockConfig+0xea>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d107      	bne.n	8005cec <HAL_RCC_ClockConfig+0x68>
 8005cdc:	4b56      	ldr	r3, [pc, #344]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d121      	bne.n	8005d2c <HAL_RCC_ClockConfig+0xa8>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e09e      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1a6>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d107      	bne.n	8005d04 <HAL_RCC_ClockConfig+0x80>
 8005cf4:	4b50      	ldr	r3, [pc, #320]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d115      	bne.n	8005d2c <HAL_RCC_ClockConfig+0xa8>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e092      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1a6>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d107      	bne.n	8005d1c <HAL_RCC_ClockConfig+0x98>
 8005d0c:	4b4a      	ldr	r3, [pc, #296]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d109      	bne.n	8005d2c <HAL_RCC_ClockConfig+0xa8>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e086      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1a6>
 8005d1c:	4b46      	ldr	r3, [pc, #280]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_RCC_ClockConfig+0xa8>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e07e      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1a6>
 8005d2c:	4b42      	ldr	r3, [pc, #264]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f023 0203 	bic.w	r2, r3, #3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	493f      	ldr	r1, [pc, #252]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	608b      	str	r3, [r1, #8]
 8005d3e:	f7fc fde1 	bl	8002904 <HAL_GetTick>
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	e00a      	b.n	8005d5c <HAL_RCC_ClockConfig+0xd8>
 8005d46:	f7fc fddd 	bl	8002904 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_ClockConfig+0xd8>
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e066      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1a6>
 8005d5c:	4b36      	ldr	r3, [pc, #216]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 020c 	and.w	r2, r3, #12
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d1eb      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xc2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d008      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x108>
 8005d7a:	4b2f      	ldr	r3, [pc, #188]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	492c      	ldr	r1, [pc, #176]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	608b      	str	r3, [r1, #8]
 8005d8c:	4b29      	ldr	r3, [pc, #164]	; (8005e34 <HAL_RCC_ClockConfig+0x1b0>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d210      	bcs.n	8005dbc <HAL_RCC_ClockConfig+0x138>
 8005d9a:	4b26      	ldr	r3, [pc, #152]	; (8005e34 <HAL_RCC_ClockConfig+0x1b0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f023 0207 	bic.w	r2, r3, #7
 8005da2:	4924      	ldr	r1, [pc, #144]	; (8005e34 <HAL_RCC_ClockConfig+0x1b0>)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	600b      	str	r3, [r1, #0]
 8005daa:	4b22      	ldr	r3, [pc, #136]	; (8005e34 <HAL_RCC_ClockConfig+0x1b0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0307 	and.w	r3, r3, #7
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d001      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x138>
 8005db8:	2301      	movs	r3, #1
 8005dba:	e036      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1a6>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d008      	beq.n	8005dda <HAL_RCC_ClockConfig+0x156>
 8005dc8:	4b1b      	ldr	r3, [pc, #108]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	4918      	ldr	r1, [pc, #96]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	608b      	str	r3, [r1, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d009      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x176>
 8005de6:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	4910      	ldr	r1, [pc, #64]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	608b      	str	r3, [r1, #8]
 8005dfa:	f000 f825 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8005dfe:	4601      	mov	r1, r0
 8005e00:	4b0d      	ldr	r3, [pc, #52]	; (8005e38 <HAL_RCC_ClockConfig+0x1b4>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	4a0c      	ldr	r2, [pc, #48]	; (8005e3c <HAL_RCC_ClockConfig+0x1b8>)
 8005e0c:	5cd3      	ldrb	r3, [r2, r3]
 8005e0e:	f003 031f 	and.w	r3, r3, #31
 8005e12:	fa21 f303 	lsr.w	r3, r1, r3
 8005e16:	4a0a      	ldr	r2, [pc, #40]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <HAL_RCC_ClockConfig+0x1c0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fc fd24 	bl	800286c <HAL_InitTick>
 8005e24:	4603      	mov	r3, r0
 8005e26:	72fb      	strb	r3, [r7, #11]
 8005e28:	7afb      	ldrb	r3, [r7, #11]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40022000 	.word	0x40022000
 8005e38:	40021000 	.word	0x40021000
 8005e3c:	0800e204 	.word	0x0800e204
 8005e40:	20000020 	.word	0x20000020
 8005e44:	20000024 	.word	0x20000024

08005e48 <HAL_RCC_GetSysClockFreq>:
 8005e48:	b480      	push	{r7}
 8005e4a:	b089      	sub	sp, #36	; 0x24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	2300      	movs	r3, #0
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	4b3d      	ldr	r3, [pc, #244]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 030c 	and.w	r3, r3, #12
 8005e5e:	613b      	str	r3, [r7, #16]
 8005e60:	4b3a      	ldr	r3, [pc, #232]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0303 	and.w	r3, r3, #3
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <HAL_RCC_GetSysClockFreq+0x34>
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	2b0c      	cmp	r3, #12
 8005e74:	d121      	bne.n	8005eba <HAL_RCC_GetSysClockFreq+0x72>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d11e      	bne.n	8005eba <HAL_RCC_GetSysClockFreq+0x72>
 8005e7c:	4b33      	ldr	r3, [pc, #204]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d107      	bne.n	8005e98 <HAL_RCC_GetSysClockFreq+0x50>
 8005e88:	4b30      	ldr	r3, [pc, #192]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8005e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	f003 030f 	and.w	r3, r3, #15
 8005e94:	61fb      	str	r3, [r7, #28]
 8005e96:	e005      	b.n	8005ea4 <HAL_RCC_GetSysClockFreq+0x5c>
 8005e98:	4b2c      	ldr	r3, [pc, #176]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	091b      	lsrs	r3, r3, #4
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	61fb      	str	r3, [r7, #28]
 8005ea4:	4a2a      	ldr	r2, [pc, #168]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eac:	61fb      	str	r3, [r7, #28]
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10d      	bne.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x88>
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	61bb      	str	r3, [r7, #24]
 8005eb8:	e00a      	b.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x88>
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d102      	bne.n	8005ec6 <HAL_RCC_GetSysClockFreq+0x7e>
 8005ec0:	4b24      	ldr	r3, [pc, #144]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ec2:	61bb      	str	r3, [r7, #24]
 8005ec4:	e004      	b.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x88>
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d101      	bne.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x88>
 8005ecc:	4b22      	ldr	r3, [pc, #136]	; (8005f58 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ece:	61bb      	str	r3, [r7, #24]
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	2b0c      	cmp	r3, #12
 8005ed4:	d133      	bne.n	8005f3e <HAL_RCC_GetSysClockFreq+0xf6>
 8005ed6:	4b1d      	ldr	r3, [pc, #116]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	60bb      	str	r3, [r7, #8]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d002      	beq.n	8005eec <HAL_RCC_GetSysClockFreq+0xa4>
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d003      	beq.n	8005ef2 <HAL_RCC_GetSysClockFreq+0xaa>
 8005eea:	e005      	b.n	8005ef8 <HAL_RCC_GetSysClockFreq+0xb0>
 8005eec:	4b19      	ldr	r3, [pc, #100]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	e005      	b.n	8005efe <HAL_RCC_GetSysClockFreq+0xb6>
 8005ef2:	4b19      	ldr	r3, [pc, #100]	; (8005f58 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	e002      	b.n	8005efe <HAL_RCC_GetSysClockFreq+0xb6>
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	bf00      	nop
 8005efe:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	091b      	lsrs	r3, r3, #4
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	3301      	adds	r3, #1
 8005f0a:	607b      	str	r3, [r7, #4]
 8005f0c:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	0a1b      	lsrs	r3, r3, #8
 8005f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	fb02 f203 	mul.w	r2, r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f22:	617b      	str	r3, [r7, #20]
 8005f24:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x104>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	0e5b      	lsrs	r3, r3, #25
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	3301      	adds	r3, #1
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3c:	61bb      	str	r3, [r7, #24]
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	4618      	mov	r0, r3
 8005f42:	3724      	adds	r7, #36	; 0x24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	0800e21c 	.word	0x0800e21c
 8005f54:	00f42400 	.word	0x00f42400
 8005f58:	007a1200 	.word	0x007a1200

08005f5c <HAL_RCC_GetHCLKFreq>:
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	4b03      	ldr	r3, [pc, #12]	; (8005f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4618      	mov	r0, r3
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	20000020 	.word	0x20000020

08005f74 <HAL_RCC_GetPCLK1Freq>:
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	f7ff fff0 	bl	8005f5c <HAL_RCC_GetHCLKFreq>
 8005f7c:	4601      	mov	r1, r0
 8005f7e:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	0a1b      	lsrs	r3, r3, #8
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	4a04      	ldr	r2, [pc, #16]	; (8005f9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f8a:	5cd3      	ldrb	r3, [r2, r3]
 8005f8c:	f003 031f 	and.w	r3, r3, #31
 8005f90:	fa21 f303 	lsr.w	r3, r1, r3
 8005f94:	4618      	mov	r0, r3
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	0800e214 	.word	0x0800e214

08005fa0 <HAL_RCC_GetPCLK2Freq>:
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	f7ff ffda 	bl	8005f5c <HAL_RCC_GetHCLKFreq>
 8005fa8:	4601      	mov	r1, r0
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	0adb      	lsrs	r3, r3, #11
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	4a04      	ldr	r2, [pc, #16]	; (8005fc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fb6:	5cd3      	ldrb	r3, [r2, r3]
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	fa21 f303 	lsr.w	r3, r1, r3
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	0800e214 	.word	0x0800e214

08005fcc <RCC_SetFlashLatencyFromMSIRange>:
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	613b      	str	r3, [r7, #16]
 8005fd8:	4b2a      	ldr	r3, [pc, #168]	; (8006084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <RCC_SetFlashLatencyFromMSIRange+0x20>
 8005fe4:	f7ff f962 	bl	80052ac <HAL_PWREx_GetVoltageRange>
 8005fe8:	6178      	str	r0, [r7, #20]
 8005fea:	e014      	b.n	8006016 <RCC_SetFlashLatencyFromMSIRange+0x4a>
 8005fec:	4b25      	ldr	r3, [pc, #148]	; (8006084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff0:	4a24      	ldr	r2, [pc, #144]	; (8006084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8005ff8:	4b22      	ldr	r3, [pc, #136]	; (8006084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006000:	60fb      	str	r3, [r7, #12]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f7ff f952 	bl	80052ac <HAL_PWREx_GetVoltageRange>
 8006008:	6178      	str	r0, [r7, #20]
 800600a:	4b1e      	ldr	r3, [pc, #120]	; (8006084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800600c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600e:	4a1d      	ldr	r2, [pc, #116]	; (8006084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006014:	6593      	str	r3, [r2, #88]	; 0x58
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800601c:	d10b      	bne.n	8006036 <RCC_SetFlashLatencyFromMSIRange+0x6a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b80      	cmp	r3, #128	; 0x80
 8006022:	d919      	bls.n	8006058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2ba0      	cmp	r3, #160	; 0xa0
 8006028:	d902      	bls.n	8006030 <RCC_SetFlashLatencyFromMSIRange+0x64>
 800602a:	2302      	movs	r3, #2
 800602c:	613b      	str	r3, [r7, #16]
 800602e:	e013      	b.n	8006058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8006030:	2301      	movs	r3, #1
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	e010      	b.n	8006058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b80      	cmp	r3, #128	; 0x80
 800603a:	d902      	bls.n	8006042 <RCC_SetFlashLatencyFromMSIRange+0x76>
 800603c:	2303      	movs	r3, #3
 800603e:	613b      	str	r3, [r7, #16]
 8006040:	e00a      	b.n	8006058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b80      	cmp	r3, #128	; 0x80
 8006046:	d102      	bne.n	800604e <RCC_SetFlashLatencyFromMSIRange+0x82>
 8006048:	2302      	movs	r3, #2
 800604a:	613b      	str	r3, [r7, #16]
 800604c:	e004      	b.n	8006058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b70      	cmp	r3, #112	; 0x70
 8006052:	d101      	bne.n	8006058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8006054:	2301      	movs	r3, #1
 8006056:	613b      	str	r3, [r7, #16]
 8006058:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f023 0207 	bic.w	r2, r3, #7
 8006060:	4909      	ldr	r1, [pc, #36]	; (8006088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	600b      	str	r3, [r1, #0]
 8006068:	4b07      	ldr	r3, [pc, #28]	; (8006088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	429a      	cmp	r2, r3
 8006074:	d001      	beq.n	800607a <RCC_SetFlashLatencyFromMSIRange+0xae>
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <RCC_SetFlashLatencyFromMSIRange+0xb0>
 800607a:	2300      	movs	r3, #0
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	40021000 	.word	0x40021000
 8006088:	40022000 	.word	0x40022000

0800608c <HAL_RCCEx_PeriphCLKConfig>:
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	2300      	movs	r3, #0
 8006096:	74fb      	strb	r3, [r7, #19]
 8006098:	2300      	movs	r3, #0
 800609a:	74bb      	strb	r3, [r7, #18]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d03f      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060b0:	d01c      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x60>
 80060b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060b6:	d802      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x32>
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00e      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80060bc:	e01f      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x72>
 80060be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060c2:	d003      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80060c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060c8:	d01c      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80060ca:	e018      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x72>
 80060cc:	4b85      	ldr	r3, [pc, #532]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	4a84      	ldr	r2, [pc, #528]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80060d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d6:	60d3      	str	r3, [r2, #12]
 80060d8:	e015      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3304      	adds	r3, #4
 80060de:	2100      	movs	r1, #0
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 ff41 	bl	8006f68 <RCCEx_PLLSAI1_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	74fb      	strb	r3, [r7, #19]
 80060ea:	e00c      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3320      	adds	r3, #32
 80060f0:	2100      	movs	r1, #0
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 f828 	bl	8007148 <RCCEx_PLLSAI2_Config>
 80060f8:	4603      	mov	r3, r0
 80060fa:	74fb      	strb	r3, [r7, #19]
 80060fc:	e003      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060fe:	2301      	movs	r3, #1
 8006100:	74fb      	strb	r3, [r7, #19]
 8006102:	e000      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006104:	bf00      	nop
 8006106:	7cfb      	ldrb	r3, [r7, #19]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10b      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800610c:	4b75      	ldr	r3, [pc, #468]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800610e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006112:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800611a:	4972      	ldr	r1, [pc, #456]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800611c:	4313      	orrs	r3, r2
 800611e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006122:	e001      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8006124:	7cfb      	ldrb	r3, [r7, #19]
 8006126:	74bb      	strb	r3, [r7, #18]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d03f      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800613c:	d01c      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800613e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006142:	d802      	bhi.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00e      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8006148:	e01f      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800614a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800614e:	d003      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8006150:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006154:	d01c      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8006156:	e018      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006158:	4b62      	ldr	r3, [pc, #392]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	4a61      	ldr	r2, [pc, #388]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800615e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006162:	60d3      	str	r3, [r2, #12]
 8006164:	e015      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3304      	adds	r3, #4
 800616a:	2100      	movs	r1, #0
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fefb 	bl	8006f68 <RCCEx_PLLSAI1_Config>
 8006172:	4603      	mov	r3, r0
 8006174:	74fb      	strb	r3, [r7, #19]
 8006176:	e00c      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3320      	adds	r3, #32
 800617c:	2100      	movs	r1, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f000 ffe2 	bl	8007148 <RCCEx_PLLSAI2_Config>
 8006184:	4603      	mov	r3, r0
 8006186:	74fb      	strb	r3, [r7, #19]
 8006188:	e003      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800618a:	2301      	movs	r3, #1
 800618c:	74fb      	strb	r3, [r7, #19]
 800618e:	e000      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006190:	bf00      	nop
 8006192:	7cfb      	ldrb	r3, [r7, #19]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10b      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8006198:	4b52      	ldr	r3, [pc, #328]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800619a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061a6:	494f      	ldr	r1, [pc, #316]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061ae:	e001      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80061b0:	7cfb      	ldrb	r3, [r7, #19]
 80061b2:	74bb      	strb	r3, [r7, #18]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 80a0 	beq.w	8006302 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80061c2:	2300      	movs	r3, #0
 80061c4:	747b      	strb	r3, [r7, #17]
 80061c6:	4b47      	ldr	r3, [pc, #284]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80061c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80061d6:	2300      	movs	r3, #0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00d      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80061dc:	4b41      	ldr	r3, [pc, #260]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80061de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e0:	4a40      	ldr	r2, [pc, #256]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80061e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061e6:	6593      	str	r3, [r2, #88]	; 0x58
 80061e8:	4b3e      	ldr	r3, [pc, #248]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80061ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061f0:	60bb      	str	r3, [r7, #8]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2301      	movs	r3, #1
 80061f6:	747b      	strb	r3, [r7, #17]
 80061f8:	4b3b      	ldr	r3, [pc, #236]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a3a      	ldr	r2, [pc, #232]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80061fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	f7fc fb7e 	bl	8002904 <HAL_GetTick>
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	e009      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x194>
 800620c:	f7fc fb7a 	bl	8002904 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d902      	bls.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x194>
 800621a:	2303      	movs	r3, #3
 800621c:	74fb      	strb	r3, [r7, #19]
 800621e:	e005      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8006220:	4b31      	ldr	r3, [pc, #196]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0ef      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800622c:	7cfb      	ldrb	r3, [r7, #19]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d15c      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x260>
 8006232:	4b2c      	ldr	r3, [pc, #176]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01f      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	429a      	cmp	r2, r3
 800624e:	d019      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006250:	4b24      	ldr	r3, [pc, #144]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	4b21      	ldr	r3, [pc, #132]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006262:	4a20      	ldr	r2, [pc, #128]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800626c:	4b1d      	ldr	r3, [pc, #116]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800626e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006272:	4a1c      	ldr	r2, [pc, #112]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800627c:	4a19      	ldr	r2, [pc, #100]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d016      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800628e:	f7fc fb39 	bl	8002904 <HAL_GetTick>
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	e00b      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006296:	f7fc fb35 	bl	8002904 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d902      	bls.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x222>
 80062a8:	2303      	movs	r3, #3
 80062aa:	74fb      	strb	r3, [r7, #19]
 80062ac:	e006      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x230>
 80062ae:	4b0d      	ldr	r3, [pc, #52]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80062b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0ec      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80062bc:	7cfb      	ldrb	r3, [r7, #19]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10c      	bne.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x250>
 80062c2:	4b08      	ldr	r3, [pc, #32]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80062c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d2:	4904      	ldr	r1, [pc, #16]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80062da:	e009      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80062dc:	7cfb      	ldrb	r3, [r7, #19]
 80062de:	74bb      	strb	r3, [r7, #18]
 80062e0:	e006      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80062e2:	bf00      	nop
 80062e4:	40021000 	.word	0x40021000
 80062e8:	40007000 	.word	0x40007000
 80062ec:	7cfb      	ldrb	r3, [r7, #19]
 80062ee:	74bb      	strb	r3, [r7, #18]
 80062f0:	7c7b      	ldrb	r3, [r7, #17]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d105      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062f6:	4b9e      	ldr	r3, [pc, #632]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80062f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fa:	4a9d      	ldr	r2, [pc, #628]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80062fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006300:	6593      	str	r3, [r2, #88]	; 0x58
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800630e:	4b98      	ldr	r3, [pc, #608]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006314:	f023 0203 	bic.w	r2, r3, #3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631c:	4994      	ldr	r1, [pc, #592]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800631e:	4313      	orrs	r3, r2
 8006320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006330:	4b8f      	ldr	r3, [pc, #572]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006336:	f023 020c 	bic.w	r2, r3, #12
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633e:	498c      	ldr	r1, [pc, #560]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006340:	4313      	orrs	r3, r2
 8006342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0304 	and.w	r3, r3, #4
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8006352:	4b87      	ldr	r3, [pc, #540]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006358:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	4983      	ldr	r1, [pc, #524]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006362:	4313      	orrs	r3, r2
 8006364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8006374:	4b7e      	ldr	r3, [pc, #504]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006382:	497b      	ldr	r1, [pc, #492]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0310 	and.w	r3, r3, #16
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x320>
 8006396:	4b76      	ldr	r3, [pc, #472]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a4:	4972      	ldr	r1, [pc, #456]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0320 	and.w	r3, r3, #32
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x342>
 80063b8:	4b6d      	ldr	r3, [pc, #436]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063c6:	496a      	ldr	r1, [pc, #424]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80063da:	4b65      	ldr	r3, [pc, #404]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80063dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e8:	4961      	ldr	r1, [pc, #388]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80063fc:	4b5c      	ldr	r3, [pc, #368]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80063fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006402:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800640a:	4959      	ldr	r1, [pc, #356]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800640c:	4313      	orrs	r3, r2
 800640e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800641e:	4b54      	ldr	r3, [pc, #336]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006424:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642c:	4950      	ldr	r1, [pc, #320]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800642e:	4313      	orrs	r3, r2
 8006430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8006440:	4b4b      	ldr	r3, [pc, #300]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006446:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644e:	4948      	ldr	r1, [pc, #288]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006462:	4b43      	ldr	r3, [pc, #268]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006468:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006470:	493f      	ldr	r1, [pc, #252]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d028      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006484:	4b3a      	ldr	r3, [pc, #232]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006492:	4937      	ldr	r1, [pc, #220]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800649e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064a2:	d106      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80064a4:	4b32      	ldr	r3, [pc, #200]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	4a31      	ldr	r2, [pc, #196]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80064aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064ae:	60d3      	str	r3, [r2, #12]
 80064b0:	e011      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064ba:	d10c      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	2101      	movs	r1, #1
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fd50 	bl	8006f68 <RCCEx_PLLSAI1_Config>
 80064c8:	4603      	mov	r3, r0
 80064ca:	74fb      	strb	r3, [r7, #19]
 80064cc:	7cfb      	ldrb	r3, [r7, #19]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80064d2:	7cfb      	ldrb	r3, [r7, #19]
 80064d4:	74bb      	strb	r3, [r7, #18]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d028      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80064e2:	4b23      	ldr	r3, [pc, #140]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f0:	491f      	ldr	r1, [pc, #124]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006500:	d106      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006502:	4b1b      	ldr	r3, [pc, #108]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	4a1a      	ldr	r2, [pc, #104]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006508:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800650c:	60d3      	str	r3, [r2, #12]
 800650e:	e011      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006514:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006518:	d10c      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3304      	adds	r3, #4
 800651e:	2101      	movs	r1, #1
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fd21 	bl	8006f68 <RCCEx_PLLSAI1_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	74fb      	strb	r3, [r7, #19]
 800652a:	7cfb      	ldrb	r3, [r7, #19]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006530:	7cfb      	ldrb	r3, [r7, #19]
 8006532:	74bb      	strb	r3, [r7, #18]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d02b      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006540:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006546:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654e:	4908      	ldr	r1, [pc, #32]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800655a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800655e:	d109      	bne.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
 8006560:	4b03      	ldr	r3, [pc, #12]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	4a02      	ldr	r2, [pc, #8]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800656a:	60d3      	str	r3, [r2, #12]
 800656c:	e014      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800656e:	bf00      	nop
 8006570:	40021000 	.word	0x40021000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006578:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800657c:	d10c      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3304      	adds	r3, #4
 8006582:	2101      	movs	r1, #1
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fcef 	bl	8006f68 <RCCEx_PLLSAI1_Config>
 800658a:	4603      	mov	r3, r0
 800658c:	74fb      	strb	r3, [r7, #19]
 800658e:	7cfb      	ldrb	r3, [r7, #19]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006594:	7cfb      	ldrb	r3, [r7, #19]
 8006596:	74bb      	strb	r3, [r7, #18]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d02f      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x578>
 80065a4:	4b2b      	ldr	r3, [pc, #172]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065b2:	4928      	ldr	r1, [pc, #160]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065c2:	d10d      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3304      	adds	r3, #4
 80065c8:	2102      	movs	r1, #2
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fccc 	bl	8006f68 <RCCEx_PLLSAI1_Config>
 80065d0:	4603      	mov	r3, r0
 80065d2:	74fb      	strb	r3, [r7, #19]
 80065d4:	7cfb      	ldrb	r3, [r7, #19]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d014      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x578>
 80065da:	7cfb      	ldrb	r3, [r7, #19]
 80065dc:	74bb      	strb	r3, [r7, #18]
 80065de:	e011      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x578>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e8:	d10c      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x578>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3320      	adds	r3, #32
 80065ee:	2102      	movs	r1, #2
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fda9 	bl	8007148 <RCCEx_PLLSAI2_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	74fb      	strb	r3, [r7, #19]
 80065fa:	7cfb      	ldrb	r3, [r7, #19]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x578>
 8006600:	7cfb      	ldrb	r3, [r7, #19]
 8006602:	74bb      	strb	r3, [r7, #18]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00a      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006610:	4b10      	ldr	r3, [pc, #64]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006616:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800661e:	490d      	ldr	r1, [pc, #52]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006620:	4313      	orrs	r3, r2
 8006622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00b      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8006632:	4b08      	ldr	r3, [pc, #32]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006638:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006642:	4904      	ldr	r1, [pc, #16]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006644:	4313      	orrs	r3, r2
 8006646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800664a:	7cbb      	ldrb	r3, [r7, #18]
 800664c:	4618      	mov	r0, r3
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	40021000 	.word	0x40021000

08006658 <HAL_RCCEx_GetPeriphCLKFreq>:
 8006658:	b580      	push	{r7, lr}
 800665a:	b088      	sub	sp, #32
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	2300      	movs	r3, #0
 8006662:	61fb      	str	r3, [r7, #28]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800666a:	d137      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 800666c:	4bb8      	ldr	r3, [pc, #736]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800666e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800667e:	d014      	beq.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8006680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006684:	d01e      	beq.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8006686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800668a:	d001      	beq.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800668c:	f000 bc53 	b.w	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006690:	4baf      	ldr	r3, [pc, #700]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b02      	cmp	r3, #2
 800669c:	f040 8446 	bne.w	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 80066a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066a4:	61fb      	str	r3, [r7, #28]
 80066a6:	f000 bc41 	b.w	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 80066aa:	4ba9      	ldr	r3, [pc, #676]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80066ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	f040 843b 	bne.w	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 80066ba:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80066be:	61fb      	str	r3, [r7, #28]
 80066c0:	f000 bc36 	b.w	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 80066c4:	4ba2      	ldr	r3, [pc, #648]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066d0:	f040 8430 	bne.w	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
 80066d4:	4b9f      	ldr	r3, [pc, #636]	; (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80066d6:	61fb      	str	r3, [r7, #28]
 80066d8:	f000 bc2c 	b.w	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
 80066dc:	4b9c      	ldr	r3, [pc, #624]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d023      	beq.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d02e      	beq.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d139      	bne.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80066f4:	4b96      	ldr	r3, [pc, #600]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d116      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8006700:	4b93      	ldr	r3, [pc, #588]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0308 	and.w	r3, r3, #8
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 800670c:	4b90      	ldr	r3, [pc, #576]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	091b      	lsrs	r3, r3, #4
 8006712:	f003 030f 	and.w	r3, r3, #15
 8006716:	e005      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8006718:	4b8d      	ldr	r3, [pc, #564]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800671a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800671e:	0a1b      	lsrs	r3, r3, #8
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	4a8c      	ldr	r2, [pc, #560]	; (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800672a:	61bb      	str	r3, [r7, #24]
 800672c:	e01f      	b.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 800672e:	2300      	movs	r3, #0
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	e01c      	b.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 8006734:	4b86      	ldr	r3, [pc, #536]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800673c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006740:	d102      	bne.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8006742:	4b86      	ldr	r3, [pc, #536]	; (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8006744:	61bb      	str	r3, [r7, #24]
 8006746:	e012      	b.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 8006748:	2300      	movs	r3, #0
 800674a:	61bb      	str	r3, [r7, #24]
 800674c:	e00f      	b.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 800674e:	4b80      	ldr	r3, [pc, #512]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800675a:	d102      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
 800675c:	4b80      	ldr	r3, [pc, #512]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 800675e:	61bb      	str	r3, [r7, #24]
 8006760:	e005      	b.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 8006762:	2300      	movs	r3, #0
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	e002      	b.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 8006768:	2300      	movs	r3, #0
 800676a:	61bb      	str	r3, [r7, #24]
 800676c:	bf00      	nop
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006774:	f000 8337 	beq.w	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8006778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800677c:	d825      	bhi.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 800677e:	2b10      	cmp	r3, #16
 8006780:	f000 81df 	beq.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006784:	2b10      	cmp	r3, #16
 8006786:	d80f      	bhi.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8006788:	2b02      	cmp	r3, #2
 800678a:	f000 8128 	beq.w	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800678e:	2b02      	cmp	r3, #2
 8006790:	d803      	bhi.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8006792:	2b01      	cmp	r3, #1
 8006794:	f000 80ec 	beq.w	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8006798:	e3cd      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800679a:	2b04      	cmp	r3, #4
 800679c:	f000 8169 	beq.w	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	f000 819a 	beq.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80067a6:	e3c6      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80067a8:	2b40      	cmp	r3, #64	; 0x40
 80067aa:	f000 82b3 	beq.w	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	d803      	bhi.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	f000 81fd 	beq.w	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 80067b8:	e3bd      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80067ba:	2b80      	cmp	r3, #128	; 0x80
 80067bc:	f000 82cd 	beq.w	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80067c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c4:	f000 82ec 	beq.w	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80067c8:	e3b5      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80067ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067ce:	f000 822d 	beq.w	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80067d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067d6:	d811      	bhi.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80067d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067dc:	d021      	beq.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 80067de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067e2:	d804      	bhi.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80067e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e8:	f000 833e 	beq.w	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 80067ec:	e3a3      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80067ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f2:	d01d      	beq.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80067f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f8:	d021      	beq.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80067fa:	e39c      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80067fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006800:	f000 8277 	beq.w	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8006804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006808:	d804      	bhi.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800680a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800680e:	f000 8371 	beq.w	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8006812:	e390      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006814:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006818:	d011      	beq.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800681a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800681e:	d00e      	beq.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006820:	e389      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006822:	69b9      	ldr	r1, [r7, #24]
 8006824:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006828:	f000 fd68 	bl	80072fc <RCCEx_GetSAIxPeriphCLKFreq>
 800682c:	61f8      	str	r0, [r7, #28]
 800682e:	e382      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006830:	69b9      	ldr	r1, [r7, #24]
 8006832:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006836:	f000 fd61 	bl	80072fc <RCCEx_GetSAIxPeriphCLKFreq>
 800683a:	61f8      	str	r0, [r7, #28]
 800683c:	e37b      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800683e:	4b44      	ldr	r3, [pc, #272]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006844:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006850:	d023      	beq.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8006852:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006856:	d003      	beq.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006858:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800685c:	d04a      	beq.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800685e:	e086      	b.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x316>
 8006860:	4b3b      	ldr	r3, [pc, #236]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b02      	cmp	r3, #2
 800686a:	d17b      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800686c:	4b38      	ldr	r3, [pc, #224]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0308 	and.w	r3, r3, #8
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006878:	4b35      	ldr	r3, [pc, #212]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	091b      	lsrs	r3, r3, #4
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	e005      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8006884:	4b32      	ldr	r3, [pc, #200]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800688a:	0a1b      	lsrs	r3, r3, #8
 800688c:	f003 030f 	and.w	r3, r3, #15
 8006890:	4a31      	ldr	r2, [pc, #196]	; (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006896:	61fb      	str	r3, [r7, #28]
 8006898:	e064      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800689a:	4b2d      	ldr	r3, [pc, #180]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068a6:	d15f      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80068a8:	4b29      	ldr	r3, [pc, #164]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068b4:	d158      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80068b6:	4b26      	ldr	r3, [pc, #152]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	0a1b      	lsrs	r3, r3, #8
 80068bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	fb02 f203 	mul.w	r2, r2, r3
 80068ca:	4b21      	ldr	r3, [pc, #132]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	091b      	lsrs	r3, r3, #4
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	3301      	adds	r3, #1
 80068d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068da:	61bb      	str	r3, [r7, #24]
 80068dc:	4b1c      	ldr	r3, [pc, #112]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	0d5b      	lsrs	r3, r3, #21
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	3301      	adds	r3, #1
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	e039      	b.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80068f4:	4b16      	ldr	r3, [pc, #88]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006900:	d134      	bne.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8006902:	4b13      	ldr	r3, [pc, #76]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800690a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800690e:	d12d      	bne.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8006910:	4b0f      	ldr	r3, [pc, #60]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	0a1b      	lsrs	r3, r3, #8
 8006916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	fb02 f203 	mul.w	r2, r2, r3
 8006924:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	091b      	lsrs	r3, r3, #4
 800692a:	f003 0307 	and.w	r3, r3, #7
 800692e:	3301      	adds	r3, #1
 8006930:	fbb2 f3f3 	udiv	r3, r2, r3
 8006934:	61bb      	str	r3, [r7, #24]
 8006936:	4b06      	ldr	r3, [pc, #24]	; (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	0d5b      	lsrs	r3, r3, #21
 800693c:	f003 0303 	and.w	r3, r3, #3
 8006940:	3301      	adds	r3, #1
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	fbb2 f3f3 	udiv	r3, r2, r3
 800694a:	61fb      	str	r3, [r7, #28]
 800694c:	e00e      	b.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800694e:	bf00      	nop
 8006950:	40021000 	.word	0x40021000
 8006954:	0003d090 	.word	0x0003d090
 8006958:	0800e21c 	.word	0x0800e21c
 800695c:	00f42400 	.word	0x00f42400
 8006960:	007a1200 	.word	0x007a1200
 8006964:	bf00      	nop
 8006966:	e2e6      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006968:	bf00      	nop
 800696a:	e2e4      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800696c:	bf00      	nop
 800696e:	e2e2      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006970:	4bac      	ldr	r3, [pc, #688]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	613b      	str	r3, [r7, #16]
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	2b03      	cmp	r3, #3
 8006980:	d827      	bhi.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8006982:	a201      	add	r2, pc, #4	; (adr r2, 8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8006984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006988:	08006999 	.word	0x08006999
 800698c:	080069a1 	.word	0x080069a1
 8006990:	080069a9 	.word	0x080069a9
 8006994:	080069bd 	.word	0x080069bd
 8006998:	f7ff fb02 	bl	8005fa0 <HAL_RCC_GetPCLK2Freq>
 800699c:	61f8      	str	r0, [r7, #28]
 800699e:	e01d      	b.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 80069a0:	f7ff fa52 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 80069a4:	61f8      	str	r0, [r7, #28]
 80069a6:	e019      	b.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 80069a8:	4b9e      	ldr	r3, [pc, #632]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b4:	d10f      	bne.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80069b6:	4b9c      	ldr	r3, [pc, #624]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80069b8:	61fb      	str	r3, [r7, #28]
 80069ba:	e00c      	b.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80069bc:	4b99      	ldr	r3, [pc, #612]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80069be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d107      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 80069ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ce:	61fb      	str	r3, [r7, #28]
 80069d0:	e003      	b.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 80069d2:	bf00      	nop
 80069d4:	e2af      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80069d6:	bf00      	nop
 80069d8:	e2ad      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80069da:	bf00      	nop
 80069dc:	e2ab      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80069de:	4b91      	ldr	r3, [pc, #580]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80069e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e4:	f003 030c 	and.w	r3, r3, #12
 80069e8:	613b      	str	r3, [r7, #16]
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	2b0c      	cmp	r3, #12
 80069ee:	d83a      	bhi.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80069f0:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80069f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f6:	bf00      	nop
 80069f8:	08006a2d 	.word	0x08006a2d
 80069fc:	08006a67 	.word	0x08006a67
 8006a00:	08006a67 	.word	0x08006a67
 8006a04:	08006a67 	.word	0x08006a67
 8006a08:	08006a35 	.word	0x08006a35
 8006a0c:	08006a67 	.word	0x08006a67
 8006a10:	08006a67 	.word	0x08006a67
 8006a14:	08006a67 	.word	0x08006a67
 8006a18:	08006a3d 	.word	0x08006a3d
 8006a1c:	08006a67 	.word	0x08006a67
 8006a20:	08006a67 	.word	0x08006a67
 8006a24:	08006a67 	.word	0x08006a67
 8006a28:	08006a51 	.word	0x08006a51
 8006a2c:	f7ff faa2 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8006a30:	61f8      	str	r0, [r7, #28]
 8006a32:	e01d      	b.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8006a34:	f7ff fa08 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8006a38:	61f8      	str	r0, [r7, #28]
 8006a3a:	e019      	b.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8006a3c:	4b79      	ldr	r3, [pc, #484]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a48:	d10f      	bne.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8006a4a:	4b77      	ldr	r3, [pc, #476]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	e00c      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8006a50:	4b74      	ldr	r3, [pc, #464]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d107      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8006a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a62:	61fb      	str	r3, [r7, #28]
 8006a64:	e003      	b.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8006a66:	bf00      	nop
 8006a68:	e265      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006a6a:	bf00      	nop
 8006a6c:	e263      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006a6e:	bf00      	nop
 8006a70:	e261      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006a72:	4b6c      	ldr	r3, [pc, #432]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a7c:	613b      	str	r3, [r7, #16]
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b10      	cmp	r3, #16
 8006a82:	d00d      	beq.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8006a84:	2b10      	cmp	r3, #16
 8006a86:	d802      	bhi.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 8006a8c:	e024      	b.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	d00a      	beq.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8006a92:	2b30      	cmp	r3, #48	; 0x30
 8006a94:	d012      	beq.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8006a96:	e01f      	b.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8006a98:	f7ff fa6c 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8006a9c:	61f8      	str	r0, [r7, #28]
 8006a9e:	e01b      	b.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8006aa0:	f7ff f9d2 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8006aa4:	61f8      	str	r0, [r7, #28]
 8006aa6:	e017      	b.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8006aa8:	4b5e      	ldr	r3, [pc, #376]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ab4:	d10d      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8006ab6:	4b5c      	ldr	r3, [pc, #368]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006ab8:	61fb      	str	r3, [r7, #28]
 8006aba:	e00a      	b.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8006abc:	4b59      	ldr	r3, [pc, #356]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d105      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8006aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ace:	61fb      	str	r3, [r7, #28]
 8006ad0:	e001      	b.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8006ad2:	bf00      	nop
 8006ad4:	e22f      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006ad6:	bf00      	nop
 8006ad8:	e22d      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006ada:	4b52      	ldr	r3, [pc, #328]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ae4:	613b      	str	r3, [r7, #16]
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	2b40      	cmp	r3, #64	; 0x40
 8006aea:	d00d      	beq.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8006aec:	2b40      	cmp	r3, #64	; 0x40
 8006aee:	d802      	bhi.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d005      	beq.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8006af4:	e024      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 8006af6:	2b80      	cmp	r3, #128	; 0x80
 8006af8:	d00a      	beq.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8006afa:	2bc0      	cmp	r3, #192	; 0xc0
 8006afc:	d012      	beq.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8006afe:	e01f      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 8006b00:	f7ff fa38 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8006b04:	61f8      	str	r0, [r7, #28]
 8006b06:	e01b      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 8006b08:	f7ff f99e 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8006b0c:	61f8      	str	r0, [r7, #28]
 8006b0e:	e017      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 8006b10:	4b44      	ldr	r3, [pc, #272]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b1c:	d10d      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
 8006b1e:	4b42      	ldr	r3, [pc, #264]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006b20:	61fb      	str	r3, [r7, #28]
 8006b22:	e00a      	b.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
 8006b24:	4b3f      	ldr	r3, [pc, #252]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d105      	bne.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8006b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b36:	61fb      	str	r3, [r7, #28]
 8006b38:	e001      	b.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8006b3a:	bf00      	nop
 8006b3c:	e1fb      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006b3e:	bf00      	nop
 8006b40:	e1f9      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006b42:	4b38      	ldr	r3, [pc, #224]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b4c:	613b      	str	r3, [r7, #16]
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b54:	d010      	beq.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8006b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b5a:	d802      	bhi.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d007      	beq.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006b60:	e026      	b.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 8006b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b66:	d00b      	beq.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006b68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b6c:	d012      	beq.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 8006b6e:	e01f      	b.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 8006b70:	f7ff fa00 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8006b74:	61f8      	str	r0, [r7, #28]
 8006b76:	e01b      	b.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 8006b78:	f7ff f966 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8006b7c:	61f8      	str	r0, [r7, #28]
 8006b7e:	e017      	b.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 8006b80:	4b28      	ldr	r3, [pc, #160]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b8c:	d10d      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8006b8e:	4b26      	ldr	r3, [pc, #152]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006b90:	61fb      	str	r3, [r7, #28]
 8006b92:	e00a      	b.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8006b94:	4b23      	ldr	r3, [pc, #140]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d105      	bne.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 8006ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ba6:	61fb      	str	r3, [r7, #28]
 8006ba8:	e001      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 8006baa:	bf00      	nop
 8006bac:	e1c3      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006bae:	bf00      	nop
 8006bb0:	e1c1      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006bb2:	4b1c      	ldr	r3, [pc, #112]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bbc:	613b      	str	r3, [r7, #16]
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc4:	d010      	beq.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8006bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bca:	d802      	bhi.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d007      	beq.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
 8006bd0:	e026      	b.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 8006bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd6:	d00b      	beq.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8006bd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bdc:	d012      	beq.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
 8006bde:	e01f      	b.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 8006be0:	f7ff f9c8 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8006be4:	61f8      	str	r0, [r7, #28]
 8006be6:	e01b      	b.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 8006be8:	f7ff f92e 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8006bec:	61f8      	str	r0, [r7, #28]
 8006bee:	e017      	b.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 8006bf0:	4b0c      	ldr	r3, [pc, #48]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bfc:	d10d      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8006bfe:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8006c00:	61fb      	str	r3, [r7, #28]
 8006c02:	e00a      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8006c04:	4b07      	ldr	r3, [pc, #28]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8006c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d105      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
 8006c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c16:	61fb      	str	r3, [r7, #28]
 8006c18:	e001      	b.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
 8006c1a:	bf00      	nop
 8006c1c:	e18b      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006c1e:	bf00      	nop
 8006c20:	e189      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006c22:	bf00      	nop
 8006c24:	40021000 	.word	0x40021000
 8006c28:	00f42400 	.word	0x00f42400
 8006c2c:	4bae      	ldr	r3, [pc, #696]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c36:	613b      	str	r3, [r7, #16]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c3e:	d02f      	beq.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8006c40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c44:	d003      	beq.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c4a:	d004      	beq.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8006c4c:	e050      	b.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8006c4e:	f7ff f8fb 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8006c52:	61f8      	str	r0, [r7, #28]
 8006c54:	e04c      	b.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8006c56:	4ba4      	ldr	r3, [pc, #656]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d043      	beq.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8006c62:	4ba1      	ldr	r3, [pc, #644]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	0a1b      	lsrs	r3, r3, #8
 8006c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	fb02 f203 	mul.w	r2, r2, r3
 8006c76:	4b9c      	ldr	r3, [pc, #624]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	091b      	lsrs	r3, r3, #4
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	3301      	adds	r3, #1
 8006c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c86:	61bb      	str	r3, [r7, #24]
 8006c88:	4b97      	ldr	r3, [pc, #604]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	0e5b      	lsrs	r3, r3, #25
 8006c8e:	f003 0303 	and.w	r3, r3, #3
 8006c92:	3301      	adds	r3, #1
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	e024      	b.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8006ca0:	4b91      	ldr	r3, [pc, #580]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d020      	beq.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006cac:	4b8e      	ldr	r3, [pc, #568]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	0a1b      	lsrs	r3, r3, #8
 8006cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cb6:	60fb      	str	r3, [r7, #12]
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	fb02 f203 	mul.w	r2, r2, r3
 8006cc0:	4b89      	ldr	r3, [pc, #548]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	091b      	lsrs	r3, r3, #4
 8006cc6:	f003 0307 	and.w	r3, r3, #7
 8006cca:	3301      	adds	r3, #1
 8006ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	4b85      	ldr	r3, [pc, #532]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	0e5b      	lsrs	r3, r3, #25
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	3301      	adds	r3, #1
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce6:	61fb      	str	r3, [r7, #28]
 8006ce8:	e001      	b.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006cea:	bf00      	nop
 8006cec:	e123      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006cee:	bf00      	nop
 8006cf0:	e121      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006cf2:	4b7d      	ldr	r3, [pc, #500]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d103      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8006d04:	f7ff f94c 	bl	8005fa0 <HAL_RCC_GetPCLK2Freq>
 8006d08:	61f8      	str	r0, [r7, #28]
 8006d0a:	e114      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006d0c:	f7ff f89c 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8006d10:	61f8      	str	r0, [r7, #28]
 8006d12:	e110      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006d14:	4b74      	ldr	r3, [pc, #464]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d1a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d1e:	613b      	str	r3, [r7, #16]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d26:	d009      	beq.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8006d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d2c:	d00a      	beq.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d000      	beq.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8006d32:	e011      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006d34:	f7ff f91e 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8006d38:	61f8      	str	r0, [r7, #28]
 8006d3a:	e00d      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006d3c:	f7ff f884 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8006d40:	61f8      	str	r0, [r7, #28]
 8006d42:	e009      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006d44:	4b68      	ldr	r3, [pc, #416]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d50:	d101      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8006d52:	4b66      	ldr	r3, [pc, #408]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006d54:	61fb      	str	r3, [r7, #28]
 8006d56:	bf00      	nop
 8006d58:	e0ed      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006d5a:	4b63      	ldr	r3, [pc, #396]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d64:	613b      	str	r3, [r7, #16]
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d6c:	d009      	beq.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d72:	d00a      	beq.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d000      	beq.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
 8006d78:	e011      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006d7a:	f7ff f8fb 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8006d7e:	61f8      	str	r0, [r7, #28]
 8006d80:	e00d      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006d82:	f7ff f861 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8006d86:	61f8      	str	r0, [r7, #28]
 8006d88:	e009      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006d8a:	4b57      	ldr	r3, [pc, #348]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d96:	d101      	bne.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8006d98:	4b54      	ldr	r3, [pc, #336]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006d9a:	61fb      	str	r3, [r7, #28]
 8006d9c:	bf00      	nop
 8006d9e:	e0ca      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006da0:	4b51      	ldr	r3, [pc, #324]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db2:	d009      	beq.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006db8:	d00a      	beq.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d000      	beq.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8006dbe:	e011      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006dc0:	f7ff f8d8 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8006dc4:	61f8      	str	r0, [r7, #28]
 8006dc6:	e00d      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006dc8:	f7ff f83e 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8006dcc:	61f8      	str	r0, [r7, #28]
 8006dce:	e009      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006dd0:	4b45      	ldr	r3, [pc, #276]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ddc:	d101      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8006dde:	4b43      	ldr	r3, [pc, #268]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006de0:	61fb      	str	r3, [r7, #28]
 8006de2:	bf00      	nop
 8006de4:	e0a7      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006de6:	4b40      	ldr	r3, [pc, #256]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006df0:	613b      	str	r3, [r7, #16]
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006df8:	d010      	beq.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8006dfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dfe:	d802      	bhi.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006e04:	e02f      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8006e06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e0a:	d012      	beq.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8006e0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e10:	d019      	beq.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
 8006e12:	e028      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8006e14:	f7ff f8ae 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8006e18:	61f8      	str	r0, [r7, #28]
 8006e1a:	e024      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8006e1c:	4b32      	ldr	r3, [pc, #200]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d118      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8006e2a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006e2e:	61fb      	str	r3, [r7, #28]
 8006e30:	e014      	b.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8006e32:	4b2d      	ldr	r3, [pc, #180]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e3e:	d10f      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8006e40:	4b2a      	ldr	r3, [pc, #168]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006e42:	61fb      	str	r3, [r7, #28]
 8006e44:	e00c      	b.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8006e46:	4b28      	ldr	r3, [pc, #160]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d107      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 8006e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	e003      	b.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 8006e5c:	bf00      	nop
 8006e5e:	e06a      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006e60:	bf00      	nop
 8006e62:	e068      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006e64:	bf00      	nop
 8006e66:	e066      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006e68:	4b1f      	ldr	r3, [pc, #124]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e6e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006e72:	613b      	str	r3, [r7, #16]
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e7a:	d010      	beq.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e80:	d802      	bhi.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d007      	beq.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8006e86:	e034      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8006e88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e8c:	d012      	beq.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8006e8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e92:	d019      	beq.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8006e94:	e02d      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8006e96:	f7ff f86d 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8006e9a:	61f8      	str	r0, [r7, #28]
 8006e9c:	e029      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8006e9e:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d118      	bne.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006eac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006eb0:	61fb      	str	r3, [r7, #28]
 8006eb2:	e014      	b.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006eb4:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec0:	d10f      	bne.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006ec2:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8006ec4:	61fb      	str	r3, [r7, #28]
 8006ec6:	e00c      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006ec8:	4b07      	ldr	r3, [pc, #28]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8006eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d10c      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 8006ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eda:	61fb      	str	r3, [r7, #28]
 8006edc:	e008      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 8006ede:	bf00      	nop
 8006ee0:	e029      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006ee2:	bf00      	nop
 8006ee4:	e027      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006ee6:	bf00      	nop
 8006ee8:	40021000 	.word	0x40021000
 8006eec:	00f42400 	.word	0x00f42400
 8006ef0:	bf00      	nop
 8006ef2:	e020      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006ef4:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006efa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006efe:	613b      	str	r3, [r7, #16]
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 8006f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0a:	d004      	beq.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8006f0c:	e00d      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8006f0e:	f7ff f831 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8006f12:	61f8      	str	r0, [r7, #28]
 8006f14:	e009      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8006f16:	4b0a      	ldr	r3, [pc, #40]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f22:	d101      	bne.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8006f24:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 8006f26:	61fb      	str	r3, [r7, #28]
 8006f28:	bf00      	nop
 8006f2a:	e004      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006f2c:	bf00      	nop
 8006f2e:	e002      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006f30:	bf00      	nop
 8006f32:	e000      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006f34:	bf00      	nop
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3720      	adds	r7, #32
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	40021000 	.word	0x40021000
 8006f44:	00f42400 	.word	0x00f42400

08006f48 <HAL_RCCEx_EnableMSIPLLMode>:
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a04      	ldr	r2, [pc, #16]	; (8006f64 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006f52:	f043 0304 	orr.w	r3, r3, #4
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	bf00      	nop
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	40021000 	.word	0x40021000

08006f68 <RCCEx_PLLSAI1_Config>:
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]
 8006f76:	4b73      	ldr	r3, [pc, #460]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d018      	beq.n	8006fb4 <RCCEx_PLLSAI1_Config+0x4c>
 8006f82:	4b70      	ldr	r3, [pc, #448]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f003 0203 	and.w	r2, r3, #3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d10d      	bne.n	8006fae <RCCEx_PLLSAI1_Config+0x46>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d009      	beq.n	8006fae <RCCEx_PLLSAI1_Config+0x46>
 8006f9a:	4b6a      	ldr	r3, [pc, #424]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	091b      	lsrs	r3, r3, #4
 8006fa0:	f003 0307 	and.w	r3, r3, #7
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d044      	beq.n	8007038 <RCCEx_PLLSAI1_Config+0xd0>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	73fb      	strb	r3, [r7, #15]
 8006fb2:	e041      	b.n	8007038 <RCCEx_PLLSAI1_Config+0xd0>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d00c      	beq.n	8006fd6 <RCCEx_PLLSAI1_Config+0x6e>
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d013      	beq.n	8006fe8 <RCCEx_PLLSAI1_Config+0x80>
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d120      	bne.n	8007006 <RCCEx_PLLSAI1_Config+0x9e>
 8006fc4:	4b5f      	ldr	r3, [pc, #380]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0302 	and.w	r3, r3, #2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d11d      	bne.n	800700c <RCCEx_PLLSAI1_Config+0xa4>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	73fb      	strb	r3, [r7, #15]
 8006fd4:	e01a      	b.n	800700c <RCCEx_PLLSAI1_Config+0xa4>
 8006fd6:	4b5b      	ldr	r3, [pc, #364]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d116      	bne.n	8007010 <RCCEx_PLLSAI1_Config+0xa8>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	73fb      	strb	r3, [r7, #15]
 8006fe6:	e013      	b.n	8007010 <RCCEx_PLLSAI1_Config+0xa8>
 8006fe8:	4b56      	ldr	r3, [pc, #344]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10f      	bne.n	8007014 <RCCEx_PLLSAI1_Config+0xac>
 8006ff4:	4b53      	ldr	r3, [pc, #332]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d109      	bne.n	8007014 <RCCEx_PLLSAI1_Config+0xac>
 8007000:	2301      	movs	r3, #1
 8007002:	73fb      	strb	r3, [r7, #15]
 8007004:	e006      	b.n	8007014 <RCCEx_PLLSAI1_Config+0xac>
 8007006:	2301      	movs	r3, #1
 8007008:	73fb      	strb	r3, [r7, #15]
 800700a:	e004      	b.n	8007016 <RCCEx_PLLSAI1_Config+0xae>
 800700c:	bf00      	nop
 800700e:	e002      	b.n	8007016 <RCCEx_PLLSAI1_Config+0xae>
 8007010:	bf00      	nop
 8007012:	e000      	b.n	8007016 <RCCEx_PLLSAI1_Config+0xae>
 8007014:	bf00      	nop
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10d      	bne.n	8007038 <RCCEx_PLLSAI1_Config+0xd0>
 800701c:	4b49      	ldr	r3, [pc, #292]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6819      	ldr	r1, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	3b01      	subs	r3, #1
 800702e:	011b      	lsls	r3, r3, #4
 8007030:	430b      	orrs	r3, r1
 8007032:	4944      	ldr	r1, [pc, #272]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007034:	4313      	orrs	r3, r2
 8007036:	60cb      	str	r3, [r1, #12]
 8007038:	7bfb      	ldrb	r3, [r7, #15]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d17d      	bne.n	800713a <RCCEx_PLLSAI1_Config+0x1d2>
 800703e:	4b41      	ldr	r3, [pc, #260]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a40      	ldr	r2, [pc, #256]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007044:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	f7fb fc5b 	bl	8002904 <HAL_GetTick>
 800704e:	60b8      	str	r0, [r7, #8]
 8007050:	e009      	b.n	8007066 <RCCEx_PLLSAI1_Config+0xfe>
 8007052:	f7fb fc57 	bl	8002904 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	2b02      	cmp	r3, #2
 800705e:	d902      	bls.n	8007066 <RCCEx_PLLSAI1_Config+0xfe>
 8007060:	2303      	movs	r3, #3
 8007062:	73fb      	strb	r3, [r7, #15]
 8007064:	e005      	b.n	8007072 <RCCEx_PLLSAI1_Config+0x10a>
 8007066:	4b37      	ldr	r3, [pc, #220]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1ef      	bne.n	8007052 <RCCEx_PLLSAI1_Config+0xea>
 8007072:	7bfb      	ldrb	r3, [r7, #15]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d160      	bne.n	800713a <RCCEx_PLLSAI1_Config+0x1d2>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d111      	bne.n	80070a2 <RCCEx_PLLSAI1_Config+0x13a>
 800707e:	4b31      	ldr	r3, [pc, #196]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	6892      	ldr	r2, [r2, #8]
 800708e:	0211      	lsls	r1, r2, #8
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	68d2      	ldr	r2, [r2, #12]
 8007094:	0912      	lsrs	r2, r2, #4
 8007096:	0452      	lsls	r2, r2, #17
 8007098:	430a      	orrs	r2, r1
 800709a:	492a      	ldr	r1, [pc, #168]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 800709c:	4313      	orrs	r3, r2
 800709e:	610b      	str	r3, [r1, #16]
 80070a0:	e027      	b.n	80070f2 <RCCEx_PLLSAI1_Config+0x18a>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d112      	bne.n	80070ce <RCCEx_PLLSAI1_Config+0x166>
 80070a8:	4b26      	ldr	r3, [pc, #152]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80070b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	6892      	ldr	r2, [r2, #8]
 80070b8:	0211      	lsls	r1, r2, #8
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	6912      	ldr	r2, [r2, #16]
 80070be:	0852      	lsrs	r2, r2, #1
 80070c0:	3a01      	subs	r2, #1
 80070c2:	0552      	lsls	r2, r2, #21
 80070c4:	430a      	orrs	r2, r1
 80070c6:	491f      	ldr	r1, [pc, #124]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	610b      	str	r3, [r1, #16]
 80070cc:	e011      	b.n	80070f2 <RCCEx_PLLSAI1_Config+0x18a>
 80070ce:	4b1d      	ldr	r3, [pc, #116]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80070d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	6892      	ldr	r2, [r2, #8]
 80070de:	0211      	lsls	r1, r2, #8
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	6952      	ldr	r2, [r2, #20]
 80070e4:	0852      	lsrs	r2, r2, #1
 80070e6:	3a01      	subs	r2, #1
 80070e8:	0652      	lsls	r2, r2, #25
 80070ea:	430a      	orrs	r2, r1
 80070ec:	4915      	ldr	r1, [pc, #84]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	610b      	str	r3, [r1, #16]
 80070f2:	4b14      	ldr	r3, [pc, #80]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a13      	ldr	r2, [pc, #76]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	f7fb fc01 	bl	8002904 <HAL_GetTick>
 8007102:	60b8      	str	r0, [r7, #8]
 8007104:	e009      	b.n	800711a <RCCEx_PLLSAI1_Config+0x1b2>
 8007106:	f7fb fbfd 	bl	8002904 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d902      	bls.n	800711a <RCCEx_PLLSAI1_Config+0x1b2>
 8007114:	2303      	movs	r3, #3
 8007116:	73fb      	strb	r3, [r7, #15]
 8007118:	e005      	b.n	8007126 <RCCEx_PLLSAI1_Config+0x1be>
 800711a:	4b0a      	ldr	r3, [pc, #40]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0ef      	beq.n	8007106 <RCCEx_PLLSAI1_Config+0x19e>
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d106      	bne.n	800713a <RCCEx_PLLSAI1_Config+0x1d2>
 800712c:	4b05      	ldr	r3, [pc, #20]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	4903      	ldr	r1, [pc, #12]	; (8007144 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007136:	4313      	orrs	r3, r2
 8007138:	610b      	str	r3, [r1, #16]
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	40021000 	.word	0x40021000

08007148 <RCCEx_PLLSAI2_Config>:
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
 8007152:	2300      	movs	r3, #0
 8007154:	73fb      	strb	r3, [r7, #15]
 8007156:	4b68      	ldr	r3, [pc, #416]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f003 0303 	and.w	r3, r3, #3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d018      	beq.n	8007194 <RCCEx_PLLSAI2_Config+0x4c>
 8007162:	4b65      	ldr	r3, [pc, #404]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f003 0203 	and.w	r2, r3, #3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d10d      	bne.n	800718e <RCCEx_PLLSAI2_Config+0x46>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d009      	beq.n	800718e <RCCEx_PLLSAI2_Config+0x46>
 800717a:	4b5f      	ldr	r3, [pc, #380]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	091b      	lsrs	r3, r3, #4
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	429a      	cmp	r2, r3
 800718c:	d044      	beq.n	8007218 <RCCEx_PLLSAI2_Config+0xd0>
 800718e:	2301      	movs	r3, #1
 8007190:	73fb      	strb	r3, [r7, #15]
 8007192:	e041      	b.n	8007218 <RCCEx_PLLSAI2_Config+0xd0>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b02      	cmp	r3, #2
 800719a:	d00c      	beq.n	80071b6 <RCCEx_PLLSAI2_Config+0x6e>
 800719c:	2b03      	cmp	r3, #3
 800719e:	d013      	beq.n	80071c8 <RCCEx_PLLSAI2_Config+0x80>
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d120      	bne.n	80071e6 <RCCEx_PLLSAI2_Config+0x9e>
 80071a4:	4b54      	ldr	r3, [pc, #336]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d11d      	bne.n	80071ec <RCCEx_PLLSAI2_Config+0xa4>
 80071b0:	2301      	movs	r3, #1
 80071b2:	73fb      	strb	r3, [r7, #15]
 80071b4:	e01a      	b.n	80071ec <RCCEx_PLLSAI2_Config+0xa4>
 80071b6:	4b50      	ldr	r3, [pc, #320]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d116      	bne.n	80071f0 <RCCEx_PLLSAI2_Config+0xa8>
 80071c2:	2301      	movs	r3, #1
 80071c4:	73fb      	strb	r3, [r7, #15]
 80071c6:	e013      	b.n	80071f0 <RCCEx_PLLSAI2_Config+0xa8>
 80071c8:	4b4b      	ldr	r3, [pc, #300]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10f      	bne.n	80071f4 <RCCEx_PLLSAI2_Config+0xac>
 80071d4:	4b48      	ldr	r3, [pc, #288]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d109      	bne.n	80071f4 <RCCEx_PLLSAI2_Config+0xac>
 80071e0:	2301      	movs	r3, #1
 80071e2:	73fb      	strb	r3, [r7, #15]
 80071e4:	e006      	b.n	80071f4 <RCCEx_PLLSAI2_Config+0xac>
 80071e6:	2301      	movs	r3, #1
 80071e8:	73fb      	strb	r3, [r7, #15]
 80071ea:	e004      	b.n	80071f6 <RCCEx_PLLSAI2_Config+0xae>
 80071ec:	bf00      	nop
 80071ee:	e002      	b.n	80071f6 <RCCEx_PLLSAI2_Config+0xae>
 80071f0:	bf00      	nop
 80071f2:	e000      	b.n	80071f6 <RCCEx_PLLSAI2_Config+0xae>
 80071f4:	bf00      	nop
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10d      	bne.n	8007218 <RCCEx_PLLSAI2_Config+0xd0>
 80071fc:	4b3e      	ldr	r3, [pc, #248]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6819      	ldr	r1, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	3b01      	subs	r3, #1
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	430b      	orrs	r3, r1
 8007212:	4939      	ldr	r1, [pc, #228]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007214:	4313      	orrs	r3, r2
 8007216:	60cb      	str	r3, [r1, #12]
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d167      	bne.n	80072ee <RCCEx_PLLSAI2_Config+0x1a6>
 800721e:	4b36      	ldr	r3, [pc, #216]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a35      	ldr	r2, [pc, #212]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	f7fb fb6b 	bl	8002904 <HAL_GetTick>
 800722e:	60b8      	str	r0, [r7, #8]
 8007230:	e009      	b.n	8007246 <RCCEx_PLLSAI2_Config+0xfe>
 8007232:	f7fb fb67 	bl	8002904 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d902      	bls.n	8007246 <RCCEx_PLLSAI2_Config+0xfe>
 8007240:	2303      	movs	r3, #3
 8007242:	73fb      	strb	r3, [r7, #15]
 8007244:	e005      	b.n	8007252 <RCCEx_PLLSAI2_Config+0x10a>
 8007246:	4b2c      	ldr	r3, [pc, #176]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1ef      	bne.n	8007232 <RCCEx_PLLSAI2_Config+0xea>
 8007252:	7bfb      	ldrb	r3, [r7, #15]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d14a      	bne.n	80072ee <RCCEx_PLLSAI2_Config+0x1a6>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d111      	bne.n	8007282 <RCCEx_PLLSAI2_Config+0x13a>
 800725e:	4b26      	ldr	r3, [pc, #152]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	6892      	ldr	r2, [r2, #8]
 800726e:	0211      	lsls	r1, r2, #8
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	68d2      	ldr	r2, [r2, #12]
 8007274:	0912      	lsrs	r2, r2, #4
 8007276:	0452      	lsls	r2, r2, #17
 8007278:	430a      	orrs	r2, r1
 800727a:	491f      	ldr	r1, [pc, #124]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800727c:	4313      	orrs	r3, r2
 800727e:	614b      	str	r3, [r1, #20]
 8007280:	e011      	b.n	80072a6 <RCCEx_PLLSAI2_Config+0x15e>
 8007282:	4b1d      	ldr	r3, [pc, #116]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800728a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	6892      	ldr	r2, [r2, #8]
 8007292:	0211      	lsls	r1, r2, #8
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	6912      	ldr	r2, [r2, #16]
 8007298:	0852      	lsrs	r2, r2, #1
 800729a:	3a01      	subs	r2, #1
 800729c:	0652      	lsls	r2, r2, #25
 800729e:	430a      	orrs	r2, r1
 80072a0:	4915      	ldr	r1, [pc, #84]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	614b      	str	r3, [r1, #20]
 80072a6:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a13      	ldr	r2, [pc, #76]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80072ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072b0:	6013      	str	r3, [r2, #0]
 80072b2:	f7fb fb27 	bl	8002904 <HAL_GetTick>
 80072b6:	60b8      	str	r0, [r7, #8]
 80072b8:	e009      	b.n	80072ce <RCCEx_PLLSAI2_Config+0x186>
 80072ba:	f7fb fb23 	bl	8002904 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d902      	bls.n	80072ce <RCCEx_PLLSAI2_Config+0x186>
 80072c8:	2303      	movs	r3, #3
 80072ca:	73fb      	strb	r3, [r7, #15]
 80072cc:	e005      	b.n	80072da <RCCEx_PLLSAI2_Config+0x192>
 80072ce:	4b0a      	ldr	r3, [pc, #40]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d0ef      	beq.n	80072ba <RCCEx_PLLSAI2_Config+0x172>
 80072da:	7bfb      	ldrb	r3, [r7, #15]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d106      	bne.n	80072ee <RCCEx_PLLSAI2_Config+0x1a6>
 80072e0:	4b05      	ldr	r3, [pc, #20]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80072e2:	695a      	ldr	r2, [r3, #20]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	4903      	ldr	r1, [pc, #12]	; (80072f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	614b      	str	r3, [r1, #20]
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	40021000 	.word	0x40021000

080072fc <RCCEx_GetSAIxPeriphCLKFreq>:
 80072fc:	b480      	push	{r7}
 80072fe:	b089      	sub	sp, #36	; 0x24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
 8007306:	2300      	movs	r3, #0
 8007308:	61fb      	str	r3, [r7, #28]
 800730a:	2300      	movs	r3, #0
 800730c:	61bb      	str	r3, [r7, #24]
 800730e:	2300      	movs	r3, #0
 8007310:	617b      	str	r3, [r7, #20]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007318:	d10c      	bne.n	8007334 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
 800731a:	4b62      	ldr	r3, [pc, #392]	; (80074a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800731c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007320:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800732c:	d112      	bne.n	8007354 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
 800732e:	4b5e      	ldr	r3, [pc, #376]	; (80074a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8007330:	61fb      	str	r3, [r7, #28]
 8007332:	e00f      	b.n	8007354 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733a:	d10b      	bne.n	8007354 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
 800733c:	4b59      	ldr	r3, [pc, #356]	; (80074a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800733e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007342:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007346:	61bb      	str	r3, [r7, #24]
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800734e:	d101      	bne.n	8007354 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
 8007350:	4b55      	ldr	r3, [pc, #340]	; (80074a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 8007352:	61fb      	str	r3, [r7, #28]
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	2b00      	cmp	r3, #0
 8007358:	f040 809c 	bne.w	8007494 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	613b      	str	r3, [r7, #16]
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007366:	d003      	beq.n	8007370 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800736e:	d12d      	bne.n	80073cc <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
 8007370:	4b4c      	ldr	r3, [pc, #304]	; (80074a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 808b 	beq.w	8007494 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
 800737e:	4b49      	ldr	r3, [pc, #292]	; (80074a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	091b      	lsrs	r3, r3, #4
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	3301      	adds	r3, #1
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007390:	613b      	str	r3, [r7, #16]
 8007392:	4b44      	ldr	r3, [pc, #272]	; (80074a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	0a1b      	lsrs	r3, r3, #8
 8007398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800739c:	60fb      	str	r3, [r7, #12]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10a      	bne.n	80073ba <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
 80073a4:	4b3f      	ldr	r3, [pc, #252]	; (80074a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <RCCEx_GetSAIxPeriphCLKFreq+0xba>
 80073b0:	2311      	movs	r3, #17
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	e001      	b.n	80073ba <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
 80073b6:	2307      	movs	r3, #7
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	fb02 f203 	mul.w	r2, r2, r3
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c8:	61fb      	str	r3, [r7, #28]
 80073ca:	e063      	b.n	8007494 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d12c      	bne.n	800742c <RCCEx_GetSAIxPeriphCLKFreq+0x130>
 80073d2:	4b34      	ldr	r3, [pc, #208]	; (80074a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d05a      	beq.n	8007494 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
 80073de:	4b31      	ldr	r3, [pc, #196]	; (80074a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	091b      	lsrs	r3, r3, #4
 80073e4:	f003 0307 	and.w	r3, r3, #7
 80073e8:	3301      	adds	r3, #1
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f0:	613b      	str	r3, [r7, #16]
 80073f2:	4b2c      	ldr	r3, [pc, #176]	; (80074a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	0a1b      	lsrs	r3, r3, #8
 80073f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
 8007404:	4b27      	ldr	r3, [pc, #156]	; (80074a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <RCCEx_GetSAIxPeriphCLKFreq+0x11a>
 8007410:	2311      	movs	r3, #17
 8007412:	617b      	str	r3, [r7, #20]
 8007414:	e001      	b.n	800741a <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
 8007416:	2307      	movs	r3, #7
 8007418:	617b      	str	r3, [r7, #20]
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	fb02 f203 	mul.w	r2, r2, r3
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	fbb2 f3f3 	udiv	r3, r2, r3
 8007428:	61fb      	str	r3, [r7, #28]
 800742a:	e033      	b.n	8007494 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007432:	d003      	beq.n	800743c <RCCEx_GetSAIxPeriphCLKFreq+0x140>
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800743a:	d12b      	bne.n	8007494 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
 800743c:	4b19      	ldr	r3, [pc, #100]	; (80074a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d025      	beq.n	8007494 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
 8007448:	4b16      	ldr	r3, [pc, #88]	; (80074a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	091b      	lsrs	r3, r3, #4
 800744e:	f003 0307 	and.w	r3, r3, #7
 8007452:	3301      	adds	r3, #1
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	fbb2 f3f3 	udiv	r3, r2, r3
 800745a:	613b      	str	r3, [r7, #16]
 800745c:	4b11      	ldr	r3, [pc, #68]	; (80074a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	0a1b      	lsrs	r3, r3, #8
 8007462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10a      	bne.n	8007484 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
 800746e:	4b0d      	ldr	r3, [pc, #52]	; (80074a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <RCCEx_GetSAIxPeriphCLKFreq+0x184>
 800747a:	2311      	movs	r3, #17
 800747c:	617b      	str	r3, [r7, #20]
 800747e:	e001      	b.n	8007484 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
 8007480:	2307      	movs	r3, #7
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	fb02 f203 	mul.w	r2, r2, r3
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007492:	61fb      	str	r3, [r7, #28]
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	4618      	mov	r0, r3
 8007498:	3724      	adds	r7, #36	; 0x24
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	40021000 	.word	0x40021000
 80074a8:	001fff68 	.word	0x001fff68

080074ac <HAL_RTC_Init>:
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d06f      	beq.n	800759e <HAL_RTC_Init+0xf2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d106      	bne.n	80074d8 <HAL_RTC_Init+0x2c>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2020 	strb.w	r2, [r3, #32]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7fa fb0a 	bl	8001aec <HAL_RTC_MspInit>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	22ca      	movs	r2, #202	; 0xca
 80074e6:	625a      	str	r2, [r3, #36]	; 0x24
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2253      	movs	r2, #83	; 0x53
 80074ee:	625a      	str	r2, [r3, #36]	; 0x24
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fa4c 	bl	800798e <RTC_EnterInitMode>
 80074f6:	4603      	mov	r3, r0
 80074f8:	73fb      	strb	r3, [r7, #15]
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d14e      	bne.n	800759e <HAL_RTC_Init+0xf2>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	6812      	ldr	r2, [r2, #0]
 800750a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800750e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007512:	6093      	str	r3, [r2, #8]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6899      	ldr	r1, [r3, #8]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	431a      	orrs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	609a      	str	r2, [r3, #8]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	68d2      	ldr	r2, [r2, #12]
 800753a:	611a      	str	r2, [r3, #16]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6919      	ldr	r1, [r3, #16]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	041a      	lsls	r2, r3, #16
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	611a      	str	r2, [r3, #16]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fa4f 	bl	80079f4 <RTC_ExitInitMode>
 8007556:	4603      	mov	r3, r0
 8007558:	73fb      	strb	r3, [r7, #15]
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d11e      	bne.n	800759e <HAL_RTC_Init+0xf2>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f022 0203 	bic.w	r2, r2, #3
 800756e:	64da      	str	r2, [r3, #76]	; 0x4c
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	69da      	ldr	r2, [r3, #28]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	431a      	orrs	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	430a      	orrs	r2, r1
 8007586:	64da      	str	r2, [r3, #76]	; 0x4c
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	22ff      	movs	r2, #255	; 0xff
 800758e:	625a      	str	r2, [r3, #36]	; 0x24
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d103      	bne.n	800759e <HAL_RTC_Init+0xf2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800759e:	7bfb      	ldrb	r3, [r7, #15]
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <HAL_RTC_SetTime>:
 80075a8:	b590      	push	{r4, r7, lr}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <HAL_RTC_SetTime+0x1a>
 80075be:	2302      	movs	r3, #2
 80075c0:	e08b      	b.n	80076da <HAL_RTC_SetTime+0x132>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 2020 	strb.w	r2, [r3, #32]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2202      	movs	r2, #2
 80075ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	22ca      	movs	r2, #202	; 0xca
 80075d8:	625a      	str	r2, [r3, #36]	; 0x24
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2253      	movs	r2, #83	; 0x53
 80075e0:	625a      	str	r2, [r3, #36]	; 0x24
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 f9d3 	bl	800798e <RTC_EnterInitMode>
 80075e8:	4603      	mov	r3, r0
 80075ea:	74fb      	strb	r3, [r7, #19]
 80075ec:	7cfb      	ldrb	r3, [r7, #19]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d163      	bne.n	80076ba <HAL_RTC_SetTime+0x112>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d126      	bne.n	8007646 <HAL_RTC_SetTime+0x9e>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007602:	2b00      	cmp	r3, #0
 8007604:	d102      	bne.n	800760c <HAL_RTC_SetTime+0x64>
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2200      	movs	r2, #0
 800760a:	70da      	strb	r2, [r3, #3]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	4618      	mov	r0, r3
 8007612:	f000 fa2d 	bl	8007a70 <RTC_ByteToBcd2>
 8007616:	4603      	mov	r3, r0
 8007618:	041c      	lsls	r4, r3, #16
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	785b      	ldrb	r3, [r3, #1]
 800761e:	4618      	mov	r0, r3
 8007620:	f000 fa26 	bl	8007a70 <RTC_ByteToBcd2>
 8007624:	4603      	mov	r3, r0
 8007626:	021b      	lsls	r3, r3, #8
 8007628:	431c      	orrs	r4, r3
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	789b      	ldrb	r3, [r3, #2]
 800762e:	4618      	mov	r0, r3
 8007630:	f000 fa1e 	bl	8007a70 <RTC_ByteToBcd2>
 8007634:	4603      	mov	r3, r0
 8007636:	ea44 0203 	orr.w	r2, r4, r3
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	78db      	ldrb	r3, [r3, #3]
 800763e:	059b      	lsls	r3, r3, #22
 8007640:	4313      	orrs	r3, r2
 8007642:	617b      	str	r3, [r7, #20]
 8007644:	e018      	b.n	8007678 <HAL_RTC_SetTime+0xd0>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007650:	2b00      	cmp	r3, #0
 8007652:	d102      	bne.n	800765a <HAL_RTC_SetTime+0xb2>
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2200      	movs	r2, #0
 8007658:	70da      	strb	r2, [r3, #3]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	041a      	lsls	r2, r3, #16
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	785b      	ldrb	r3, [r3, #1]
 8007664:	021b      	lsls	r3, r3, #8
 8007666:	4313      	orrs	r3, r2
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	7892      	ldrb	r2, [r2, #2]
 800766c:	431a      	orrs	r2, r3
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	78db      	ldrb	r3, [r3, #3]
 8007672:	059b      	lsls	r3, r3, #22
 8007674:	4313      	orrs	r3, r2
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007682:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689a      	ldr	r2, [r3, #8]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007696:	609a      	str	r2, [r3, #8]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6899      	ldr	r1, [r3, #8]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	68da      	ldr	r2, [r3, #12]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	609a      	str	r2, [r3, #8]
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 f99f 	bl	80079f4 <RTC_ExitInitMode>
 80076b6:	4603      	mov	r3, r0
 80076b8:	74fb      	strb	r3, [r7, #19]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	22ff      	movs	r2, #255	; 0xff
 80076c0:	625a      	str	r2, [r3, #36]	; 0x24
 80076c2:	7cfb      	ldrb	r3, [r7, #19]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d103      	bne.n	80076d0 <HAL_RTC_SetTime+0x128>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2020 	strb.w	r2, [r3, #32]
 80076d8:	7cfb      	ldrb	r3, [r7, #19]
 80076da:	4618      	mov	r0, r3
 80076dc:	371c      	adds	r7, #28
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd90      	pop	{r4, r7, pc}

080076e2 <HAL_RTC_GetTime>:
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b086      	sub	sp, #24
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	607a      	str	r2, [r7, #4]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	605a      	str	r2, [r3, #4]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	609a      	str	r2, [r3, #8]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007710:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007714:	617b      	str	r3, [r7, #20]
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	0c1b      	lsrs	r3, r3, #16
 800771a:	b2db      	uxtb	r3, r3
 800771c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007720:	b2da      	uxtb	r2, r3
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	0a1b      	lsrs	r3, r3, #8
 800772a:	b2db      	uxtb	r3, r3
 800772c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007730:	b2da      	uxtb	r2, r3
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	705a      	strb	r2, [r3, #1]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	b2db      	uxtb	r3, r3
 800773a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800773e:	b2da      	uxtb	r2, r3
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	709a      	strb	r2, [r3, #2]
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	0d9b      	lsrs	r3, r3, #22
 8007748:	b2db      	uxtb	r3, r3
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	b2da      	uxtb	r2, r3
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	70da      	strb	r2, [r3, #3]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d11a      	bne.n	8007790 <HAL_RTC_GetTime+0xae>
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	4618      	mov	r0, r3
 8007760:	f000 f9a6 	bl	8007ab0 <RTC_Bcd2ToByte>
 8007764:	4603      	mov	r3, r0
 8007766:	461a      	mov	r2, r3
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	701a      	strb	r2, [r3, #0]
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	785b      	ldrb	r3, [r3, #1]
 8007770:	4618      	mov	r0, r3
 8007772:	f000 f99d 	bl	8007ab0 <RTC_Bcd2ToByte>
 8007776:	4603      	mov	r3, r0
 8007778:	461a      	mov	r2, r3
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	705a      	strb	r2, [r3, #1]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	789b      	ldrb	r3, [r3, #2]
 8007782:	4618      	mov	r0, r3
 8007784:	f000 f994 	bl	8007ab0 <RTC_Bcd2ToByte>
 8007788:	4603      	mov	r3, r0
 800778a:	461a      	mov	r2, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	709a      	strb	r2, [r3, #2]
 8007790:	2300      	movs	r3, #0
 8007792:	4618      	mov	r0, r3
 8007794:	3718      	adds	r7, #24
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <HAL_RTC_SetDate>:
 800779a:	b590      	push	{r4, r7, lr}
 800779c:	b087      	sub	sp, #28
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	607a      	str	r2, [r7, #4]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d101      	bne.n	80077b4 <HAL_RTC_SetDate+0x1a>
 80077b0:	2302      	movs	r3, #2
 80077b2:	e075      	b.n	80078a0 <HAL_RTC_SetDate+0x106>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2020 	strb.w	r2, [r3, #32]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2202      	movs	r2, #2
 80077c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10e      	bne.n	80077e8 <HAL_RTC_SetDate+0x4e>
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	785b      	ldrb	r3, [r3, #1]
 80077ce:	f003 0310 	and.w	r3, r3, #16
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d008      	beq.n	80077e8 <HAL_RTC_SetDate+0x4e>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	785b      	ldrb	r3, [r3, #1]
 80077da:	f023 0310 	bic.w	r3, r3, #16
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	330a      	adds	r3, #10
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	705a      	strb	r2, [r3, #1]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d11c      	bne.n	8007828 <HAL_RTC_SetDate+0x8e>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	78db      	ldrb	r3, [r3, #3]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 f93c 	bl	8007a70 <RTC_ByteToBcd2>
 80077f8:	4603      	mov	r3, r0
 80077fa:	041c      	lsls	r4, r3, #16
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	785b      	ldrb	r3, [r3, #1]
 8007800:	4618      	mov	r0, r3
 8007802:	f000 f935 	bl	8007a70 <RTC_ByteToBcd2>
 8007806:	4603      	mov	r3, r0
 8007808:	021b      	lsls	r3, r3, #8
 800780a:	431c      	orrs	r4, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	789b      	ldrb	r3, [r3, #2]
 8007810:	4618      	mov	r0, r3
 8007812:	f000 f92d 	bl	8007a70 <RTC_ByteToBcd2>
 8007816:	4603      	mov	r3, r0
 8007818:	ea44 0203 	orr.w	r2, r4, r3
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	035b      	lsls	r3, r3, #13
 8007822:	4313      	orrs	r3, r2
 8007824:	617b      	str	r3, [r7, #20]
 8007826:	e00e      	b.n	8007846 <HAL_RTC_SetDate+0xac>
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	78db      	ldrb	r3, [r3, #3]
 800782c:	041a      	lsls	r2, r3, #16
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	021b      	lsls	r3, r3, #8
 8007834:	4313      	orrs	r3, r2
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	7892      	ldrb	r2, [r2, #2]
 800783a:	431a      	orrs	r2, r3
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	035b      	lsls	r3, r3, #13
 8007842:	4313      	orrs	r3, r2
 8007844:	617b      	str	r3, [r7, #20]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	22ca      	movs	r2, #202	; 0xca
 800784c:	625a      	str	r2, [r3, #36]	; 0x24
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2253      	movs	r2, #83	; 0x53
 8007854:	625a      	str	r2, [r3, #36]	; 0x24
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 f899 	bl	800798e <RTC_EnterInitMode>
 800785c:	4603      	mov	r3, r0
 800785e:	74fb      	strb	r3, [r7, #19]
 8007860:	7cfb      	ldrb	r3, [r7, #19]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10c      	bne.n	8007880 <HAL_RTC_SetDate+0xe6>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007870:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007874:	6053      	str	r3, [r2, #4]
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 f8bc 	bl	80079f4 <RTC_ExitInitMode>
 800787c:	4603      	mov	r3, r0
 800787e:	74fb      	strb	r3, [r7, #19]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	22ff      	movs	r2, #255	; 0xff
 8007886:	625a      	str	r2, [r3, #36]	; 0x24
 8007888:	7cfb      	ldrb	r3, [r7, #19]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d103      	bne.n	8007896 <HAL_RTC_SetDate+0xfc>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2020 	strb.w	r2, [r3, #32]
 800789e:	7cfb      	ldrb	r3, [r7, #19]
 80078a0:	4618      	mov	r0, r3
 80078a2:	371c      	adds	r7, #28
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd90      	pop	{r4, r7, pc}

080078a8 <HAL_RTC_GetDate>:
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80078be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80078c2:	617b      	str	r3, [r7, #20]
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	0c1b      	lsrs	r3, r3, #16
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	70da      	strb	r2, [r3, #3]
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	0a1b      	lsrs	r3, r3, #8
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	f003 031f 	and.w	r3, r3, #31
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	705a      	strb	r2, [r3, #1]
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	709a      	strb	r2, [r3, #2]
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	0b5b      	lsrs	r3, r3, #13
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	701a      	strb	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d11a      	bne.n	8007938 <HAL_RTC_GetDate+0x90>
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	78db      	ldrb	r3, [r3, #3]
 8007906:	4618      	mov	r0, r3
 8007908:	f000 f8d2 	bl	8007ab0 <RTC_Bcd2ToByte>
 800790c:	4603      	mov	r3, r0
 800790e:	461a      	mov	r2, r3
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	70da      	strb	r2, [r3, #3]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	785b      	ldrb	r3, [r3, #1]
 8007918:	4618      	mov	r0, r3
 800791a:	f000 f8c9 	bl	8007ab0 <RTC_Bcd2ToByte>
 800791e:	4603      	mov	r3, r0
 8007920:	461a      	mov	r2, r3
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	705a      	strb	r2, [r3, #1]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	789b      	ldrb	r3, [r3, #2]
 800792a:	4618      	mov	r0, r3
 800792c:	f000 f8c0 	bl	8007ab0 <RTC_Bcd2ToByte>
 8007930:	4603      	mov	r3, r0
 8007932:	461a      	mov	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	709a      	strb	r2, [r3, #2]
 8007938:	2300      	movs	r3, #0
 800793a:	4618      	mov	r0, r3
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <HAL_RTC_WaitForSynchro>:
 8007942:	b580      	push	{r7, lr}
 8007944:	b084      	sub	sp, #16
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68da      	ldr	r2, [r3, #12]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007958:	60da      	str	r2, [r3, #12]
 800795a:	f7fa ffd3 	bl	8002904 <HAL_GetTick>
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	e009      	b.n	8007976 <HAL_RTC_WaitForSynchro+0x34>
 8007962:	f7fa ffcf 	bl	8002904 <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007970:	d901      	bls.n	8007976 <HAL_RTC_WaitForSynchro+0x34>
 8007972:	2303      	movs	r3, #3
 8007974:	e007      	b.n	8007986 <HAL_RTC_WaitForSynchro+0x44>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f003 0320 	and.w	r3, r3, #32
 8007980:	2b00      	cmp	r3, #0
 8007982:	d0ee      	beq.n	8007962 <HAL_RTC_WaitForSynchro+0x20>
 8007984:	2300      	movs	r3, #0
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <RTC_EnterInitMode>:
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	2300      	movs	r3, #0
 8007998:	73fb      	strb	r3, [r7, #15]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d120      	bne.n	80079ea <RTC_EnterInitMode+0x5c>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f04f 32ff 	mov.w	r2, #4294967295
 80079b0:	60da      	str	r2, [r3, #12]
 80079b2:	f7fa ffa7 	bl	8002904 <HAL_GetTick>
 80079b6:	60b8      	str	r0, [r7, #8]
 80079b8:	e00d      	b.n	80079d6 <RTC_EnterInitMode+0x48>
 80079ba:	f7fa ffa3 	bl	8002904 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079c8:	d905      	bls.n	80079d6 <RTC_EnterInitMode+0x48>
 80079ca:	2303      	movs	r3, #3
 80079cc:	73fb      	strb	r3, [r7, #15]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2203      	movs	r2, #3
 80079d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d102      	bne.n	80079ea <RTC_EnterInitMode+0x5c>
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d1e7      	bne.n	80079ba <RTC_EnterInitMode+0x2c>
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <RTC_ExitInitMode>:
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	2300      	movs	r3, #0
 80079fe:	73fb      	strb	r3, [r7, #15]
 8007a00:	4b1a      	ldr	r3, [pc, #104]	; (8007a6c <RTC_ExitInitMode+0x78>)
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	4a19      	ldr	r2, [pc, #100]	; (8007a6c <RTC_ExitInitMode+0x78>)
 8007a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a0a:	60d3      	str	r3, [r2, #12]
 8007a0c:	4b17      	ldr	r3, [pc, #92]	; (8007a6c <RTC_ExitInitMode+0x78>)
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f003 0320 	and.w	r3, r3, #32
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10c      	bne.n	8007a32 <RTC_ExitInitMode+0x3e>
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7ff ff92 	bl	8007942 <HAL_RTC_WaitForSynchro>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d01e      	beq.n	8007a62 <RTC_ExitInitMode+0x6e>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2203      	movs	r2, #3
 8007a28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	73fb      	strb	r3, [r7, #15]
 8007a30:	e017      	b.n	8007a62 <RTC_ExitInitMode+0x6e>
 8007a32:	4b0e      	ldr	r3, [pc, #56]	; (8007a6c <RTC_ExitInitMode+0x78>)
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	4a0d      	ldr	r2, [pc, #52]	; (8007a6c <RTC_ExitInitMode+0x78>)
 8007a38:	f023 0320 	bic.w	r3, r3, #32
 8007a3c:	6093      	str	r3, [r2, #8]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff ff7f 	bl	8007942 <HAL_RTC_WaitForSynchro>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d005      	beq.n	8007a56 <RTC_ExitInitMode+0x62>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2203      	movs	r2, #3
 8007a4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8007a52:	2303      	movs	r3, #3
 8007a54:	73fb      	strb	r3, [r7, #15]
 8007a56:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <RTC_ExitInitMode+0x78>)
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	4a04      	ldr	r2, [pc, #16]	; (8007a6c <RTC_ExitInitMode+0x78>)
 8007a5c:	f043 0320 	orr.w	r3, r3, #32
 8007a60:	6093      	str	r3, [r2, #8]
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	40002800 	.word	0x40002800

08007a70 <RTC_ByteToBcd2>:
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4603      	mov	r3, r0
 8007a78:	71fb      	strb	r3, [r7, #7]
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	72fb      	strb	r3, [r7, #11]
 8007a82:	e005      	b.n	8007a90 <RTC_ByteToBcd2+0x20>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	3301      	adds	r3, #1
 8007a88:	60fb      	str	r3, [r7, #12]
 8007a8a:	7afb      	ldrb	r3, [r7, #11]
 8007a8c:	3b0a      	subs	r3, #10
 8007a8e:	72fb      	strb	r3, [r7, #11]
 8007a90:	7afb      	ldrb	r3, [r7, #11]
 8007a92:	2b09      	cmp	r3, #9
 8007a94:	d8f6      	bhi.n	8007a84 <RTC_ByteToBcd2+0x14>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	011b      	lsls	r3, r3, #4
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	7afb      	ldrb	r3, [r7, #11]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <RTC_Bcd2ToByte>:
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	71fb      	strb	r3, [r7, #7]
 8007aba:	79fb      	ldrb	r3, [r7, #7]
 8007abc:	091b      	lsrs	r3, r3, #4
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	0092      	lsls	r2, r2, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	73fb      	strb	r3, [r7, #15]
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	f003 030f 	and.w	r3, r3, #15
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_SAI_Init>:
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <HAL_SAI_Init+0x12>
 8007af2:	2301      	movs	r3, #1
 8007af4:	e14a      	b.n	8007d8c <HAL_SAI_Init+0x2a8>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d106      	bne.n	8007b10 <HAL_SAI_Init+0x2c>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fa f8b2 	bl	8001c74 <HAL_SAI_MspInit>
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f94d 	bl	8007db0 <SAI_Disable>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <HAL_SAI_Init+0x3c>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e135      	b.n	8007d8c <HAL_SAI_Init+0x2a8>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d007      	beq.n	8007b40 <HAL_SAI_Init+0x5c>
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d302      	bcc.n	8007b3a <HAL_SAI_Init+0x56>
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d006      	beq.n	8007b46 <HAL_SAI_Init+0x62>
 8007b38:	e008      	b.n	8007b4c <HAL_SAI_Init+0x68>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61fb      	str	r3, [r7, #28]
 8007b3e:	e008      	b.n	8007b52 <HAL_SAI_Init+0x6e>
 8007b40:	2310      	movs	r3, #16
 8007b42:	61fb      	str	r3, [r7, #28]
 8007b44:	e005      	b.n	8007b52 <HAL_SAI_Init+0x6e>
 8007b46:	2320      	movs	r3, #32
 8007b48:	61fb      	str	r3, [r7, #28]
 8007b4a:	e002      	b.n	8007b52 <HAL_SAI_Init+0x6e>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	61fb      	str	r3, [r7, #28]
 8007b50:	bf00      	nop
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	d81d      	bhi.n	8007b96 <HAL_SAI_Init+0xb2>
 8007b5a:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <HAL_SAI_Init+0x7c>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007b71 	.word	0x08007b71
 8007b64:	08007b77 	.word	0x08007b77
 8007b68:	08007b7f 	.word	0x08007b7f
 8007b6c:	08007b87 	.word	0x08007b87
 8007b70:	2300      	movs	r3, #0
 8007b72:	617b      	str	r3, [r7, #20]
 8007b74:	e012      	b.n	8007b9c <HAL_SAI_Init+0xb8>
 8007b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	e00e      	b.n	8007b9c <HAL_SAI_Init+0xb8>
 8007b7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b82:	617b      	str	r3, [r7, #20]
 8007b84:	e00a      	b.n	8007b9c <HAL_SAI_Init+0xb8>
 8007b86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	f043 0301 	orr.w	r3, r3, #1
 8007b92:	61fb      	str	r3, [r7, #28]
 8007b94:	e002      	b.n	8007b9c <HAL_SAI_Init+0xb8>
 8007b96:	2300      	movs	r3, #0
 8007b98:	617b      	str	r3, [r7, #20]
 8007b9a:	bf00      	nop
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a7c      	ldr	r2, [pc, #496]	; (8007d94 <HAL_SAI_Init+0x2b0>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d004      	beq.n	8007bb0 <HAL_SAI_Init+0xcc>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a7b      	ldr	r2, [pc, #492]	; (8007d98 <HAL_SAI_Init+0x2b4>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d103      	bne.n	8007bb8 <HAL_SAI_Init+0xd4>
 8007bb0:	4a7a      	ldr	r2, [pc, #488]	; (8007d9c <HAL_SAI_Init+0x2b8>)
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	6013      	str	r3, [r2, #0]
 8007bb6:	e002      	b.n	8007bbe <HAL_SAI_Init+0xda>
 8007bb8:	4a79      	ldr	r2, [pc, #484]	; (8007da0 <HAL_SAI_Init+0x2bc>)
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	6013      	str	r3, [r2, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d038      	beq.n	8007c38 <HAL_SAI_Init+0x154>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a72      	ldr	r2, [pc, #456]	; (8007d94 <HAL_SAI_Init+0x2b0>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d004      	beq.n	8007bda <HAL_SAI_Init+0xf6>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a70      	ldr	r2, [pc, #448]	; (8007d98 <HAL_SAI_Init+0x2b4>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d105      	bne.n	8007be6 <HAL_SAI_Init+0x102>
 8007bda:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007bde:	f7fe fd3b 	bl	8006658 <HAL_RCCEx_GetPeriphCLKFreq>
 8007be2:	6138      	str	r0, [r7, #16]
 8007be4:	e004      	b.n	8007bf0 <HAL_SAI_Init+0x10c>
 8007be6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007bea:	f7fe fd35 	bl	8006658 <HAL_RCCEx_GetPeriphCLKFreq>
 8007bee:	6138      	str	r0, [r7, #16]
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	005b      	lsls	r3, r3, #1
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	025b      	lsls	r3, r3, #9
 8007c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	4a66      	ldr	r2, [pc, #408]	; (8007da4 <HAL_SAI_Init+0x2c0>)
 8007c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c10:	08da      	lsrs	r2, r3, #3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	621a      	str	r2, [r3, #32]
 8007c16:	68f9      	ldr	r1, [r7, #12]
 8007c18:	4b62      	ldr	r3, [pc, #392]	; (8007da4 <HAL_SAI_Init+0x2c0>)
 8007c1a:	fba3 2301 	umull	r2, r3, r3, r1
 8007c1e:	08da      	lsrs	r2, r3, #3
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	1aca      	subs	r2, r1, r3
 8007c2a:	2a08      	cmp	r2, #8
 8007c2c:	d904      	bls.n	8007c38 <HAL_SAI_Init+0x154>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	1c5a      	adds	r2, r3, #1
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	621a      	str	r2, [r3, #32]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <HAL_SAI_Init+0x164>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d109      	bne.n	8007c5c <HAL_SAI_Init+0x178>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d101      	bne.n	8007c54 <HAL_SAI_Init+0x170>
 8007c50:	2300      	movs	r3, #0
 8007c52:	e001      	b.n	8007c58 <HAL_SAI_Init+0x174>
 8007c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c58:	61bb      	str	r3, [r7, #24]
 8007c5a:	e008      	b.n	8007c6e <HAL_SAI_Init+0x18a>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d102      	bne.n	8007c6a <HAL_SAI_Init+0x186>
 8007c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c68:	e000      	b.n	8007c6c <HAL_SAI_Init+0x188>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	61bb      	str	r3, [r7, #24]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6819      	ldr	r1, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	4b4b      	ldr	r3, [pc, #300]	; (8007da8 <HAL_SAI_Init+0x2c4>)
 8007c7a:	400b      	ands	r3, r1
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6819      	ldr	r1, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c92:	431a      	orrs	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	431a      	orrs	r2, r3
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	431a      	orrs	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	051b      	lsls	r3, r3, #20
 8007cba:	431a      	orrs	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6812      	ldr	r2, [r2, #0]
 8007cce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007cd2:	f023 030f 	bic.w	r3, r3, #15
 8007cd6:	6053      	str	r3, [r2, #4]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6859      	ldr	r1, [r3, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699a      	ldr	r2, [r3, #24]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	431a      	orrs	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	605a      	str	r2, [r3, #4]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6899      	ldr	r1, [r3, #8]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	4b2a      	ldr	r3, [pc, #168]	; (8007dac <HAL_SAI_Init+0x2c8>)
 8007d02:	400b      	ands	r3, r1
 8007d04:	6093      	str	r3, [r2, #8]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6899      	ldr	r1, [r3, #8]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d10:	1e5a      	subs	r2, r3, #1
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d22:	431a      	orrs	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	021b      	lsls	r3, r3, #8
 8007d2c:	431a      	orrs	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	609a      	str	r2, [r3, #8]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68d9      	ldr	r1, [r3, #12]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007d44:	400b      	ands	r3, r1
 8007d46:	60d3      	str	r3, [r2, #12]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68d9      	ldr	r1, [r3, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d56:	431a      	orrs	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d5c:	041b      	lsls	r3, r3, #16
 8007d5e:	431a      	orrs	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d64:	3b01      	subs	r3, #1
 8007d66:	021b      	lsls	r3, r3, #8
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	60da      	str	r2, [r3, #12]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3720      	adds	r7, #32
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	40015404 	.word	0x40015404
 8007d98:	40015424 	.word	0x40015424
 8007d9c:	40015400 	.word	0x40015400
 8007da0:	40015800 	.word	0x40015800
 8007da4:	cccccccd 	.word	0xcccccccd
 8007da8:	ff05c010 	.word	0xff05c010
 8007dac:	fff88000 	.word	0xfff88000

08007db0 <SAI_Disable>:
 8007db0:	b490      	push	{r4, r7}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	4b15      	ldr	r3, [pc, #84]	; (8007e10 <SAI_Disable+0x60>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a15      	ldr	r2, [pc, #84]	; (8007e14 <SAI_Disable+0x64>)
 8007dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc2:	0b1b      	lsrs	r3, r3, #12
 8007dc4:	009c      	lsls	r4, r3, #2
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	73fb      	strb	r3, [r7, #15]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	2c00      	cmp	r4, #0
 8007ddc:	d10a      	bne.n	8007df4 <SAI_Disable+0x44>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007de4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007dee:	2303      	movs	r3, #3
 8007df0:	73fb      	strb	r3, [r7, #15]
 8007df2:	e007      	b.n	8007e04 <SAI_Disable+0x54>
 8007df4:	3c01      	subs	r4, #1
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1ea      	bne.n	8007dda <SAI_Disable+0x2a>
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bc90      	pop	{r4, r7}
 8007e0e:	4770      	bx	lr
 8007e10:	20000020 	.word	0x20000020
 8007e14:	95cbec1b 	.word	0x95cbec1b

08007e18 <HAL_SPI_Init>:
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_SPI_Init+0x12>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e07c      	b.n	8007f24 <HAL_SPI_Init+0x10c>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	629a      	str	r2, [r3, #40]	; 0x28
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d106      	bne.n	8007e4a <HAL_SPI_Init+0x32>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7f9 ffcb 	bl	8001de0 <HAL_SPI_MspInit>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e60:	601a      	str	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e6a:	d902      	bls.n	8007e72 <HAL_SPI_Init+0x5a>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	e002      	b.n	8007e78 <HAL_SPI_Init+0x60>
 8007e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007e80:	d007      	beq.n	8007e92 <HAL_SPI_Init+0x7a>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e8a:	d002      	beq.n	8007e92 <HAL_SPI_Init+0x7a>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	629a      	str	r2, [r3, #40]	; 0x28
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10b      	bne.n	8007eb2 <HAL_SPI_Init+0x9a>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ea2:	d903      	bls.n	8007eac <HAL_SPI_Init+0x94>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	631a      	str	r2, [r3, #48]	; 0x30
 8007eaa:	e002      	b.n	8007eb2 <HAL_SPI_Init+0x9a>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	631a      	str	r2, [r3, #48]	; 0x30
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	431a      	orrs	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ed0:	431a      	orrs	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	ea42 0103 	orr.w	r1, r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	0c1b      	lsrs	r3, r3, #16
 8007ef2:	f003 0204 	and.w	r2, r3, #4
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efa:	431a      	orrs	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f00:	431a      	orrs	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	ea42 0103 	orr.w	r1, r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	605a      	str	r2, [r3, #4]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	661a      	str	r2, [r3, #96]	; 0x60
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8007f22:	2300      	movs	r3, #0
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <HAL_UART_Init>:
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_UART_Init+0x12>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e040      	b.n	8007fc0 <HAL_UART_Init+0x94>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d106      	bne.n	8007f54 <HAL_UART_Init+0x28>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7fa fc00 	bl	8002754 <HAL_UART_MspInit>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2224      	movs	r2, #36	; 0x24
 8007f58:	675a      	str	r2, [r3, #116]	; 0x74
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 0201 	bic.w	r2, r2, #1
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f98c 	bl	8008288 <UART_SetConfig>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <HAL_UART_Init+0x4e>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e022      	b.n	8007fc0 <HAL_UART_Init+0x94>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <HAL_UART_Init+0x5c>
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fcc8 	bl	8008918 <UART_AdvFeatureConfig>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f96:	605a      	str	r2, [r3, #4]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689a      	ldr	r2, [r3, #8]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fa6:	609a      	str	r2, [r3, #8]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0201 	orr.w	r2, r2, #1
 8007fb6:	601a      	str	r2, [r3, #0]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fd4f 	bl	8008a5c <UART_CheckIdleState>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <HAL_UART_Transmit>:
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08a      	sub	sp, #40	; 0x28
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	603b      	str	r3, [r7, #0]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	80fb      	strh	r3, [r7, #6]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fdc:	2b20      	cmp	r3, #32
 8007fde:	f040 8081 	bne.w	80080e4 <HAL_UART_Transmit+0x11c>
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <HAL_UART_Transmit+0x26>
 8007fe8:	88fb      	ldrh	r3, [r7, #6]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <HAL_UART_Transmit+0x2a>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e079      	b.n	80080e6 <HAL_UART_Transmit+0x11e>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d101      	bne.n	8008000 <HAL_UART_Transmit+0x38>
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	e072      	b.n	80080e6 <HAL_UART_Transmit+0x11e>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	67da      	str	r2, [r3, #124]	; 0x7c
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2221      	movs	r2, #33	; 0x21
 8008012:	675a      	str	r2, [r3, #116]	; 0x74
 8008014:	f7fa fc76 	bl	8002904 <HAL_GetTick>
 8008018:	6178      	str	r0, [r7, #20]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	88fa      	ldrh	r2, [r7, #6]
 800801e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	88fa      	ldrh	r2, [r7, #6]
 8008026:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008032:	d108      	bne.n	8008046 <HAL_UART_Transmit+0x7e>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d104      	bne.n	8008046 <HAL_UART_Transmit+0x7e>
 800803c:	2300      	movs	r3, #0
 800803e:	61fb      	str	r3, [r7, #28]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	61bb      	str	r3, [r7, #24]
 8008044:	e003      	b.n	800804e <HAL_UART_Transmit+0x86>
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	61fb      	str	r3, [r7, #28]
 800804a:	2300      	movs	r3, #0
 800804c:	61bb      	str	r3, [r7, #24]
 800804e:	e02d      	b.n	80080ac <HAL_UART_Transmit+0xe4>
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	2200      	movs	r2, #0
 8008058:	2180      	movs	r1, #128	; 0x80
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 fd43 	bl	8008ae6 <UART_WaitOnFlagUntilTimeout>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <HAL_UART_Transmit+0xa2>
 8008066:	2303      	movs	r3, #3
 8008068:	e03d      	b.n	80080e6 <HAL_UART_Transmit+0x11e>
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10b      	bne.n	8008088 <HAL_UART_Transmit+0xc0>
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	881a      	ldrh	r2, [r3, #0]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800807c:	b292      	uxth	r2, r2
 800807e:	851a      	strh	r2, [r3, #40]	; 0x28
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	3302      	adds	r3, #2
 8008084:	61bb      	str	r3, [r7, #24]
 8008086:	e008      	b.n	800809a <HAL_UART_Transmit+0xd2>
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	781a      	ldrb	r2, [r3, #0]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	b292      	uxth	r2, r2
 8008092:	851a      	strh	r2, [r3, #40]	; 0x28
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	3301      	adds	r3, #1
 8008098:	61fb      	str	r3, [r7, #28]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	3b01      	subs	r3, #1
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1cb      	bne.n	8008050 <HAL_UART_Transmit+0x88>
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	2200      	movs	r2, #0
 80080c0:	2140      	movs	r1, #64	; 0x40
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 fd0f 	bl	8008ae6 <UART_WaitOnFlagUntilTimeout>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <HAL_UART_Transmit+0x10a>
 80080ce:	2303      	movs	r3, #3
 80080d0:	e009      	b.n	80080e6 <HAL_UART_Transmit+0x11e>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2220      	movs	r2, #32
 80080d6:	675a      	str	r2, [r3, #116]	; 0x74
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80080e0:	2300      	movs	r3, #0
 80080e2:	e000      	b.n	80080e6 <HAL_UART_Transmit+0x11e>
 80080e4:	2302      	movs	r3, #2
 80080e6:	4618      	mov	r0, r3
 80080e8:	3720      	adds	r7, #32
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <HAL_UART_Receive>:
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b08a      	sub	sp, #40	; 0x28
 80080f2:	af02      	add	r7, sp, #8
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	60b9      	str	r1, [r7, #8]
 80080f8:	603b      	str	r3, [r7, #0]
 80080fa:	4613      	mov	r3, r2
 80080fc:	80fb      	strh	r3, [r7, #6]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008102:	2b20      	cmp	r3, #32
 8008104:	f040 80bb 	bne.w	800827e <HAL_UART_Receive+0x190>
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d002      	beq.n	8008114 <HAL_UART_Receive+0x26>
 800810e:	88fb      	ldrh	r3, [r7, #6]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <HAL_UART_Receive+0x2a>
 8008114:	2301      	movs	r3, #1
 8008116:	e0b3      	b.n	8008280 <HAL_UART_Receive+0x192>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800811e:	2b01      	cmp	r3, #1
 8008120:	d101      	bne.n	8008126 <HAL_UART_Receive+0x38>
 8008122:	2302      	movs	r3, #2
 8008124:	e0ac      	b.n	8008280 <HAL_UART_Receive+0x192>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	67da      	str	r2, [r3, #124]	; 0x7c
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2222      	movs	r2, #34	; 0x22
 8008138:	679a      	str	r2, [r3, #120]	; 0x78
 800813a:	f7fa fbe3 	bl	8002904 <HAL_GetTick>
 800813e:	6178      	str	r0, [r7, #20]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	88fa      	ldrh	r2, [r7, #6]
 8008144:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	88fa      	ldrh	r2, [r7, #6]
 800814c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008158:	d10e      	bne.n	8008178 <HAL_UART_Receive+0x8a>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d105      	bne.n	800816e <HAL_UART_Receive+0x80>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008168:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800816c:	e02d      	b.n	80081ca <HAL_UART_Receive+0xdc>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	22ff      	movs	r2, #255	; 0xff
 8008172:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008176:	e028      	b.n	80081ca <HAL_UART_Receive+0xdc>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10d      	bne.n	800819c <HAL_UART_Receive+0xae>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d104      	bne.n	8008192 <HAL_UART_Receive+0xa4>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	22ff      	movs	r2, #255	; 0xff
 800818c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008190:	e01b      	b.n	80081ca <HAL_UART_Receive+0xdc>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	227f      	movs	r2, #127	; 0x7f
 8008196:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800819a:	e016      	b.n	80081ca <HAL_UART_Receive+0xdc>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081a4:	d10d      	bne.n	80081c2 <HAL_UART_Receive+0xd4>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d104      	bne.n	80081b8 <HAL_UART_Receive+0xca>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	227f      	movs	r2, #127	; 0x7f
 80081b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081b6:	e008      	b.n	80081ca <HAL_UART_Receive+0xdc>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	223f      	movs	r2, #63	; 0x3f
 80081bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081c0:	e003      	b.n	80081ca <HAL_UART_Receive+0xdc>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081d0:	827b      	strh	r3, [r7, #18]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081da:	d108      	bne.n	80081ee <HAL_UART_Receive+0x100>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d104      	bne.n	80081ee <HAL_UART_Receive+0x100>
 80081e4:	2300      	movs	r3, #0
 80081e6:	61fb      	str	r3, [r7, #28]
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	61bb      	str	r3, [r7, #24]
 80081ec:	e003      	b.n	80081f6 <HAL_UART_Receive+0x108>
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	61fb      	str	r3, [r7, #28]
 80081f2:	2300      	movs	r3, #0
 80081f4:	61bb      	str	r3, [r7, #24]
 80081f6:	e033      	b.n	8008260 <HAL_UART_Receive+0x172>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	2200      	movs	r2, #0
 8008200:	2120      	movs	r1, #32
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 fc6f 	bl	8008ae6 <UART_WaitOnFlagUntilTimeout>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <HAL_UART_Receive+0x124>
 800820e:	2303      	movs	r3, #3
 8008210:	e036      	b.n	8008280 <HAL_UART_Receive+0x192>
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10c      	bne.n	8008232 <HAL_UART_Receive+0x144>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800821e:	b29a      	uxth	r2, r3
 8008220:	8a7b      	ldrh	r3, [r7, #18]
 8008222:	4013      	ands	r3, r2
 8008224:	b29a      	uxth	r2, r3
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	801a      	strh	r2, [r3, #0]
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	3302      	adds	r3, #2
 800822e:	61bb      	str	r3, [r7, #24]
 8008230:	e00d      	b.n	800824e <HAL_UART_Receive+0x160>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008238:	b29b      	uxth	r3, r3
 800823a:	b2da      	uxtb	r2, r3
 800823c:	8a7b      	ldrh	r3, [r7, #18]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	4013      	ands	r3, r2
 8008242:	b2da      	uxtb	r2, r3
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	701a      	strb	r2, [r3, #0]
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	3301      	adds	r3, #1
 800824c:	61fb      	str	r3, [r7, #28]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008254:	b29b      	uxth	r3, r3
 8008256:	3b01      	subs	r3, #1
 8008258:	b29a      	uxth	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008266:	b29b      	uxth	r3, r3
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1c5      	bne.n	80081f8 <HAL_UART_Receive+0x10a>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2220      	movs	r2, #32
 8008270:	679a      	str	r2, [r3, #120]	; 0x78
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800827a:	2300      	movs	r3, #0
 800827c:	e000      	b.n	8008280 <HAL_UART_Receive+0x192>
 800827e:	2302      	movs	r3, #2
 8008280:	4618      	mov	r0, r3
 8008282:	3720      	adds	r7, #32
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <UART_SetConfig>:
 8008288:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800828c:	b088      	sub	sp, #32
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	2300      	movs	r3, #0
 8008294:	617b      	str	r3, [r7, #20]
 8008296:	2300      	movs	r3, #0
 8008298:	74fb      	strb	r3, [r7, #19]
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	689a      	ldr	r2, [r3, #8]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	431a      	orrs	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	431a      	orrs	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	61fb      	str	r3, [r7, #28]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	4bac      	ldr	r3, [pc, #688]	; (8008570 <UART_SetConfig+0x2e8>)
 80082be:	4013      	ands	r3, r2
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	6812      	ldr	r2, [r2, #0]
 80082c4:	69f9      	ldr	r1, [r7, #28]
 80082c6:	430b      	orrs	r3, r1
 80082c8:	6013      	str	r3, [r2, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68da      	ldr	r2, [r3, #12]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	430a      	orrs	r2, r1
 80082de:	605a      	str	r2, [r3, #4]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	61fb      	str	r3, [r7, #28]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4aa2      	ldr	r2, [pc, #648]	; (8008574 <UART_SetConfig+0x2ec>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d004      	beq.n	80082fa <UART_SetConfig+0x72>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	69fa      	ldr	r2, [r7, #28]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	61fb      	str	r3, [r7, #28]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	69fa      	ldr	r2, [r7, #28]
 800830a:	430a      	orrs	r2, r1
 800830c:	609a      	str	r2, [r3, #8]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a99      	ldr	r2, [pc, #612]	; (8008578 <UART_SetConfig+0x2f0>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d121      	bne.n	800835c <UART_SetConfig+0xd4>
 8008318:	4b98      	ldr	r3, [pc, #608]	; (800857c <UART_SetConfig+0x2f4>)
 800831a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800831e:	f003 0303 	and.w	r3, r3, #3
 8008322:	2b03      	cmp	r3, #3
 8008324:	d816      	bhi.n	8008354 <UART_SetConfig+0xcc>
 8008326:	a201      	add	r2, pc, #4	; (adr r2, 800832c <UART_SetConfig+0xa4>)
 8008328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832c:	0800833d 	.word	0x0800833d
 8008330:	08008349 	.word	0x08008349
 8008334:	08008343 	.word	0x08008343
 8008338:	0800834f 	.word	0x0800834f
 800833c:	2301      	movs	r3, #1
 800833e:	76fb      	strb	r3, [r7, #27]
 8008340:	e0e8      	b.n	8008514 <UART_SetConfig+0x28c>
 8008342:	2302      	movs	r3, #2
 8008344:	76fb      	strb	r3, [r7, #27]
 8008346:	e0e5      	b.n	8008514 <UART_SetConfig+0x28c>
 8008348:	2304      	movs	r3, #4
 800834a:	76fb      	strb	r3, [r7, #27]
 800834c:	e0e2      	b.n	8008514 <UART_SetConfig+0x28c>
 800834e:	2308      	movs	r3, #8
 8008350:	76fb      	strb	r3, [r7, #27]
 8008352:	e0df      	b.n	8008514 <UART_SetConfig+0x28c>
 8008354:	2310      	movs	r3, #16
 8008356:	76fb      	strb	r3, [r7, #27]
 8008358:	bf00      	nop
 800835a:	e0db      	b.n	8008514 <UART_SetConfig+0x28c>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a87      	ldr	r2, [pc, #540]	; (8008580 <UART_SetConfig+0x2f8>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d134      	bne.n	80083d0 <UART_SetConfig+0x148>
 8008366:	4b85      	ldr	r3, [pc, #532]	; (800857c <UART_SetConfig+0x2f4>)
 8008368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800836c:	f003 030c 	and.w	r3, r3, #12
 8008370:	2b0c      	cmp	r3, #12
 8008372:	d829      	bhi.n	80083c8 <UART_SetConfig+0x140>
 8008374:	a201      	add	r2, pc, #4	; (adr r2, 800837c <UART_SetConfig+0xf4>)
 8008376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837a:	bf00      	nop
 800837c:	080083b1 	.word	0x080083b1
 8008380:	080083c9 	.word	0x080083c9
 8008384:	080083c9 	.word	0x080083c9
 8008388:	080083c9 	.word	0x080083c9
 800838c:	080083bd 	.word	0x080083bd
 8008390:	080083c9 	.word	0x080083c9
 8008394:	080083c9 	.word	0x080083c9
 8008398:	080083c9 	.word	0x080083c9
 800839c:	080083b7 	.word	0x080083b7
 80083a0:	080083c9 	.word	0x080083c9
 80083a4:	080083c9 	.word	0x080083c9
 80083a8:	080083c9 	.word	0x080083c9
 80083ac:	080083c3 	.word	0x080083c3
 80083b0:	2300      	movs	r3, #0
 80083b2:	76fb      	strb	r3, [r7, #27]
 80083b4:	e0ae      	b.n	8008514 <UART_SetConfig+0x28c>
 80083b6:	2302      	movs	r3, #2
 80083b8:	76fb      	strb	r3, [r7, #27]
 80083ba:	e0ab      	b.n	8008514 <UART_SetConfig+0x28c>
 80083bc:	2304      	movs	r3, #4
 80083be:	76fb      	strb	r3, [r7, #27]
 80083c0:	e0a8      	b.n	8008514 <UART_SetConfig+0x28c>
 80083c2:	2308      	movs	r3, #8
 80083c4:	76fb      	strb	r3, [r7, #27]
 80083c6:	e0a5      	b.n	8008514 <UART_SetConfig+0x28c>
 80083c8:	2310      	movs	r3, #16
 80083ca:	76fb      	strb	r3, [r7, #27]
 80083cc:	bf00      	nop
 80083ce:	e0a1      	b.n	8008514 <UART_SetConfig+0x28c>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a6b      	ldr	r2, [pc, #428]	; (8008584 <UART_SetConfig+0x2fc>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d120      	bne.n	800841c <UART_SetConfig+0x194>
 80083da:	4b68      	ldr	r3, [pc, #416]	; (800857c <UART_SetConfig+0x2f4>)
 80083dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80083e4:	2b10      	cmp	r3, #16
 80083e6:	d00f      	beq.n	8008408 <UART_SetConfig+0x180>
 80083e8:	2b10      	cmp	r3, #16
 80083ea:	d802      	bhi.n	80083f2 <UART_SetConfig+0x16a>
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d005      	beq.n	80083fc <UART_SetConfig+0x174>
 80083f0:	e010      	b.n	8008414 <UART_SetConfig+0x18c>
 80083f2:	2b20      	cmp	r3, #32
 80083f4:	d005      	beq.n	8008402 <UART_SetConfig+0x17a>
 80083f6:	2b30      	cmp	r3, #48	; 0x30
 80083f8:	d009      	beq.n	800840e <UART_SetConfig+0x186>
 80083fa:	e00b      	b.n	8008414 <UART_SetConfig+0x18c>
 80083fc:	2300      	movs	r3, #0
 80083fe:	76fb      	strb	r3, [r7, #27]
 8008400:	e088      	b.n	8008514 <UART_SetConfig+0x28c>
 8008402:	2302      	movs	r3, #2
 8008404:	76fb      	strb	r3, [r7, #27]
 8008406:	e085      	b.n	8008514 <UART_SetConfig+0x28c>
 8008408:	2304      	movs	r3, #4
 800840a:	76fb      	strb	r3, [r7, #27]
 800840c:	e082      	b.n	8008514 <UART_SetConfig+0x28c>
 800840e:	2308      	movs	r3, #8
 8008410:	76fb      	strb	r3, [r7, #27]
 8008412:	e07f      	b.n	8008514 <UART_SetConfig+0x28c>
 8008414:	2310      	movs	r3, #16
 8008416:	76fb      	strb	r3, [r7, #27]
 8008418:	bf00      	nop
 800841a:	e07b      	b.n	8008514 <UART_SetConfig+0x28c>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a59      	ldr	r2, [pc, #356]	; (8008588 <UART_SetConfig+0x300>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d120      	bne.n	8008468 <UART_SetConfig+0x1e0>
 8008426:	4b55      	ldr	r3, [pc, #340]	; (800857c <UART_SetConfig+0x2f4>)
 8008428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800842c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008430:	2b40      	cmp	r3, #64	; 0x40
 8008432:	d00f      	beq.n	8008454 <UART_SetConfig+0x1cc>
 8008434:	2b40      	cmp	r3, #64	; 0x40
 8008436:	d802      	bhi.n	800843e <UART_SetConfig+0x1b6>
 8008438:	2b00      	cmp	r3, #0
 800843a:	d005      	beq.n	8008448 <UART_SetConfig+0x1c0>
 800843c:	e010      	b.n	8008460 <UART_SetConfig+0x1d8>
 800843e:	2b80      	cmp	r3, #128	; 0x80
 8008440:	d005      	beq.n	800844e <UART_SetConfig+0x1c6>
 8008442:	2bc0      	cmp	r3, #192	; 0xc0
 8008444:	d009      	beq.n	800845a <UART_SetConfig+0x1d2>
 8008446:	e00b      	b.n	8008460 <UART_SetConfig+0x1d8>
 8008448:	2300      	movs	r3, #0
 800844a:	76fb      	strb	r3, [r7, #27]
 800844c:	e062      	b.n	8008514 <UART_SetConfig+0x28c>
 800844e:	2302      	movs	r3, #2
 8008450:	76fb      	strb	r3, [r7, #27]
 8008452:	e05f      	b.n	8008514 <UART_SetConfig+0x28c>
 8008454:	2304      	movs	r3, #4
 8008456:	76fb      	strb	r3, [r7, #27]
 8008458:	e05c      	b.n	8008514 <UART_SetConfig+0x28c>
 800845a:	2308      	movs	r3, #8
 800845c:	76fb      	strb	r3, [r7, #27]
 800845e:	e059      	b.n	8008514 <UART_SetConfig+0x28c>
 8008460:	2310      	movs	r3, #16
 8008462:	76fb      	strb	r3, [r7, #27]
 8008464:	bf00      	nop
 8008466:	e055      	b.n	8008514 <UART_SetConfig+0x28c>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a47      	ldr	r2, [pc, #284]	; (800858c <UART_SetConfig+0x304>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d124      	bne.n	80084bc <UART_SetConfig+0x234>
 8008472:	4b42      	ldr	r3, [pc, #264]	; (800857c <UART_SetConfig+0x2f4>)
 8008474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800847c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008480:	d012      	beq.n	80084a8 <UART_SetConfig+0x220>
 8008482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008486:	d802      	bhi.n	800848e <UART_SetConfig+0x206>
 8008488:	2b00      	cmp	r3, #0
 800848a:	d007      	beq.n	800849c <UART_SetConfig+0x214>
 800848c:	e012      	b.n	80084b4 <UART_SetConfig+0x22c>
 800848e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008492:	d006      	beq.n	80084a2 <UART_SetConfig+0x21a>
 8008494:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008498:	d009      	beq.n	80084ae <UART_SetConfig+0x226>
 800849a:	e00b      	b.n	80084b4 <UART_SetConfig+0x22c>
 800849c:	2300      	movs	r3, #0
 800849e:	76fb      	strb	r3, [r7, #27]
 80084a0:	e038      	b.n	8008514 <UART_SetConfig+0x28c>
 80084a2:	2302      	movs	r3, #2
 80084a4:	76fb      	strb	r3, [r7, #27]
 80084a6:	e035      	b.n	8008514 <UART_SetConfig+0x28c>
 80084a8:	2304      	movs	r3, #4
 80084aa:	76fb      	strb	r3, [r7, #27]
 80084ac:	e032      	b.n	8008514 <UART_SetConfig+0x28c>
 80084ae:	2308      	movs	r3, #8
 80084b0:	76fb      	strb	r3, [r7, #27]
 80084b2:	e02f      	b.n	8008514 <UART_SetConfig+0x28c>
 80084b4:	2310      	movs	r3, #16
 80084b6:	76fb      	strb	r3, [r7, #27]
 80084b8:	bf00      	nop
 80084ba:	e02b      	b.n	8008514 <UART_SetConfig+0x28c>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a2c      	ldr	r2, [pc, #176]	; (8008574 <UART_SetConfig+0x2ec>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d124      	bne.n	8008510 <UART_SetConfig+0x288>
 80084c6:	4b2d      	ldr	r3, [pc, #180]	; (800857c <UART_SetConfig+0x2f4>)
 80084c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80084d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d4:	d012      	beq.n	80084fc <UART_SetConfig+0x274>
 80084d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084da:	d802      	bhi.n	80084e2 <UART_SetConfig+0x25a>
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d007      	beq.n	80084f0 <UART_SetConfig+0x268>
 80084e0:	e012      	b.n	8008508 <UART_SetConfig+0x280>
 80084e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084e6:	d006      	beq.n	80084f6 <UART_SetConfig+0x26e>
 80084e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084ec:	d009      	beq.n	8008502 <UART_SetConfig+0x27a>
 80084ee:	e00b      	b.n	8008508 <UART_SetConfig+0x280>
 80084f0:	2300      	movs	r3, #0
 80084f2:	76fb      	strb	r3, [r7, #27]
 80084f4:	e00e      	b.n	8008514 <UART_SetConfig+0x28c>
 80084f6:	2302      	movs	r3, #2
 80084f8:	76fb      	strb	r3, [r7, #27]
 80084fa:	e00b      	b.n	8008514 <UART_SetConfig+0x28c>
 80084fc:	2304      	movs	r3, #4
 80084fe:	76fb      	strb	r3, [r7, #27]
 8008500:	e008      	b.n	8008514 <UART_SetConfig+0x28c>
 8008502:	2308      	movs	r3, #8
 8008504:	76fb      	strb	r3, [r7, #27]
 8008506:	e005      	b.n	8008514 <UART_SetConfig+0x28c>
 8008508:	2310      	movs	r3, #16
 800850a:	76fb      	strb	r3, [r7, #27]
 800850c:	bf00      	nop
 800850e:	e001      	b.n	8008514 <UART_SetConfig+0x28c>
 8008510:	2310      	movs	r3, #16
 8008512:	76fb      	strb	r3, [r7, #27]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a16      	ldr	r2, [pc, #88]	; (8008574 <UART_SetConfig+0x2ec>)
 800851a:	4293      	cmp	r3, r2
 800851c:	f040 80fa 	bne.w	8008714 <UART_SetConfig+0x48c>
 8008520:	7efb      	ldrb	r3, [r7, #27]
 8008522:	2b08      	cmp	r3, #8
 8008524:	d836      	bhi.n	8008594 <UART_SetConfig+0x30c>
 8008526:	a201      	add	r2, pc, #4	; (adr r2, 800852c <UART_SetConfig+0x2a4>)
 8008528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852c:	08008551 	.word	0x08008551
 8008530:	08008595 	.word	0x08008595
 8008534:	08008559 	.word	0x08008559
 8008538:	08008595 	.word	0x08008595
 800853c:	0800855f 	.word	0x0800855f
 8008540:	08008595 	.word	0x08008595
 8008544:	08008595 	.word	0x08008595
 8008548:	08008595 	.word	0x08008595
 800854c:	08008567 	.word	0x08008567
 8008550:	f7fd fd10 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	e020      	b.n	800859a <UART_SetConfig+0x312>
 8008558:	4b0d      	ldr	r3, [pc, #52]	; (8008590 <UART_SetConfig+0x308>)
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	e01d      	b.n	800859a <UART_SetConfig+0x312>
 800855e:	f7fd fc73 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	e019      	b.n	800859a <UART_SetConfig+0x312>
 8008566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	e015      	b.n	800859a <UART_SetConfig+0x312>
 800856e:	bf00      	nop
 8008570:	efff69f3 	.word	0xefff69f3
 8008574:	40008000 	.word	0x40008000
 8008578:	40013800 	.word	0x40013800
 800857c:	40021000 	.word	0x40021000
 8008580:	40004400 	.word	0x40004400
 8008584:	40004800 	.word	0x40004800
 8008588:	40004c00 	.word	0x40004c00
 800858c:	40005000 	.word	0x40005000
 8008590:	00f42400 	.word	0x00f42400
 8008594:	2301      	movs	r3, #1
 8008596:	74fb      	strb	r3, [r7, #19]
 8008598:	bf00      	nop
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 81ac 	beq.w	80088fa <UART_SetConfig+0x672>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	4613      	mov	r3, r2
 80085a8:	005b      	lsls	r3, r3, #1
 80085aa:	4413      	add	r3, r2
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d305      	bcc.n	80085be <UART_SetConfig+0x336>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	031b      	lsls	r3, r3, #12
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d902      	bls.n	80085c4 <UART_SetConfig+0x33c>
 80085be:	2301      	movs	r3, #1
 80085c0:	74fb      	strb	r3, [r7, #19]
 80085c2:	e19a      	b.n	80088fa <UART_SetConfig+0x672>
 80085c4:	7efb      	ldrb	r3, [r7, #27]
 80085c6:	2b08      	cmp	r3, #8
 80085c8:	f200 8091 	bhi.w	80086ee <UART_SetConfig+0x466>
 80085cc:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <UART_SetConfig+0x34c>)
 80085ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d2:	bf00      	nop
 80085d4:	080085f9 	.word	0x080085f9
 80085d8:	080086ef 	.word	0x080086ef
 80085dc:	08008645 	.word	0x08008645
 80085e0:	080086ef 	.word	0x080086ef
 80085e4:	08008679 	.word	0x08008679
 80085e8:	080086ef 	.word	0x080086ef
 80085ec:	080086ef 	.word	0x080086ef
 80085f0:	080086ef 	.word	0x080086ef
 80085f4:	080086c5 	.word	0x080086c5
 80085f8:	f7fd fcbc 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 80085fc:	4603      	mov	r3, r0
 80085fe:	4619      	mov	r1, r3
 8008600:	f04f 0200 	mov.w	r2, #0
 8008604:	f04f 0300 	mov.w	r3, #0
 8008608:	f04f 0400 	mov.w	r4, #0
 800860c:	0214      	lsls	r4, r2, #8
 800860e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008612:	020b      	lsls	r3, r1, #8
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	6852      	ldr	r2, [r2, #4]
 8008618:	0852      	lsrs	r2, r2, #1
 800861a:	4611      	mov	r1, r2
 800861c:	f04f 0200 	mov.w	r2, #0
 8008620:	eb13 0b01 	adds.w	fp, r3, r1
 8008624:	eb44 0c02 	adc.w	ip, r4, r2
 8008628:	4658      	mov	r0, fp
 800862a:	4661      	mov	r1, ip
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f04f 0400 	mov.w	r4, #0
 8008634:	461a      	mov	r2, r3
 8008636:	4623      	mov	r3, r4
 8008638:	f7f7 fe1a 	bl	8000270 <__aeabi_uldivmod>
 800863c:	4603      	mov	r3, r0
 800863e:	460c      	mov	r4, r1
 8008640:	617b      	str	r3, [r7, #20]
 8008642:	e057      	b.n	80086f4 <UART_SetConfig+0x46c>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	085b      	lsrs	r3, r3, #1
 800864a:	f04f 0400 	mov.w	r4, #0
 800864e:	49b1      	ldr	r1, [pc, #708]	; (8008914 <UART_SetConfig+0x68c>)
 8008650:	f04f 0200 	mov.w	r2, #0
 8008654:	eb13 0b01 	adds.w	fp, r3, r1
 8008658:	eb44 0c02 	adc.w	ip, r4, r2
 800865c:	4658      	mov	r0, fp
 800865e:	4661      	mov	r1, ip
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f04f 0400 	mov.w	r4, #0
 8008668:	461a      	mov	r2, r3
 800866a:	4623      	mov	r3, r4
 800866c:	f7f7 fe00 	bl	8000270 <__aeabi_uldivmod>
 8008670:	4603      	mov	r3, r0
 8008672:	460c      	mov	r4, r1
 8008674:	617b      	str	r3, [r7, #20]
 8008676:	e03d      	b.n	80086f4 <UART_SetConfig+0x46c>
 8008678:	f7fd fbe6 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 800867c:	4603      	mov	r3, r0
 800867e:	4619      	mov	r1, r3
 8008680:	f04f 0200 	mov.w	r2, #0
 8008684:	f04f 0300 	mov.w	r3, #0
 8008688:	f04f 0400 	mov.w	r4, #0
 800868c:	0214      	lsls	r4, r2, #8
 800868e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008692:	020b      	lsls	r3, r1, #8
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	6852      	ldr	r2, [r2, #4]
 8008698:	0852      	lsrs	r2, r2, #1
 800869a:	4611      	mov	r1, r2
 800869c:	f04f 0200 	mov.w	r2, #0
 80086a0:	eb13 0b01 	adds.w	fp, r3, r1
 80086a4:	eb44 0c02 	adc.w	ip, r4, r2
 80086a8:	4658      	mov	r0, fp
 80086aa:	4661      	mov	r1, ip
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	f04f 0400 	mov.w	r4, #0
 80086b4:	461a      	mov	r2, r3
 80086b6:	4623      	mov	r3, r4
 80086b8:	f7f7 fdda 	bl	8000270 <__aeabi_uldivmod>
 80086bc:	4603      	mov	r3, r0
 80086be:	460c      	mov	r4, r1
 80086c0:	617b      	str	r3, [r7, #20]
 80086c2:	e017      	b.n	80086f4 <UART_SetConfig+0x46c>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	085b      	lsrs	r3, r3, #1
 80086ca:	f04f 0400 	mov.w	r4, #0
 80086ce:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80086d2:	f144 0100 	adc.w	r1, r4, #0
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	f04f 0400 	mov.w	r4, #0
 80086de:	461a      	mov	r2, r3
 80086e0:	4623      	mov	r3, r4
 80086e2:	f7f7 fdc5 	bl	8000270 <__aeabi_uldivmod>
 80086e6:	4603      	mov	r3, r0
 80086e8:	460c      	mov	r4, r1
 80086ea:	617b      	str	r3, [r7, #20]
 80086ec:	e002      	b.n	80086f4 <UART_SetConfig+0x46c>
 80086ee:	2301      	movs	r3, #1
 80086f0:	74fb      	strb	r3, [r7, #19]
 80086f2:	bf00      	nop
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086fa:	d308      	bcc.n	800870e <UART_SetConfig+0x486>
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008702:	d204      	bcs.n	800870e <UART_SetConfig+0x486>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	60da      	str	r2, [r3, #12]
 800870c:	e0f5      	b.n	80088fa <UART_SetConfig+0x672>
 800870e:	2301      	movs	r3, #1
 8008710:	74fb      	strb	r3, [r7, #19]
 8008712:	e0f2      	b.n	80088fa <UART_SetConfig+0x672>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800871c:	d17f      	bne.n	800881e <UART_SetConfig+0x596>
 800871e:	7efb      	ldrb	r3, [r7, #27]
 8008720:	2b08      	cmp	r3, #8
 8008722:	d85c      	bhi.n	80087de <UART_SetConfig+0x556>
 8008724:	a201      	add	r2, pc, #4	; (adr r2, 800872c <UART_SetConfig+0x4a4>)
 8008726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872a:	bf00      	nop
 800872c:	08008751 	.word	0x08008751
 8008730:	0800876f 	.word	0x0800876f
 8008734:	0800878d 	.word	0x0800878d
 8008738:	080087df 	.word	0x080087df
 800873c:	080087a9 	.word	0x080087a9
 8008740:	080087df 	.word	0x080087df
 8008744:	080087df 	.word	0x080087df
 8008748:	080087df 	.word	0x080087df
 800874c:	080087c7 	.word	0x080087c7
 8008750:	f7fd fc10 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8008754:	4603      	mov	r3, r0
 8008756:	005a      	lsls	r2, r3, #1
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	085b      	lsrs	r3, r3, #1
 800875e:	441a      	add	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	fbb2 f3f3 	udiv	r3, r2, r3
 8008768:	b29b      	uxth	r3, r3
 800876a:	617b      	str	r3, [r7, #20]
 800876c:	e03a      	b.n	80087e4 <UART_SetConfig+0x55c>
 800876e:	f7fd fc17 	bl	8005fa0 <HAL_RCC_GetPCLK2Freq>
 8008772:	4603      	mov	r3, r0
 8008774:	005a      	lsls	r2, r3, #1
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	085b      	lsrs	r3, r3, #1
 800877c:	441a      	add	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	fbb2 f3f3 	udiv	r3, r2, r3
 8008786:	b29b      	uxth	r3, r3
 8008788:	617b      	str	r3, [r7, #20]
 800878a:	e02b      	b.n	80087e4 <UART_SetConfig+0x55c>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	085b      	lsrs	r3, r3, #1
 8008792:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8008796:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	6852      	ldr	r2, [r2, #4]
 800879e:	fbb3 f3f2 	udiv	r3, r3, r2
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	617b      	str	r3, [r7, #20]
 80087a6:	e01d      	b.n	80087e4 <UART_SetConfig+0x55c>
 80087a8:	f7fd fb4e 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 80087ac:	4603      	mov	r3, r0
 80087ae:	005a      	lsls	r2, r3, #1
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	085b      	lsrs	r3, r3, #1
 80087b6:	441a      	add	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	e00e      	b.n	80087e4 <UART_SetConfig+0x55c>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	085b      	lsrs	r3, r3, #1
 80087cc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d8:	b29b      	uxth	r3, r3
 80087da:	617b      	str	r3, [r7, #20]
 80087dc:	e002      	b.n	80087e4 <UART_SetConfig+0x55c>
 80087de:	2301      	movs	r3, #1
 80087e0:	74fb      	strb	r3, [r7, #19]
 80087e2:	bf00      	nop
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2b0f      	cmp	r3, #15
 80087e8:	d916      	bls.n	8008818 <UART_SetConfig+0x590>
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087f0:	d212      	bcs.n	8008818 <UART_SetConfig+0x590>
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	f023 030f 	bic.w	r3, r3, #15
 80087fa:	817b      	strh	r3, [r7, #10]
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	085b      	lsrs	r3, r3, #1
 8008800:	b29b      	uxth	r3, r3
 8008802:	f003 0307 	and.w	r3, r3, #7
 8008806:	b29a      	uxth	r2, r3
 8008808:	897b      	ldrh	r3, [r7, #10]
 800880a:	4313      	orrs	r3, r2
 800880c:	817b      	strh	r3, [r7, #10]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	897a      	ldrh	r2, [r7, #10]
 8008814:	60da      	str	r2, [r3, #12]
 8008816:	e070      	b.n	80088fa <UART_SetConfig+0x672>
 8008818:	2301      	movs	r3, #1
 800881a:	74fb      	strb	r3, [r7, #19]
 800881c:	e06d      	b.n	80088fa <UART_SetConfig+0x672>
 800881e:	7efb      	ldrb	r3, [r7, #27]
 8008820:	2b08      	cmp	r3, #8
 8008822:	d859      	bhi.n	80088d8 <UART_SetConfig+0x650>
 8008824:	a201      	add	r2, pc, #4	; (adr r2, 800882c <UART_SetConfig+0x5a4>)
 8008826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882a:	bf00      	nop
 800882c:	08008851 	.word	0x08008851
 8008830:	0800886d 	.word	0x0800886d
 8008834:	08008889 	.word	0x08008889
 8008838:	080088d9 	.word	0x080088d9
 800883c:	080088a5 	.word	0x080088a5
 8008840:	080088d9 	.word	0x080088d9
 8008844:	080088d9 	.word	0x080088d9
 8008848:	080088d9 	.word	0x080088d9
 800884c:	080088c1 	.word	0x080088c1
 8008850:	f7fd fb90 	bl	8005f74 <HAL_RCC_GetPCLK1Freq>
 8008854:	4602      	mov	r2, r0
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	085b      	lsrs	r3, r3, #1
 800885c:	441a      	add	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	fbb2 f3f3 	udiv	r3, r2, r3
 8008866:	b29b      	uxth	r3, r3
 8008868:	617b      	str	r3, [r7, #20]
 800886a:	e038      	b.n	80088de <UART_SetConfig+0x656>
 800886c:	f7fd fb98 	bl	8005fa0 <HAL_RCC_GetPCLK2Freq>
 8008870:	4602      	mov	r2, r0
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	085b      	lsrs	r3, r3, #1
 8008878:	441a      	add	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008882:	b29b      	uxth	r3, r3
 8008884:	617b      	str	r3, [r7, #20]
 8008886:	e02a      	b.n	80088de <UART_SetConfig+0x656>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	085b      	lsrs	r3, r3, #1
 800888e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8008892:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6852      	ldr	r2, [r2, #4]
 800889a:	fbb3 f3f2 	udiv	r3, r3, r2
 800889e:	b29b      	uxth	r3, r3
 80088a0:	617b      	str	r3, [r7, #20]
 80088a2:	e01c      	b.n	80088de <UART_SetConfig+0x656>
 80088a4:	f7fd fad0 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 80088a8:	4602      	mov	r2, r0
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	085b      	lsrs	r3, r3, #1
 80088b0:	441a      	add	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	617b      	str	r3, [r7, #20]
 80088be:	e00e      	b.n	80088de <UART_SetConfig+0x656>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	085b      	lsrs	r3, r3, #1
 80088c6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	617b      	str	r3, [r7, #20]
 80088d6:	e002      	b.n	80088de <UART_SetConfig+0x656>
 80088d8:	2301      	movs	r3, #1
 80088da:	74fb      	strb	r3, [r7, #19]
 80088dc:	bf00      	nop
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2b0f      	cmp	r3, #15
 80088e2:	d908      	bls.n	80088f6 <UART_SetConfig+0x66e>
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ea:	d204      	bcs.n	80088f6 <UART_SetConfig+0x66e>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	60da      	str	r2, [r3, #12]
 80088f4:	e001      	b.n	80088fa <UART_SetConfig+0x672>
 80088f6:	2301      	movs	r3, #1
 80088f8:	74fb      	strb	r3, [r7, #19]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	661a      	str	r2, [r3, #96]	; 0x60
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	665a      	str	r2, [r3, #100]	; 0x64
 8008906:	7cfb      	ldrb	r3, [r7, #19]
 8008908:	4618      	mov	r0, r3
 800890a:	3720      	adds	r7, #32
 800890c:	46bd      	mov	sp, r7
 800890e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008912:	bf00      	nop
 8008914:	f4240000 	.word	0xf4240000

08008918 <UART_AdvFeatureConfig>:
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00a      	beq.n	8008942 <UART_AdvFeatureConfig+0x2a>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	430a      	orrs	r2, r1
 8008940:	605a      	str	r2, [r3, #4]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	f003 0302 	and.w	r3, r3, #2
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00a      	beq.n	8008964 <UART_AdvFeatureConfig+0x4c>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	430a      	orrs	r2, r1
 8008962:	605a      	str	r2, [r3, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008968:	f003 0304 	and.w	r3, r3, #4
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00a      	beq.n	8008986 <UART_AdvFeatureConfig+0x6e>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	430a      	orrs	r2, r1
 8008984:	605a      	str	r2, [r3, #4]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	f003 0308 	and.w	r3, r3, #8
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00a      	beq.n	80089a8 <UART_AdvFeatureConfig+0x90>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	430a      	orrs	r2, r1
 80089a6:	605a      	str	r2, [r3, #4]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ac:	f003 0310 	and.w	r3, r3, #16
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00a      	beq.n	80089ca <UART_AdvFeatureConfig+0xb2>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	609a      	str	r2, [r3, #8]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	f003 0320 	and.w	r3, r3, #32
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00a      	beq.n	80089ec <UART_AdvFeatureConfig+0xd4>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	609a      	str	r2, [r3, #8]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d01a      	beq.n	8008a2e <UART_AdvFeatureConfig+0x116>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	605a      	str	r2, [r3, #4]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a16:	d10a      	bne.n	8008a2e <UART_AdvFeatureConfig+0x116>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	605a      	str	r2, [r3, #4]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00a      	beq.n	8008a50 <UART_AdvFeatureConfig+0x138>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	430a      	orrs	r2, r1
 8008a4e:	605a      	str	r2, [r3, #4]
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <UART_CheckIdleState>:
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af02      	add	r7, sp, #8
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	67da      	str	r2, [r3, #124]	; 0x7c
 8008a6a:	f7f9 ff4b 	bl	8002904 <HAL_GetTick>
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0308 	and.w	r3, r3, #8
 8008a7a:	2b08      	cmp	r3, #8
 8008a7c:	d10e      	bne.n	8008a9c <UART_CheckIdleState+0x40>
 8008a7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f82a 	bl	8008ae6 <UART_WaitOnFlagUntilTimeout>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <UART_CheckIdleState+0x40>
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e020      	b.n	8008ade <UART_CheckIdleState+0x82>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0304 	and.w	r3, r3, #4
 8008aa6:	2b04      	cmp	r3, #4
 8008aa8:	d10e      	bne.n	8008ac8 <UART_CheckIdleState+0x6c>
 8008aaa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f814 	bl	8008ae6 <UART_WaitOnFlagUntilTimeout>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <UART_CheckIdleState+0x6c>
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e00a      	b.n	8008ade <UART_CheckIdleState+0x82>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2220      	movs	r2, #32
 8008acc:	675a      	str	r2, [r3, #116]	; 0x74
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	679a      	str	r2, [r3, #120]	; 0x78
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8008adc:	2300      	movs	r3, #0
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <UART_WaitOnFlagUntilTimeout>:
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b084      	sub	sp, #16
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	603b      	str	r3, [r7, #0]
 8008af2:	4613      	mov	r3, r2
 8008af4:	71fb      	strb	r3, [r7, #7]
 8008af6:	e02a      	b.n	8008b4e <UART_WaitOnFlagUntilTimeout+0x68>
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afe:	d026      	beq.n	8008b4e <UART_WaitOnFlagUntilTimeout+0x68>
 8008b00:	f7f9 ff00 	bl	8002904 <HAL_GetTick>
 8008b04:	4602      	mov	r2, r0
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d302      	bcc.n	8008b16 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d11b      	bne.n	8008b4e <UART_WaitOnFlagUntilTimeout+0x68>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f022 0201 	bic.w	r2, r2, #1
 8008b34:	609a      	str	r2, [r3, #8]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	675a      	str	r2, [r3, #116]	; 0x74
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	679a      	str	r2, [r3, #120]	; 0x78
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	e00f      	b.n	8008b6e <UART_WaitOnFlagUntilTimeout+0x88>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	69da      	ldr	r2, [r3, #28]
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	4013      	ands	r3, r2
 8008b58:	68ba      	ldr	r2, [r7, #8]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	bf0c      	ite	eq
 8008b5e:	2301      	moveq	r3, #1
 8008b60:	2300      	movne	r3, #0
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	461a      	mov	r2, r3
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d0c5      	beq.n	8008af8 <UART_WaitOnFlagUntilTimeout+0x12>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USB_CoreInit>:
 8008b76:	b084      	sub	sp, #16
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	f107 001c 	add.w	r0, r7, #28
 8008b84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8008b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d122      	bne.n	8008bd4 <USB_CoreInit+0x5e>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	639a      	str	r2, [r3, #56]	; 0x38
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	60d3      	str	r3, [r2, #12]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	60da      	str	r2, [r3, #12]
 8008bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d105      	bne.n	8008bc8 <USB_CoreInit+0x52>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	60da      	str	r2, [r3, #12]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f937 	bl	8008e3c <USB_CoreReset>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73fb      	strb	r3, [r7, #15]
 8008bd2:	e01a      	b.n	8008c0a <USB_CoreInit+0x94>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	60da      	str	r2, [r3, #12]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f92b 	bl	8008e3c <USB_CoreReset>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73fb      	strb	r3, [r7, #15]
 8008bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d106      	bne.n	8008bfe <USB_CoreInit+0x88>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	639a      	str	r2, [r3, #56]	; 0x38
 8008bfc:	e005      	b.n	8008c0a <USB_CoreInit+0x94>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	639a      	str	r2, [r3, #56]	; 0x38
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c16:	b004      	add	sp, #16
 8008c18:	4770      	bx	lr

08008c1a <USB_EnableGlobalInt>:
 8008c1a:	b480      	push	{r7}
 8008c1c:	b083      	sub	sp, #12
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f043 0201 	orr.w	r2, r3, #1
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	609a      	str	r2, [r3, #8]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	4618      	mov	r0, r3
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <USB_DisableGlobalInt>:
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f023 0201 	bic.w	r2, r3, #1
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	609a      	str	r2, [r3, #8]
 8008c50:	2300      	movs	r3, #0
 8008c52:	4618      	mov	r0, r3
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <USB_SetCurrentMode>:
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	460b      	mov	r3, r1
 8008c68:	70fb      	strb	r3, [r7, #3]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	60da      	str	r2, [r3, #12]
 8008c76:	78fb      	ldrb	r3, [r7, #3]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d106      	bne.n	8008c8a <USB_SetCurrentMode+0x2c>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	60da      	str	r2, [r3, #12]
 8008c88:	e00b      	b.n	8008ca2 <USB_SetCurrentMode+0x44>
 8008c8a:	78fb      	ldrb	r3, [r7, #3]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d106      	bne.n	8008c9e <USB_SetCurrentMode+0x40>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	60da      	str	r2, [r3, #12]
 8008c9c:	e001      	b.n	8008ca2 <USB_SetCurrentMode+0x44>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e003      	b.n	8008caa <USB_SetCurrentMode+0x4c>
 8008ca2:	2032      	movs	r0, #50	; 0x32
 8008ca4:	f7f9 fe3a 	bl	800291c <HAL_Delay>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <USB_FlushTxFifo>:
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60fb      	str	r3, [r7, #12]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	019b      	lsls	r3, r3, #6
 8008cc6:	f043 0220 	orr.w	r2, r3, #32
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	611a      	str	r2, [r3, #16]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	60fb      	str	r3, [r7, #12]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	4a09      	ldr	r2, [pc, #36]	; (8008cfc <USB_FlushTxFifo+0x48>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d901      	bls.n	8008ce0 <USB_FlushTxFifo+0x2c>
 8008cdc:	2303      	movs	r3, #3
 8008cde:	e006      	b.n	8008cee <USB_FlushTxFifo+0x3a>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	f003 0320 	and.w	r3, r3, #32
 8008ce8:	2b20      	cmp	r3, #32
 8008cea:	d0f0      	beq.n	8008cce <USB_FlushTxFifo+0x1a>
 8008cec:	2300      	movs	r3, #0
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	00030d40 	.word	0x00030d40

08008d00 <USB_FlushRxFifo>:
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	2300      	movs	r3, #0
 8008d0a:	60fb      	str	r3, [r7, #12]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2210      	movs	r2, #16
 8008d10:	611a      	str	r2, [r3, #16]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3301      	adds	r3, #1
 8008d16:	60fb      	str	r3, [r7, #12]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	4a09      	ldr	r2, [pc, #36]	; (8008d40 <USB_FlushRxFifo+0x40>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d901      	bls.n	8008d24 <USB_FlushRxFifo+0x24>
 8008d20:	2303      	movs	r3, #3
 8008d22:	e006      	b.n	8008d32 <USB_FlushRxFifo+0x32>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	f003 0310 	and.w	r3, r3, #16
 8008d2c:	2b10      	cmp	r3, #16
 8008d2e:	d0f0      	beq.n	8008d12 <USB_FlushRxFifo+0x12>
 8008d30:	2300      	movs	r3, #0
 8008d32:	4618      	mov	r0, r3
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	00030d40 	.word	0x00030d40

08008d44 <USB_WritePacket>:
 8008d44:	b480      	push	{r7}
 8008d46:	b089      	sub	sp, #36	; 0x24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	4611      	mov	r1, r2
 8008d50:	461a      	mov	r2, r3
 8008d52:	460b      	mov	r3, r1
 8008d54:	71fb      	strb	r3, [r7, #7]
 8008d56:	4613      	mov	r3, r2
 8008d58:	80bb      	strh	r3, [r7, #4]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	617b      	str	r3, [r7, #20]
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	61fb      	str	r3, [r7, #28]
 8008d62:	88bb      	ldrh	r3, [r7, #4]
 8008d64:	3303      	adds	r3, #3
 8008d66:	089b      	lsrs	r3, r3, #2
 8008d68:	613b      	str	r3, [r7, #16]
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	61bb      	str	r3, [r7, #24]
 8008d6e:	e00f      	b.n	8008d90 <USB_WritePacket+0x4c>
 8008d70:	79fb      	ldrb	r3, [r7, #7]
 8008d72:	031a      	lsls	r2, r3, #12
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6013      	str	r3, [r2, #0]
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	3304      	adds	r3, #4
 8008d88:	61fb      	str	r3, [r7, #28]
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	61bb      	str	r3, [r7, #24]
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d3eb      	bcc.n	8008d70 <USB_WritePacket+0x2c>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3724      	adds	r7, #36	; 0x24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <USB_ReadPacket>:
 8008da6:	b480      	push	{r7}
 8008da8:	b089      	sub	sp, #36	; 0x24
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	60f8      	str	r0, [r7, #12]
 8008dae:	60b9      	str	r1, [r7, #8]
 8008db0:	4613      	mov	r3, r2
 8008db2:	80fb      	strh	r3, [r7, #6]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	617b      	str	r3, [r7, #20]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	61fb      	str	r3, [r7, #28]
 8008dbc:	88fb      	ldrh	r3, [r7, #6]
 8008dbe:	3303      	adds	r3, #3
 8008dc0:	089b      	lsrs	r3, r3, #2
 8008dc2:	613b      	str	r3, [r7, #16]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	61bb      	str	r3, [r7, #24]
 8008dc8:	e00b      	b.n	8008de2 <USB_ReadPacket+0x3c>
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	601a      	str	r2, [r3, #0]
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	3304      	adds	r3, #4
 8008dda:	61fb      	str	r3, [r7, #28]
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	3301      	adds	r3, #1
 8008de0:	61bb      	str	r3, [r7, #24]
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d3ef      	bcc.n	8008dca <USB_ReadPacket+0x24>
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	4618      	mov	r0, r3
 8008dee:	3724      	adds	r7, #36	; 0x24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <USB_ReadInterrupts>:
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	60fb      	str	r3, [r7, #12]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	4618      	mov	r0, r3
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <USB_GetMode>:
 8008e1e:	b480      	push	{r7}
 8008e20:	b083      	sub	sp, #12
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	4618      	mov	r0, r3
 8008e30:	370c      	adds	r7, #12
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
	...

08008e3c <USB_CoreReset>:
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	2300      	movs	r3, #0
 8008e46:	60fb      	str	r3, [r7, #12]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	60fb      	str	r3, [r7, #12]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	4a13      	ldr	r2, [pc, #76]	; (8008ea0 <USB_CoreReset+0x64>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d901      	bls.n	8008e5a <USB_CoreReset+0x1e>
 8008e56:	2303      	movs	r3, #3
 8008e58:	e01b      	b.n	8008e92 <USB_CoreReset+0x56>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	daf2      	bge.n	8008e48 <USB_CoreReset+0xc>
 8008e62:	2300      	movs	r3, #0
 8008e64:	60fb      	str	r3, [r7, #12]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	f043 0201 	orr.w	r2, r3, #1
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	611a      	str	r2, [r3, #16]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3301      	adds	r3, #1
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	4a09      	ldr	r2, [pc, #36]	; (8008ea0 <USB_CoreReset+0x64>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d901      	bls.n	8008e84 <USB_CoreReset+0x48>
 8008e80:	2303      	movs	r3, #3
 8008e82:	e006      	b.n	8008e92 <USB_CoreReset+0x56>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	f003 0301 	and.w	r3, r3, #1
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d0f0      	beq.n	8008e72 <USB_CoreReset+0x36>
 8008e90:	2300      	movs	r3, #0
 8008e92:	4618      	mov	r0, r3
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	00030d40 	.word	0x00030d40

08008ea4 <USB_HostInit>:
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	f107 001c 	add.w	r0, r7, #28
 8008eb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	60bb      	str	r3, [r7, #8]
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	639a      	str	r2, [r3, #56]	; 0x38
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	639a      	str	r2, [r3, #56]	; 0x38
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008eec:	f023 0304 	bic.w	r3, r3, #4
 8008ef0:	6013      	str	r3, [r2, #0]
 8008ef2:	2110      	movs	r1, #16
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f7ff fedd 	bl	8008cb4 <USB_FlushTxFifo>
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7ff ff00 	bl	8008d00 <USB_FlushRxFifo>
 8008f00:	2300      	movs	r3, #0
 8008f02:	60fb      	str	r3, [r7, #12]
 8008f04:	e015      	b.n	8008f32 <USB_HostInit+0x8e>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f12:	461a      	mov	r2, r3
 8008f14:	f04f 33ff 	mov.w	r3, #4294967295
 8008f18:	6093      	str	r3, [r2, #8]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f26:	461a      	mov	r2, r3
 8008f28:	2300      	movs	r3, #0
 8008f2a:	60d3      	str	r3, [r2, #12]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	60fb      	str	r3, [r7, #12]
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d3e5      	bcc.n	8008f06 <USB_HostInit+0x62>
 8008f3a:	2101      	movs	r1, #1
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f893 	bl	8009068 <USB_DriveVbus>
 8008f42:	20c8      	movs	r0, #200	; 0xc8
 8008f44:	f7f9 fcea 	bl	800291c <HAL_Delay>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	619a      	str	r2, [r3, #24]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f04f 32ff 	mov.w	r2, #4294967295
 8008f54:	615a      	str	r2, [r3, #20]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2280      	movs	r2, #128	; 0x80
 8008f5a:	625a      	str	r2, [r3, #36]	; 0x24
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a0d      	ldr	r2, [pc, #52]	; (8008f94 <USB_HostInit+0xf0>)
 8008f60:	629a      	str	r2, [r3, #40]	; 0x28
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a0c      	ldr	r2, [pc, #48]	; (8008f98 <USB_HostInit+0xf4>)
 8008f66:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	f043 0210 	orr.w	r2, r3, #16
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	619a      	str	r2, [r3, #24]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	699a      	ldr	r2, [r3, #24]
 8008f7a:	4b08      	ldr	r3, [pc, #32]	; (8008f9c <USB_HostInit+0xf8>)
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	6193      	str	r3, [r2, #24]
 8008f82:	2300      	movs	r3, #0
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f8e:	b004      	add	sp, #16
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	00600080 	.word	0x00600080
 8008f98:	004000e0 	.word	0x004000e0
 8008f9c:	a3200008 	.word	0xa3200008

08008fa0 <USB_InitFSLSPClkSel>:
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70fb      	strb	r3, [r7, #3]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	60fb      	str	r3, [r7, #12]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fbe:	f023 0303 	bic.w	r3, r3, #3
 8008fc2:	6013      	str	r3, [r2, #0]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	78fb      	ldrb	r3, [r7, #3]
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	68f9      	ldr	r1, [r7, #12]
 8008fd4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	600b      	str	r3, [r1, #0]
 8008fdc:	78fb      	ldrb	r3, [r7, #3]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d107      	bne.n	8008ff2 <USB_InitFSLSPClkSel+0x52>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fe8:	461a      	mov	r2, r3
 8008fea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008fee:	6053      	str	r3, [r2, #4]
 8008ff0:	e009      	b.n	8009006 <USB_InitFSLSPClkSel+0x66>
 8008ff2:	78fb      	ldrb	r3, [r7, #3]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d106      	bne.n	8009006 <USB_InitFSLSPClkSel+0x66>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ffe:	461a      	mov	r2, r3
 8009000:	f241 7370 	movw	r3, #6000	; 0x1770
 8009004:	6053      	str	r3, [r2, #4]
 8009006:	2300      	movs	r3, #0
 8009008:	4618      	mov	r0, r3
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <USB_ResetPort>:
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	60fb      	str	r3, [r7, #12]
 8009020:	2300      	movs	r3, #0
 8009022:	60bb      	str	r3, [r7, #8]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	60bb      	str	r3, [r7, #8]
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009034:	60bb      	str	r3, [r7, #8]
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800903e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009042:	6013      	str	r3, [r2, #0]
 8009044:	2064      	movs	r0, #100	; 0x64
 8009046:	f7f9 fc69 	bl	800291c <HAL_Delay>
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009052:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	200a      	movs	r0, #10
 800905a:	f7f9 fc5f 	bl	800291c <HAL_Delay>
 800905e:	2300      	movs	r3, #0
 8009060:	4618      	mov	r0, r3
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <USB_DriveVbus>:
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	70fb      	strb	r3, [r7, #3]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	60fb      	str	r3, [r7, #12]
 8009078:	2300      	movs	r3, #0
 800907a:	60bb      	str	r3, [r7, #8]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	60bb      	str	r3, [r7, #8]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800908c:	60bb      	str	r3, [r7, #8]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d109      	bne.n	80090ac <USB_DriveVbus+0x44>
 8009098:	78fb      	ldrb	r3, [r7, #3]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d106      	bne.n	80090ac <USB_DriveVbus+0x44>
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80090a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80090aa:	6013      	str	r3, [r2, #0]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090b6:	d109      	bne.n	80090cc <USB_DriveVbus+0x64>
 80090b8:	78fb      	ldrb	r3, [r7, #3]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d106      	bne.n	80090cc <USB_DriveVbus+0x64>
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80090c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	2300      	movs	r3, #0
 80090ce:	4618      	mov	r0, r3
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <USB_GetHostSpeed>:
 80090da:	b480      	push	{r7}
 80090dc:	b085      	sub	sp, #20
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	2300      	movs	r3, #0
 80090e8:	60bb      	str	r3, [r7, #8]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	60bb      	str	r3, [r7, #8]
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	0c5b      	lsrs	r3, r3, #17
 80090f8:	f003 0303 	and.w	r3, r3, #3
 80090fc:	4618      	mov	r0, r3
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <USB_GetCurrentFrame>:
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	60fb      	str	r3, [r7, #12]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	b29b      	uxth	r3, r3
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
	...

0800912c <USB_HC_Init>:
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	4608      	mov	r0, r1
 8009136:	4611      	mov	r1, r2
 8009138:	461a      	mov	r2, r3
 800913a:	4603      	mov	r3, r0
 800913c:	70fb      	strb	r3, [r7, #3]
 800913e:	460b      	mov	r3, r1
 8009140:	70bb      	strb	r3, [r7, #2]
 8009142:	4613      	mov	r3, r2
 8009144:	707b      	strb	r3, [r7, #1]
 8009146:	2300      	movs	r3, #0
 8009148:	75fb      	strb	r3, [r7, #23]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	60bb      	str	r3, [r7, #8]
 800914e:	78fb      	ldrb	r3, [r7, #3]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	4413      	add	r3, r2
 8009156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800915a:	461a      	mov	r2, r3
 800915c:	f04f 33ff 	mov.w	r3, #4294967295
 8009160:	6093      	str	r3, [r2, #8]
 8009162:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009166:	2b03      	cmp	r3, #3
 8009168:	d867      	bhi.n	800923a <USB_HC_Init+0x10e>
 800916a:	a201      	add	r2, pc, #4	; (adr r2, 8009170 <USB_HC_Init+0x44>)
 800916c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009170:	08009181 	.word	0x08009181
 8009174:	080091fd 	.word	0x080091fd
 8009178:	08009181 	.word	0x08009181
 800917c:	080091bf 	.word	0x080091bf
 8009180:	78fb      	ldrb	r3, [r7, #3]
 8009182:	015a      	lsls	r2, r3, #5
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	4413      	add	r3, r2
 8009188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800918c:	461a      	mov	r2, r3
 800918e:	f240 439d 	movw	r3, #1181	; 0x49d
 8009192:	60d3      	str	r3, [r2, #12]
 8009194:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009198:	2b00      	cmp	r3, #0
 800919a:	da51      	bge.n	8009240 <USB_HC_Init+0x114>
 800919c:	78fb      	ldrb	r3, [r7, #3]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	78fa      	ldrb	r2, [r7, #3]
 80091ac:	0151      	lsls	r1, r2, #5
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	440a      	add	r2, r1
 80091b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ba:	60d3      	str	r3, [r2, #12]
 80091bc:	e040      	b.n	8009240 <USB_HC_Init+0x114>
 80091be:	78fb      	ldrb	r3, [r7, #3]
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ca:	461a      	mov	r2, r3
 80091cc:	f240 639d 	movw	r3, #1693	; 0x69d
 80091d0:	60d3      	str	r3, [r2, #12]
 80091d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	da34      	bge.n	8009244 <USB_HC_Init+0x118>
 80091da:	78fb      	ldrb	r3, [r7, #3]
 80091dc:	015a      	lsls	r2, r3, #5
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	4413      	add	r3, r2
 80091e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	78fa      	ldrb	r2, [r7, #3]
 80091ea:	0151      	lsls	r1, r2, #5
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	440a      	add	r2, r1
 80091f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091f8:	60d3      	str	r3, [r2, #12]
 80091fa:	e023      	b.n	8009244 <USB_HC_Init+0x118>
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	4413      	add	r3, r2
 8009204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009208:	461a      	mov	r2, r3
 800920a:	f240 2325 	movw	r3, #549	; 0x225
 800920e:	60d3      	str	r3, [r2, #12]
 8009210:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009214:	2b00      	cmp	r3, #0
 8009216:	da17      	bge.n	8009248 <USB_HC_Init+0x11c>
 8009218:	78fb      	ldrb	r3, [r7, #3]
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	4413      	add	r3, r2
 8009220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	78fa      	ldrb	r2, [r7, #3]
 8009228:	0151      	lsls	r1, r2, #5
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	440a      	add	r2, r1
 800922e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009232:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009236:	60d3      	str	r3, [r2, #12]
 8009238:	e006      	b.n	8009248 <USB_HC_Init+0x11c>
 800923a:	2301      	movs	r3, #1
 800923c:	75fb      	strb	r3, [r7, #23]
 800923e:	e004      	b.n	800924a <USB_HC_Init+0x11e>
 8009240:	bf00      	nop
 8009242:	e002      	b.n	800924a <USB_HC_Init+0x11e>
 8009244:	bf00      	nop
 8009246:	e000      	b.n	800924a <USB_HC_Init+0x11e>
 8009248:	bf00      	nop
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009250:	699a      	ldr	r2, [r3, #24]
 8009252:	78fb      	ldrb	r3, [r7, #3]
 8009254:	f003 030f 	and.w	r3, r3, #15
 8009258:	2101      	movs	r1, #1
 800925a:	fa01 f303 	lsl.w	r3, r1, r3
 800925e:	68b9      	ldr	r1, [r7, #8]
 8009260:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009264:	4313      	orrs	r3, r2
 8009266:	618b      	str	r3, [r1, #24]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	619a      	str	r2, [r3, #24]
 8009274:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009278:	2b00      	cmp	r3, #0
 800927a:	da03      	bge.n	8009284 <USB_HC_Init+0x158>
 800927c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009280:	613b      	str	r3, [r7, #16]
 8009282:	e001      	b.n	8009288 <USB_HC_Init+0x15c>
 8009284:	2300      	movs	r3, #0
 8009286:	613b      	str	r3, [r7, #16]
 8009288:	f897 3020 	ldrb.w	r3, [r7, #32]
 800928c:	2b02      	cmp	r3, #2
 800928e:	d103      	bne.n	8009298 <USB_HC_Init+0x16c>
 8009290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	e001      	b.n	800929c <USB_HC_Init+0x170>
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]
 800929c:	787b      	ldrb	r3, [r7, #1]
 800929e:	059b      	lsls	r3, r3, #22
 80092a0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
 80092a4:	78bb      	ldrb	r3, [r7, #2]
 80092a6:	02db      	lsls	r3, r3, #11
 80092a8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 80092ac:	431a      	orrs	r2, r3
 80092ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80092b2:	049b      	lsls	r3, r3, #18
 80092b4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80092b8:	431a      	orrs	r2, r3
 80092ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80092bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092c0:	431a      	orrs	r2, r3
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	431a      	orrs	r2, r3
 80092c6:	78fb      	ldrb	r3, [r7, #3]
 80092c8:	0159      	lsls	r1, r3, #5
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	440b      	add	r3, r1
 80092ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092d2:	4619      	mov	r1, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	600b      	str	r3, [r1, #0]
 80092da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d10f      	bne.n	8009302 <USB_HC_Init+0x1d6>
 80092e2:	78fb      	ldrb	r3, [r7, #3]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	78fa      	ldrb	r2, [r7, #3]
 80092f2:	0151      	lsls	r1, r2, #5
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	440a      	add	r2, r1
 80092f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009300:	6013      	str	r3, [r2, #0]
 8009302:	7dfb      	ldrb	r3, [r7, #23]
 8009304:	4618      	mov	r0, r3
 8009306:	371c      	adds	r7, #28
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <USB_HC_StartXfer>:
 8009310:	b580      	push	{r7, lr}
 8009312:	b088      	sub	sp, #32
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	61bb      	str	r3, [r7, #24]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	785b      	ldrb	r3, [r3, #1]
 8009322:	617b      	str	r3, [r7, #20]
 8009324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009328:	827b      	strh	r3, [r7, #18]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d018      	beq.n	8009364 <USB_HC_StartXfer+0x54>
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	8912      	ldrh	r2, [r2, #8]
 800933a:	4413      	add	r3, r2
 800933c:	3b01      	subs	r3, #1
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	8912      	ldrh	r2, [r2, #8]
 8009342:	fbb3 f3f2 	udiv	r3, r3, r2
 8009346:	83fb      	strh	r3, [r7, #30]
 8009348:	8bfa      	ldrh	r2, [r7, #30]
 800934a:	8a7b      	ldrh	r3, [r7, #18]
 800934c:	429a      	cmp	r2, r3
 800934e:	d90b      	bls.n	8009368 <USB_HC_StartXfer+0x58>
 8009350:	8a7b      	ldrh	r3, [r7, #18]
 8009352:	83fb      	strh	r3, [r7, #30]
 8009354:	8bfb      	ldrh	r3, [r7, #30]
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	8912      	ldrh	r2, [r2, #8]
 800935a:	fb02 f203 	mul.w	r2, r2, r3
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	611a      	str	r2, [r3, #16]
 8009362:	e001      	b.n	8009368 <USB_HC_StartXfer+0x58>
 8009364:	2301      	movs	r3, #1
 8009366:	83fb      	strh	r3, [r7, #30]
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	78db      	ldrb	r3, [r3, #3]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d006      	beq.n	800937e <USB_HC_StartXfer+0x6e>
 8009370:	8bfb      	ldrh	r3, [r7, #30]
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	8912      	ldrh	r2, [r2, #8]
 8009376:	fb02 f203 	mul.w	r2, r2, r3
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	611a      	str	r2, [r3, #16]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8009386:	8bfb      	ldrh	r3, [r7, #30]
 8009388:	04d9      	lsls	r1, r3, #19
 800938a:	4b5f      	ldr	r3, [pc, #380]	; (8009508 <USB_HC_StartXfer+0x1f8>)
 800938c:	400b      	ands	r3, r1
 800938e:	431a      	orrs	r2, r3
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	7a9b      	ldrb	r3, [r3, #10]
 8009394:	075b      	lsls	r3, r3, #29
 8009396:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800939a:	6979      	ldr	r1, [r7, #20]
 800939c:	0148      	lsls	r0, r1, #5
 800939e:	69b9      	ldr	r1, [r7, #24]
 80093a0:	4401      	add	r1, r0
 80093a2:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80093a6:	4313      	orrs	r3, r2
 80093a8:	610b      	str	r3, [r1, #16]
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	bf0c      	ite	eq
 80093ba:	2301      	moveq	r3, #1
 80093bc:	2300      	movne	r3, #0
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	747b      	strb	r3, [r7, #17]
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	0151      	lsls	r1, r2, #5
 80093d4:	69ba      	ldr	r2, [r7, #24]
 80093d6:	440a      	add	r2, r1
 80093d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	015a      	lsls	r2, r3, #5
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	4413      	add	r3, r2
 80093ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	7c7b      	ldrb	r3, [r7, #17]
 80093f2:	075b      	lsls	r3, r3, #29
 80093f4:	6979      	ldr	r1, [r7, #20]
 80093f6:	0148      	lsls	r0, r1, #5
 80093f8:	69b9      	ldr	r1, [r7, #24]
 80093fa:	4401      	add	r1, r0
 80093fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009400:	4313      	orrs	r3, r2
 8009402:	600b      	str	r3, [r1, #0]
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	015a      	lsls	r2, r3, #5
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	4413      	add	r3, r2
 800940c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a3e      	ldr	r2, [pc, #248]	; (800950c <USB_HC_StartXfer+0x1fc>)
 8009414:	6013      	str	r3, [r2, #0]
 8009416:	4b3d      	ldr	r3, [pc, #244]	; (800950c <USB_HC_StartXfer+0x1fc>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800941e:	4a3b      	ldr	r2, [pc, #236]	; (800950c <USB_HC_StartXfer+0x1fc>)
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	78db      	ldrb	r3, [r3, #3]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d006      	beq.n	8009438 <USB_HC_StartXfer+0x128>
 800942a:	4b38      	ldr	r3, [pc, #224]	; (800950c <USB_HC_StartXfer+0x1fc>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009432:	4a36      	ldr	r2, [pc, #216]	; (800950c <USB_HC_StartXfer+0x1fc>)
 8009434:	6013      	str	r3, [r2, #0]
 8009436:	e005      	b.n	8009444 <USB_HC_StartXfer+0x134>
 8009438:	4b34      	ldr	r3, [pc, #208]	; (800950c <USB_HC_StartXfer+0x1fc>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009440:	4a32      	ldr	r2, [pc, #200]	; (800950c <USB_HC_StartXfer+0x1fc>)
 8009442:	6013      	str	r3, [r2, #0]
 8009444:	4b31      	ldr	r3, [pc, #196]	; (800950c <USB_HC_StartXfer+0x1fc>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800944c:	4a2f      	ldr	r2, [pc, #188]	; (800950c <USB_HC_StartXfer+0x1fc>)
 800944e:	6013      	str	r3, [r2, #0]
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	4413      	add	r3, r2
 8009458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800945c:	461a      	mov	r2, r3
 800945e:	4b2b      	ldr	r3, [pc, #172]	; (800950c <USB_HC_StartXfer+0x1fc>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6013      	str	r3, [r2, #0]
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	78db      	ldrb	r3, [r3, #3]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d148      	bne.n	80094fe <USB_HC_StartXfer+0x1ee>
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d044      	beq.n	80094fe <USB_HC_StartXfer+0x1ee>
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	79db      	ldrb	r3, [r3, #7]
 8009478:	2b03      	cmp	r3, #3
 800947a:	d831      	bhi.n	80094e0 <USB_HC_StartXfer+0x1d0>
 800947c:	a201      	add	r2, pc, #4	; (adr r2, 8009484 <USB_HC_StartXfer+0x174>)
 800947e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009482:	bf00      	nop
 8009484:	08009495 	.word	0x08009495
 8009488:	080094b9 	.word	0x080094b9
 800948c:	08009495 	.word	0x08009495
 8009490:	080094b9 	.word	0x080094b9
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	3303      	adds	r3, #3
 800949a:	089b      	lsrs	r3, r3, #2
 800949c:	81fb      	strh	r3, [r7, #14]
 800949e:	89fa      	ldrh	r2, [r7, #14]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d91c      	bls.n	80094e4 <USB_HC_StartXfer+0x1d4>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	f043 0220 	orr.w	r2, r3, #32
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	619a      	str	r2, [r3, #24]
 80094b6:	e015      	b.n	80094e4 <USB_HC_StartXfer+0x1d4>
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	3303      	adds	r3, #3
 80094be:	089b      	lsrs	r3, r3, #2
 80094c0:	81fb      	strh	r3, [r7, #14]
 80094c2:	89fa      	ldrh	r2, [r7, #14]
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d90a      	bls.n	80094e8 <USB_HC_StartXfer+0x1d8>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	619a      	str	r2, [r3, #24]
 80094de:	e003      	b.n	80094e8 <USB_HC_StartXfer+0x1d8>
 80094e0:	bf00      	nop
 80094e2:	e002      	b.n	80094ea <USB_HC_StartXfer+0x1da>
 80094e4:	bf00      	nop
 80094e6:	e000      	b.n	80094ea <USB_HC_StartXfer+0x1da>
 80094e8:	bf00      	nop
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	68d9      	ldr	r1, [r3, #12]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	785a      	ldrb	r2, [r3, #1]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f7ff fc23 	bl	8008d44 <USB_WritePacket>
 80094fe:	2300      	movs	r3, #0
 8009500:	4618      	mov	r0, r3
 8009502:	3720      	adds	r7, #32
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	1ff80000 	.word	0x1ff80000
 800950c:	20000558 	.word	0x20000558

08009510 <USB_HC_ReadInterrupt>:
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	60fb      	str	r3, [r7, #12]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	b29b      	uxth	r3, r3
 8009526:	4618      	mov	r0, r3
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <USB_HC_Halt>:
 8009532:	b480      	push	{r7}
 8009534:	b087      	sub	sp, #28
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	460b      	mov	r3, r1
 800953c:	70fb      	strb	r3, [r7, #3]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	613b      	str	r3, [r7, #16]
 8009542:	78fb      	ldrb	r3, [r7, #3]
 8009544:	60fb      	str	r3, [r7, #12]
 8009546:	2300      	movs	r3, #0
 8009548:	617b      	str	r3, [r7, #20]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	015a      	lsls	r2, r3, #5
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	4413      	add	r3, r2
 8009552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	0c9b      	lsrs	r3, r3, #18
 800955a:	f003 0303 	and.w	r3, r3, #3
 800955e:	60bb      	str	r3, [r7, #8]
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d002      	beq.n	800956c <USB_HC_Halt+0x3a>
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2b02      	cmp	r3, #2
 800956a:	d16c      	bne.n	8009646 <USB_HC_Halt+0x114>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	015a      	lsls	r2, r3, #5
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	4413      	add	r3, r2
 8009574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	0151      	lsls	r1, r2, #5
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	440a      	add	r2, r1
 8009582:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009586:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800958a:	6013      	str	r3, [r2, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009590:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d143      	bne.n	8009620 <USB_HC_Halt+0xee>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	015a      	lsls	r2, r3, #5
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	4413      	add	r3, r2
 80095a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	0151      	lsls	r1, r2, #5
 80095aa:	693a      	ldr	r2, [r7, #16]
 80095ac:	440a      	add	r2, r1
 80095ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	015a      	lsls	r2, r3, #5
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	4413      	add	r3, r2
 80095c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	0151      	lsls	r1, r2, #5
 80095ca:	693a      	ldr	r2, [r7, #16]
 80095cc:	440a      	add	r2, r1
 80095ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	015a      	lsls	r2, r3, #5
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	4413      	add	r3, r2
 80095e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	0151      	lsls	r1, r2, #5
 80095ea:	693a      	ldr	r2, [r7, #16]
 80095ec:	440a      	add	r2, r1
 80095ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095f6:	6013      	str	r3, [r2, #0]
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	3301      	adds	r3, #1
 80095fc:	617b      	str	r3, [r7, #20]
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009604:	d81d      	bhi.n	8009642 <USB_HC_Halt+0x110>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	015a      	lsls	r2, r3, #5
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	4413      	add	r3, r2
 800960e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800961c:	d0ec      	beq.n	80095f8 <USB_HC_Halt+0xc6>
 800961e:	e080      	b.n	8009722 <USB_HC_Halt+0x1f0>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	015a      	lsls	r2, r3, #5
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	4413      	add	r3, r2
 8009628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	0151      	lsls	r1, r2, #5
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	440a      	add	r2, r1
 8009636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800963a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800963e:	6013      	str	r3, [r2, #0]
 8009640:	e06f      	b.n	8009722 <USB_HC_Halt+0x1f0>
 8009642:	bf00      	nop
 8009644:	e06d      	b.n	8009722 <USB_HC_Halt+0x1f0>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	4413      	add	r3, r2
 800964e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	0151      	lsls	r1, r2, #5
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	440a      	add	r2, r1
 800965c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009660:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009664:	6013      	str	r3, [r2, #0]
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d143      	bne.n	80096fe <USB_HC_Halt+0x1cc>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	015a      	lsls	r2, r3, #5
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	4413      	add	r3, r2
 800967e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	0151      	lsls	r1, r2, #5
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	440a      	add	r2, r1
 800968c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	4413      	add	r3, r2
 800969e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	0151      	lsls	r1, r2, #5
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	440a      	add	r2, r1
 80096ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096b4:	6013      	str	r3, [r2, #0]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	015a      	lsls	r2, r3, #5
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	4413      	add	r3, r2
 80096be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	0151      	lsls	r1, r2, #5
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	440a      	add	r2, r1
 80096cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096d4:	6013      	str	r3, [r2, #0]
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	3301      	adds	r3, #1
 80096da:	617b      	str	r3, [r7, #20]
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096e2:	d81d      	bhi.n	8009720 <USB_HC_Halt+0x1ee>
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	015a      	lsls	r2, r3, #5
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	4413      	add	r3, r2
 80096ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096f0:	681b      	ldr	r3, [r3, #0]
<<<<<<< HEAD
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	0151      	lsls	r1, r2, #5
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	440a      	add	r2, r1
 80096fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009702:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009704:	e06f      	b.n	80097e6 <USB_HC_Halt+0x1f0>
          break;
 8009706:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009708:	e06d      	b.n	80097e6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	015a      	lsls	r2, r3, #5
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	4413      	add	r3, r2
 8009712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	0151      	lsls	r1, r2, #5
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	440a      	add	r2, r1
 8009720:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009724:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009728:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009736:	2b00      	cmp	r3, #0
 8009738:	d143      	bne.n	80097c2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	015a      	lsls	r2, r3, #5
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	4413      	add	r3, r2
 8009742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	0151      	lsls	r1, r2, #5
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	440a      	add	r2, r1
 8009750:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009754:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009758:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	015a      	lsls	r2, r3, #5
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	4413      	add	r3, r2
 8009762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	0151      	lsls	r1, r2, #5
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	440a      	add	r2, r1
 8009770:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009774:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009778:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	015a      	lsls	r2, r3, #5
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	4413      	add	r3, r2
 8009782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	0151      	lsls	r1, r2, #5
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	440a      	add	r2, r1
 8009790:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009794:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009798:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	3301      	adds	r3, #1
 800979e:	617b      	str	r3, [r7, #20]
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097a6:	d81d      	bhi.n	80097e4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097be:	d0ec      	beq.n	800979a <USB_HC_Halt+0x1a4>
 80097c0:	e011      	b.n	80097e6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	015a      	lsls	r2, r3, #5
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	4413      	add	r3, r2
 80097ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	0151      	lsls	r1, r2, #5
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	440a      	add	r2, r1
 80097d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097e0:	6013      	str	r3, [r2, #0]
 80097e2:	e000      	b.n	80097e6 <USB_HC_Halt+0x1f0>
          break;
 80097e4:	bf00      	nop
    }
  }

  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	371c      	adds	r7, #28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009800:	2300      	movs	r3, #0
 8009802:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff fa7b 	bl	8008d00 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800980a:	2110      	movs	r1, #16
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff fab3 	bl	8008d78 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7ff fad6 	bl	8008dc4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009818:	2300      	movs	r3, #0
 800981a:	613b      	str	r3, [r7, #16]
 800981c:	e01f      	b.n	800985e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	4413      	add	r3, r2
 8009826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009834:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800983c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009844:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	015a      	lsls	r2, r3, #5
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	4413      	add	r3, r2
 800984e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009852:	461a      	mov	r2, r3
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	3301      	adds	r3, #1
 800985c:	613b      	str	r3, [r7, #16]
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	2b0f      	cmp	r3, #15
 8009862:	d9dc      	bls.n	800981e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009864:	2300      	movs	r3, #0
 8009866:	613b      	str	r3, [r7, #16]
 8009868:	e034      	b.n	80098d4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	4413      	add	r3, r2
 8009872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009880:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009888:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009890:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	4413      	add	r3, r2
 800989a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800989e:	461a      	mov	r2, r3
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	3301      	adds	r3, #1
 80098a8:	617b      	str	r3, [r7, #20]
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098b0:	d80c      	bhi.n	80098cc <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	015a      	lsls	r2, r3, #5
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	4413      	add	r3, r2
 80098ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098c8:	d0ec      	beq.n	80098a4 <USB_StopHost+0xb0>
 80098ca:	e000      	b.n	80098ce <USB_StopHost+0xda>
        break;
 80098cc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	3301      	adds	r3, #1
 80098d2:	613b      	str	r3, [r7, #16]
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	2b0f      	cmp	r3, #15
 80098d8:	d9c7      	bls.n	800986a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098e0:	461a      	mov	r2, r3
 80098e2:	f04f 33ff 	mov.w	r3, #4294967295
 80098e6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f04f 32ff 	mov.w	r2, #4294967295
 80098ee:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7ff f9f4 	bl	8008cde <USB_EnableGlobalInt>

  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3718      	adds	r7, #24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8009900:	b590      	push	{r4, r7, lr}
 8009902:	b089      	sub	sp, #36	; 0x24
 8009904:	af04      	add	r7, sp, #16
 8009906:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8009908:	2302      	movs	r3, #2
 800990a:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800990c:	2301      	movs	r3, #1
 800990e:	2202      	movs	r2, #2
 8009910:	2102      	movs	r1, #2
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fc3a 	bl	800a18c <USBH_FindInterface>
 8009918:	4603      	mov	r3, r0
 800991a:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800991c:	7bbb      	ldrb	r3, [r7, #14]
 800991e:	2bff      	cmp	r3, #255	; 0xff
 8009920:	f000 812a 	beq.w	8009b78 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8009924:	7bbb      	ldrb	r3, [r7, #14]
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fc13 	bl	800a154 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8009934:	2050      	movs	r0, #80	; 0x50
 8009936:	f002 f8e3 	bl	800bb00 <malloc>
 800993a:	4603      	mov	r3, r0
 800993c:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009944:	69db      	ldr	r3, [r3, #28]
 8009946:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	211a      	movs	r1, #26
 800994e:	fb01 f303 	mul.w	r3, r1, r3
 8009952:	4413      	add	r3, r2
 8009954:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	b25b      	sxtb	r3, r3
 800995c:	2b00      	cmp	r3, #0
 800995e:	da15      	bge.n	800998c <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	211a      	movs	r1, #26
 8009966:	fb01 f303 	mul.w	r3, r1, r3
 800996a:	4413      	add	r3, r2
 800996c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8009970:	781a      	ldrb	r2, [r3, #0]
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009976:	7bbb      	ldrb	r3, [r7, #14]
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	211a      	movs	r1, #26
 800997c:	fb01 f303 	mul.w	r3, r1, r3
 8009980:	4413      	add	r3, r2
 8009982:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8009986:	881a      	ldrh	r2, [r3, #0]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	785b      	ldrb	r3, [r3, #1]
 8009990:	4619      	mov	r1, r3
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f001 fd21 	bl	800b3da <USBH_AllocPipe>
 8009998:	4603      	mov	r3, r0
 800999a:	461a      	mov	r2, r3
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	7819      	ldrb	r1, [r3, #0]
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	7858      	ldrb	r0, [r3, #1]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	8952      	ldrh	r2, [r2, #10]
 80099b8:	9202      	str	r2, [sp, #8]
 80099ba:	2203      	movs	r2, #3
 80099bc:	9201      	str	r2, [sp, #4]
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	4623      	mov	r3, r4
 80099c2:	4602      	mov	r2, r0
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 fcd9 	bl	800b37c <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	2200      	movs	r2, #0
 80099d0:	4619      	mov	r1, r3
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f001 ffe4 	bl	800b9a0 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80099d8:	2300      	movs	r3, #0
 80099da:	2200      	movs	r2, #0
 80099dc:	210a      	movs	r1, #10
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fbd4 	bl	800a18c <USBH_FindInterface>
 80099e4:	4603      	mov	r3, r0
 80099e6:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80099e8:	7bbb      	ldrb	r3, [r7, #14]
 80099ea:	2bff      	cmp	r3, #255	; 0xff
 80099ec:	f000 80c4 	beq.w	8009b78 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80099f0:	7bbb      	ldrb	r3, [r7, #14]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	211a      	movs	r1, #26
 80099f6:	fb01 f303 	mul.w	r3, r1, r3
 80099fa:	4413      	add	r3, r2
 80099fc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	b25b      	sxtb	r3, r3
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	da16      	bge.n	8009a36 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	211a      	movs	r1, #26
 8009a0e:	fb01 f303 	mul.w	r3, r1, r3
 8009a12:	4413      	add	r3, r2
 8009a14:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8009a18:	781a      	ldrb	r2, [r3, #0]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a1e:	7bbb      	ldrb	r3, [r7, #14]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	211a      	movs	r1, #26
 8009a24:	fb01 f303 	mul.w	r3, r1, r3
 8009a28:	4413      	add	r3, r2
 8009a2a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8009a2e:	881a      	ldrh	r2, [r3, #0]
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	835a      	strh	r2, [r3, #26]
 8009a34:	e015      	b.n	8009a62 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	211a      	movs	r1, #26
 8009a3c:	fb01 f303 	mul.w	r3, r1, r3
 8009a40:	4413      	add	r3, r2
 8009a42:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8009a46:	781a      	ldrb	r2, [r3, #0]
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a4c:	7bbb      	ldrb	r3, [r7, #14]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	211a      	movs	r1, #26
 8009a52:	fb01 f303 	mul.w	r3, r1, r3
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8009a5c:	881a      	ldrh	r2, [r3, #0]
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009a62:	7bbb      	ldrb	r3, [r7, #14]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	211a      	movs	r1, #26
 8009a68:	fb01 f303 	mul.w	r3, r1, r3
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	b25b      	sxtb	r3, r3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	da16      	bge.n	8009aa8 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009a7a:	7bbb      	ldrb	r3, [r7, #14]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	211a      	movs	r1, #26
 8009a80:	fb01 f303 	mul.w	r3, r1, r3
 8009a84:	4413      	add	r3, r2
 8009a86:	f203 3352 	addw	r3, r3, #850	; 0x352
 8009a8a:	781a      	ldrb	r2, [r3, #0]
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009a90:	7bbb      	ldrb	r3, [r7, #14]
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	211a      	movs	r1, #26
 8009a96:	fb01 f303 	mul.w	r3, r1, r3
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8009aa0:	881a      	ldrh	r2, [r3, #0]
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	835a      	strh	r2, [r3, #26]
 8009aa6:	e015      	b.n	8009ad4 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	211a      	movs	r1, #26
 8009aae:	fb01 f303 	mul.w	r3, r1, r3
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f203 3352 	addw	r3, r3, #850	; 0x352
 8009ab8:	781a      	ldrb	r2, [r3, #0]
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009abe:	7bbb      	ldrb	r3, [r7, #14]
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	211a      	movs	r1, #26
 8009ac4:	fb01 f303 	mul.w	r3, r1, r3
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8009ace:	881a      	ldrh	r2, [r3, #0]
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	7b9b      	ldrb	r3, [r3, #14]
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f001 fc7d 	bl	800b3da <USBH_AllocPipe>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	7bdb      	ldrb	r3, [r3, #15]
 8009aec:	4619      	mov	r1, r3
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f001 fc73 	bl	800b3da <USBH_AllocPipe>
 8009af4:	4603      	mov	r3, r0
 8009af6:	461a      	mov	r2, r3
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	7b59      	ldrb	r1, [r3, #13]
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	7b98      	ldrb	r0, [r3, #14]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b10:	68ba      	ldr	r2, [r7, #8]
 8009b12:	8b12      	ldrh	r2, [r2, #24]
 8009b14:	9202      	str	r2, [sp, #8]
 8009b16:	2202      	movs	r2, #2
 8009b18:	9201      	str	r2, [sp, #4]
 8009b1a:	9300      	str	r3, [sp, #0]
 8009b1c:	4623      	mov	r3, r4
 8009b1e:	4602      	mov	r2, r0
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f001 fc2b 	bl	800b37c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	7b19      	ldrb	r1, [r3, #12]
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	7bd8      	ldrb	r0, [r3, #15]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	8b52      	ldrh	r2, [r2, #26]
 8009b3e:	9202      	str	r2, [sp, #8]
 8009b40:	2202      	movs	r2, #2
 8009b42:	9201      	str	r2, [sp, #4]
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	4623      	mov	r3, r4
 8009b48:	4602      	mov	r2, r0
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f001 fc16 	bl	800b37c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	7b5b      	ldrb	r3, [r3, #13]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f001 ff1d 	bl	800b9a0 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	7b1b      	ldrb	r3, [r3, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f001 ff16 	bl	800b9a0 <USBH_LL_SetToggle>
      status = USBH_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3714      	adds	r7, #20
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd90      	pop	{r4, r7, pc}

08009b82 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b084      	sub	sp, #16
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009b90:	69db      	ldr	r3, [r3, #28]
 8009b92:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00e      	beq.n	8009bba <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f001 fc09 	bl	800b3ba <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f001 fc31 	bl	800b416 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	7b1b      	ldrb	r3, [r3, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00e      	beq.n	8009be0 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	7b1b      	ldrb	r3, [r3, #12]
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f001 fbf6 	bl	800b3ba <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	7b1b      	ldrb	r3, [r3, #12]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f001 fc1e 	bl	800b416 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	7b5b      	ldrb	r3, [r3, #13]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00e      	beq.n	8009c06 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	7b5b      	ldrb	r3, [r3, #13]
 8009bec:	4619      	mov	r1, r3
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f001 fbe3 	bl	800b3ba <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	7b5b      	ldrb	r3, [r3, #13]
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f001 fc0b 	bl	800b416 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00b      	beq.n	8009c2a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009c18:	69db      	ldr	r3, [r3, #28]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f001 ff78 	bl	800bb10 <free>
    phost->pActiveClass->pData = 0U;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009c26:	2200      	movs	r2, #0
 8009c28:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	3340      	adds	r3, #64	; 0x40
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f8b2 	bl	8009dba <GetLineCoding>
 8009c56:	4603      	mov	r3, r0
 8009c58:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8009c5a:	7bfb      	ldrb	r3, [r7, #15]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d105      	bne.n	8009c6c <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009c66:	2102      	movs	r1, #2
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	4798      	blx	r3
  }
  return status;
 8009c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
	...

08009c78 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c80:	2301      	movs	r3, #1
 8009c82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009c8e:	69db      	ldr	r3, [r3, #28]
 8009c90:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009c98:	2b04      	cmp	r3, #4
 8009c9a:	d877      	bhi.n	8009d8c <USBH_CDC_Process+0x114>
 8009c9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ca4 <USBH_CDC_Process+0x2c>)
 8009c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca2:	bf00      	nop
 8009ca4:	08009cb9 	.word	0x08009cb9
 8009ca8:	08009cbf 	.word	0x08009cbf
 8009cac:	08009cef 	.word	0x08009cef
 8009cb0:	08009d63 	.word	0x08009d63
 8009cb4:	08009d71 	.word	0x08009d71
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	73fb      	strb	r3, [r7, #15]
    break;
 8009cbc:	e06d      	b.n	8009d9a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 f897 	bl	8009df8 <SetLineCoding>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8009cce:	7bbb      	ldrb	r3, [r7, #14]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d104      	bne.n	8009cde <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8009cdc:	e058      	b.n	8009d90 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8009cde:	7bbb      	ldrb	r3, [r7, #14]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d055      	beq.n	8009d90 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2204      	movs	r2, #4
 8009ce8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8009cec:	e050      	b.n	8009d90 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	3340      	adds	r3, #64	; 0x40
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f860 	bl	8009dba <GetLineCoding>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d126      	bne.n	8009d52 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d16:	791b      	ldrb	r3, [r3, #4]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d13b      	bne.n	8009d94 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d26:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d133      	bne.n	8009d94 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d36:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d12b      	bne.n	8009d94 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d44:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d124      	bne.n	8009d94 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f95a 	bl	800a004 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8009d50:	e020      	b.n	8009d94 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8009d52:	7bbb      	ldrb	r3, [r7, #14]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d01d      	beq.n	8009d94 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	2204      	movs	r2, #4
 8009d5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8009d60:	e018      	b.n	8009d94 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f867 	bl	8009e36 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f8dc 	bl	8009f26 <CDC_ProcessReception>
    break;
 8009d6e:	e014      	b.n	8009d9a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8009d70:	2100      	movs	r1, #0
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fece 	bl	800ab14 <USBH_ClrFeature>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8009d7c:	7bbb      	ldrb	r3, [r7, #14]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10a      	bne.n	8009d98 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8009d8a:	e005      	b.n	8009d98 <USBH_CDC_Process+0x120>

  default:
    break;
 8009d8c:	bf00      	nop
 8009d8e:	e004      	b.n	8009d9a <USBH_CDC_Process+0x122>
    break;
 8009d90:	bf00      	nop
 8009d92:	e002      	b.n	8009d9a <USBH_CDC_Process+0x122>
    break;
 8009d94:	bf00      	nop
 8009d96:	e000      	b.n	8009d9a <USBH_CDC_Process+0x122>
    break;
 8009d98:	bf00      	nop

  }

  return status;
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b082      	sub	sp, #8
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	22a1      	movs	r2, #161	; 0xa1
 8009dc8:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2221      	movs	r2, #33	; 0x21
 8009dce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2207      	movs	r2, #7
 8009de0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	2207      	movs	r2, #7
 8009de6:	4619      	mov	r1, r3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f001 f873 	bl	800aed4 <USBH_CtlReq>
 8009dee:	4603      	mov	r3, r0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2221      	movs	r2, #33	; 0x21
 8009e06:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2220      	movs	r2, #32
 8009e0c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2207      	movs	r2, #7
 8009e1e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	2207      	movs	r2, #7
 8009e24:	4619      	mov	r1, r3
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f001 f854 	bl	800aed4 <USBH_CtlReq>
 8009e2c:	4603      	mov	r3, r0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b086      	sub	sp, #24
 8009e3a:	af02      	add	r7, sp, #8
 8009e3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d002      	beq.n	8009e5c <CDC_ProcessTransmission+0x26>
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d025      	beq.n	8009ea6 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8009e5a:	e060      	b.n	8009f1e <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	8b12      	ldrh	r2, [r2, #24]
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d90c      	bls.n	8009e82 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	69d9      	ldr	r1, [r3, #28]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	8b1a      	ldrh	r2, [r3, #24]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	7b58      	ldrb	r0, [r3, #13]
 8009e74:	2301      	movs	r3, #1
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	4603      	mov	r3, r0
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f001 fa3b 	bl	800b2f6 <USBH_BulkSendData>
 8009e80:	e00c      	b.n	8009e9c <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	7b58      	ldrb	r0, [r3, #13]
 8009e90:	2301      	movs	r3, #1
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	4603      	mov	r3, r0
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f001 fa2d 	bl	800b2f6 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8009ea4:	e03b      	b.n	8009f1e <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	7b5b      	ldrb	r3, [r3, #13]
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f001 fd4d 	bl	800b94c <USBH_LL_GetURBState>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8009eb6:	7afb      	ldrb	r3, [r7, #11]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d128      	bne.n	8009f0e <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	8b12      	ldrh	r2, [r2, #24]
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d90e      	bls.n	8009ee6 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	8b12      	ldrh	r2, [r2, #24]
 8009ed0:	1a9a      	subs	r2, r3, r2
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	69db      	ldr	r3, [r3, #28]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	8b12      	ldrh	r2, [r2, #24]
 8009ede:	441a      	add	r2, r3
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	61da      	str	r2, [r3, #28]
 8009ee4:	e002      	b.n	8009eec <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d004      	beq.n	8009efe <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8009efc:	e00e      	b.n	8009f1c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f868 	bl	8009fdc <USBH_CDC_TransmitCallback>
    break;
 8009f0c:	e006      	b.n	8009f1c <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8009f0e:	7afb      	ldrb	r3, [r7, #11]
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d103      	bne.n	8009f1c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8009f1c:	bf00      	nop
  }
}
 8009f1e:	bf00      	nop
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b086      	sub	sp, #24
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009f34:	69db      	ldr	r3, [r3, #28]
 8009f36:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009f42:	2b03      	cmp	r3, #3
 8009f44:	d002      	beq.n	8009f4c <CDC_ProcessReception+0x26>
 8009f46:	2b04      	cmp	r3, #4
 8009f48:	d00e      	beq.n	8009f68 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8009f4a:	e043      	b.n	8009fd4 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	6a19      	ldr	r1, [r3, #32]
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	8b5a      	ldrh	r2, [r3, #26]
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	7b1b      	ldrb	r3, [r3, #12]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f001 f9f1 	bl	800b340 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	2204      	movs	r2, #4
 8009f62:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8009f66:	e035      	b.n	8009fd4 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	7b1b      	ldrb	r3, [r3, #12]
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f001 fcec 	bl	800b94c <USBH_LL_GetURBState>
 8009f74:	4603      	mov	r3, r0
 8009f76:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8009f78:	7cfb      	ldrb	r3, [r7, #19]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d129      	bne.n	8009fd2 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	7b1b      	ldrb	r3, [r3, #12]
 8009f82:	4619      	mov	r1, r3
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f001 fc4f 	bl	800b828 <USBH_LL_GetLastXferSize>
 8009f8a:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d016      	beq.n	8009fc4 <CDC_ProcessReception+0x9e>
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	8b5b      	ldrh	r3, [r3, #26]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d910      	bls.n	8009fc4 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	1ad2      	subs	r2, r2, r3
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	6a1a      	ldr	r2, [r3, #32]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	441a      	add	r2, r3
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2203      	movs	r2, #3
 8009fbe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8009fc2:	e006      	b.n	8009fd2 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f80f 	bl	8009ff0 <USBH_CDC_ReceiveCallback>
    break;
 8009fd2:	bf00      	nop
  }
}
 8009fd4:	bf00      	nop
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]

}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]

}
 8009ff8:	bf00      	nop
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]

}
 800a00c:	bf00      	nop
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	4613      	mov	r3, r2
 800a024:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d101      	bne.n	800a030 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a02c:	2302      	movs	r3, #2
 800a02e:	e019      	b.n	800a064 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	79fa      	ldrb	r2, [r7, #7]
 800a034:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f000 f80f 	bl	800a06c <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d003      	beq.n	800a05c <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f001 fb31 	bl	800b6c4 <USBH_LL_Init>

  return USBH_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a074:	2300      	movs	r3, #0
 800a076:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800a078:	e008      	b.n	800a08c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	32e0      	adds	r2, #224	; 0xe0
 800a080:	2100      	movs	r1, #0
 800a082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	3301      	adds	r3, #1
 800a08a:	60fb      	str	r3, [r7, #12]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2b0e      	cmp	r3, #14
 800a090:	d9f3      	bls.n	800a07a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800a092:	2300      	movs	r3, #0
 800a094:	60fb      	str	r3, [r7, #12]
 800a096:	e009      	b.n	800a0ac <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	4413      	add	r3, r2
 800a09e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	60fb      	str	r3, [r7, #12]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0b2:	d3f1      	bcc.n	800a098 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2240      	movs	r2, #64	; 0x40
 800a0d8:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3714      	adds	r7, #20
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b085      	sub	sp, #20
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d017      	beq.n	800a142 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10f      	bne.n	800a13c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a122:	1c59      	adds	r1, r3, #1
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	33dc      	adds	r3, #220	; 0xdc
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	683a      	ldr	r2, [r7, #0]
 800a134:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800a136:	2300      	movs	r3, #0
 800a138:	73fb      	strb	r3, [r7, #15]
 800a13a:	e004      	b.n	800a146 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a13c:	2302      	movs	r3, #2
 800a13e:	73fb      	strb	r3, [r7, #15]
 800a140:	e001      	b.n	800a146 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a142:	2302      	movs	r3, #2
 800a144:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a146:	7bfb      	ldrb	r3, [r7, #15]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	460b      	mov	r3, r1
 800a15e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800a16a:	78fa      	ldrb	r2, [r7, #3]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d204      	bcs.n	800a17a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	78fa      	ldrb	r2, [r7, #3]
 800a174:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800a178:	e001      	b.n	800a17e <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a17a:	2302      	movs	r3, #2
 800a17c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	4608      	mov	r0, r1
 800a196:	4611      	mov	r1, r2
 800a198:	461a      	mov	r2, r3
 800a19a:	4603      	mov	r3, r0
 800a19c:	70fb      	strb	r3, [r7, #3]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	70bb      	strb	r3, [r7, #2]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800a1b4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a1b6:	e025      	b.n	800a204 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a1b8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ba:	221a      	movs	r2, #26
 800a1bc:	fb02 f303 	mul.w	r3, r2, r3
 800a1c0:	3308      	adds	r3, #8
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	3302      	adds	r3, #2
 800a1c8:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	795b      	ldrb	r3, [r3, #5]
 800a1ce:	78fa      	ldrb	r2, [r7, #3]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d002      	beq.n	800a1da <USBH_FindInterface+0x4e>
 800a1d4:	78fb      	ldrb	r3, [r7, #3]
 800a1d6:	2bff      	cmp	r3, #255	; 0xff
 800a1d8:	d111      	bne.n	800a1fe <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800a1de:	78ba      	ldrb	r2, [r7, #2]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d002      	beq.n	800a1ea <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800a1e4:	78bb      	ldrb	r3, [r7, #2]
 800a1e6:	2bff      	cmp	r3, #255	; 0xff
 800a1e8:	d109      	bne.n	800a1fe <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800a1ee:	787a      	ldrb	r2, [r7, #1]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d002      	beq.n	800a1fa <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a1f4:	787b      	ldrb	r3, [r7, #1]
 800a1f6:	2bff      	cmp	r3, #255	; 0xff
 800a1f8:	d101      	bne.n	800a1fe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a1fa:	7dfb      	ldrb	r3, [r7, #23]
 800a1fc:	e006      	b.n	800a20c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a1fe:	7dfb      	ldrb	r3, [r7, #23]
 800a200:	3301      	adds	r3, #1
 800a202:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a204:	7dfb      	ldrb	r3, [r7, #23]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d9d6      	bls.n	800a1b8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a20a:	23ff      	movs	r3, #255	; 0xff
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	371c      	adds	r7, #28
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f001 fa8b 	bl	800b73c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800a226:	2101      	movs	r1, #1
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f001 fba2 	bl	800b972 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b088      	sub	sp, #32
 800a23c:	af04      	add	r7, sp, #16
 800a23e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a240:	2302      	movs	r3, #2
 800a242:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a244:	2300      	movs	r3, #0
 800a246:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 faec 	bl	800a826 <USBH_IsPortEnabled>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10c      	bne.n	800a26e <USBH_Process+0x36>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d007      	beq.n	800a26e <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	b2db      	uxtb	r3, r3
 800a264:	2b03      	cmp	r3, #3
 800a266:	d002      	beq.n	800a26e <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2203      	movs	r2, #3
 800a26c:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	b2db      	uxtb	r3, r3
 800a274:	2b0b      	cmp	r3, #11
 800a276:	f200 814c 	bhi.w	800a512 <USBH_Process+0x2da>
 800a27a:	a201      	add	r2, pc, #4	; (adr r2, 800a280 <USBH_Process+0x48>)
 800a27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a280:	0800a2b1 	.word	0x0800a2b1
 800a284:	0800a2d3 	.word	0x0800a2d3
 800a288:	0800a2e7 	.word	0x0800a2e7
 800a28c:	0800a4ed 	.word	0x0800a4ed
 800a290:	0800a513 	.word	0x0800a513
 800a294:	0800a375 	.word	0x0800a375
 800a298:	0800a4a3 	.word	0x0800a4a3
 800a29c:	0800a3a5 	.word	0x0800a3a5
 800a2a0:	0800a3c5 	.word	0x0800a3c5
 800a2a4:	0800a3e5 	.word	0x0800a3e5
 800a2a8:	0800a413 	.word	0x0800a413
 800a2ac:	0800a4d5 	.word	0x0800a4d5
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f000 812c 	beq.w	800a516 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800a2c4:	20c8      	movs	r0, #200	; 0xc8
 800a2c6:	f001 fb9e 	bl	800ba06 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f001 fa91 	bl	800b7f2 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800a2d0:	e121      	b.n	800a516 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	f040 811e 	bne.w	800a51a <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2202      	movs	r2, #2
 800a2e2:	701a      	strb	r2, [r3, #0]
    }
    break;
 800a2e4:	e119      	b.n	800a51a <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800a2e6:	2064      	movs	r0, #100	; 0x64
 800a2e8:	f001 fb8d 	bl	800ba06 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f001 fa5b 	bl	800b7a8 <USBH_LL_GetSpeed>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2205      	movs	r2, #5
 800a300:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800a302:	2100      	movs	r1, #0
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f001 f868 	bl	800b3da <USBH_AllocPipe>
 800a30a:	4603      	mov	r3, r0
 800a30c:	461a      	mov	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800a312:	2180      	movs	r1, #128	; 0x80
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f001 f860 	bl	800b3da <USBH_AllocPipe>
 800a31a:	4603      	mov	r3, r0
 800a31c:	461a      	mov	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	7919      	ldrb	r1, [r3, #4]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800a336:	b292      	uxth	r2, r2
 800a338:	9202      	str	r2, [sp, #8]
 800a33a:	2200      	movs	r2, #0
 800a33c:	9201      	str	r2, [sp, #4]
 800a33e:	9300      	str	r3, [sp, #0]
 800a340:	4603      	mov	r3, r0
 800a342:	2280      	movs	r2, #128	; 0x80
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f001 f819 	bl	800b37c <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	7959      	ldrb	r1, [r3, #5]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800a35e:	b292      	uxth	r2, r2
 800a360:	9202      	str	r2, [sp, #8]
 800a362:	2200      	movs	r2, #0
 800a364:	9201      	str	r2, [sp, #4]
 800a366:	9300      	str	r3, [sp, #0]
 800a368:	4603      	mov	r3, r0
 800a36a:	2200      	movs	r2, #0
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f001 f805 	bl	800b37c <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800a372:	e0e3      	b.n	800a53c <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 f8e7 	bl	800a548 <USBH_HandleEnum>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f040 80ce 	bne.w	800a51e <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800a390:	2b01      	cmp	r3, #1
 800a392:	d103      	bne.n	800a39c <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2208      	movs	r2, #8
 800a398:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800a39a:	e0c0      	b.n	800a51e <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2207      	movs	r2, #7
 800a3a0:	701a      	strb	r2, [r3, #0]
    break;
 800a3a2:	e0bc      	b.n	800a51e <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f000 80b9 	beq.w	800a522 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a3b6:	2101      	movs	r1, #1
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2208      	movs	r2, #8
 800a3c0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a3c2:	e0ae      	b.n	800a522 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fb59 	bl	800aa86 <USBH_SetCfg>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f040 80a5 	bne.w	800a526 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2209      	movs	r2, #9
 800a3e0:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800a3e2:	e0a0      	b.n	800a526 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800a3ea:	f003 0320 	and.w	r3, r3, #32
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00b      	beq.n	800a40a <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a3f2:	2101      	movs	r1, #1
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 fb69 	bl	800aacc <USBH_SetFeature>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f040 8094 	bne.w	800a52a <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	220a      	movs	r2, #10
 800a406:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800a408:	e08f      	b.n	800a52a <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	220a      	movs	r2, #10
 800a40e:	701a      	strb	r2, [r3, #0]
    break;
 800a410:	e08b      	b.n	800a52a <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f000 8088 	beq.w	800a52e <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a426:	2300      	movs	r3, #0
 800a428:	73fb      	strb	r3, [r7, #15]
 800a42a:	e017      	b.n	800a45c <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a42c:	7bfb      	ldrb	r3, [r7, #15]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	33dc      	adds	r3, #220	; 0xdc
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	4413      	add	r3, r2
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	791a      	ldrb	r2, [r3, #4]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800a440:	429a      	cmp	r2, r3
 800a442:	d108      	bne.n	800a456 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 800a444:	7bfb      	ldrb	r3, [r7, #15]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	33dc      	adds	r3, #220	; 0xdc
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	685a      	ldr	r2, [r3, #4]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a456:	7bfb      	ldrb	r3, [r7, #15]
 800a458:	3301      	adds	r3, #1
 800a45a:	73fb      	strb	r3, [r7, #15]
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d0e4      	beq.n	800a42c <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d016      	beq.n	800a49a <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	4798      	blx	r3
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d109      	bne.n	800a492 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2206      	movs	r2, #6
 800a482:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a48a:	2103      	movs	r1, #3
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800a490:	e04d      	b.n	800a52e <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	220d      	movs	r2, #13
 800a496:	701a      	strb	r2, [r3, #0]
    break;
 800a498:	e049      	b.n	800a52e <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	220d      	movs	r2, #13
 800a49e:	701a      	strb	r2, [r3, #0]
    break;
 800a4a0:	e045      	b.n	800a52e <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00f      	beq.n	800a4cc <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	4798      	blx	r3
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800a4bc:	7bbb      	ldrb	r3, [r7, #14]
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d136      	bne.n	800a532 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	220b      	movs	r2, #11
 800a4c8:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800a4ca:	e032      	b.n	800a532 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	220d      	movs	r2, #13
 800a4d0:	701a      	strb	r2, [r3, #0]
    break;
 800a4d2:	e02e      	b.n	800a532 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d02b      	beq.n	800a536 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	4798      	blx	r3
    }
    break;
 800a4ea:	e024      	b.n	800a536 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7ff fdbd 	bl	800a06c <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01e      	beq.n	800a53a <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800a510:	e013      	b.n	800a53a <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 800a512:	bf00      	nop
 800a514:	e012      	b.n	800a53c <USBH_Process+0x304>
    break;
 800a516:	bf00      	nop
 800a518:	e010      	b.n	800a53c <USBH_Process+0x304>
    break;
 800a51a:	bf00      	nop
 800a51c:	e00e      	b.n	800a53c <USBH_Process+0x304>
    break;
 800a51e:	bf00      	nop
 800a520:	e00c      	b.n	800a53c <USBH_Process+0x304>
    break;
 800a522:	bf00      	nop
 800a524:	e00a      	b.n	800a53c <USBH_Process+0x304>
    break;
 800a526:	bf00      	nop
 800a528:	e008      	b.n	800a53c <USBH_Process+0x304>
    break;
 800a52a:	bf00      	nop
 800a52c:	e006      	b.n	800a53c <USBH_Process+0x304>
    break;
 800a52e:	bf00      	nop
 800a530:	e004      	b.n	800a53c <USBH_Process+0x304>
    break;
 800a532:	bf00      	nop
 800a534:	e002      	b.n	800a53c <USBH_Process+0x304>
    break;
 800a536:	bf00      	nop
 800a538:	e000      	b.n	800a53c <USBH_Process+0x304>
    break;
 800a53a:	bf00      	nop
  }
 return USBH_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop

0800a548 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b088      	sub	sp, #32
 800a54c:	af04      	add	r7, sp, #16
 800a54e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a550:	2301      	movs	r3, #1
 800a552:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	785b      	ldrb	r3, [r3, #1]
 800a558:	2b07      	cmp	r3, #7
 800a55a:	f200 80f8 	bhi.w	800a74e <USBH_HandleEnum+0x206>
 800a55e:	a201      	add	r2, pc, #4	; (adr r2, 800a564 <USBH_HandleEnum+0x1c>)
 800a560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a564:	0800a585 	.word	0x0800a585
 800a568:	0800a5f7 	.word	0x0800a5f7
 800a56c:	0800a60f 	.word	0x0800a60f
 800a570:	0800a685 	.word	0x0800a685
 800a574:	0800a69b 	.word	0x0800a69b
 800a578:	0800a6b7 	.word	0x0800a6b7
 800a57c:	0800a6eb 	.word	0x0800a6eb
 800a580:	0800a71f 	.word	0x0800a71f
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800a584:	2108      	movs	r1, #8
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f9ad 	bl	800a8e6 <USBH_Get_DevDesc>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f040 80df 	bne.w	800a752 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	7919      	ldrb	r1, [r3, #4]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800a5b8:	b292      	uxth	r2, r2
 800a5ba:	9202      	str	r2, [sp, #8]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	9201      	str	r2, [sp, #4]
 800a5c0:	9300      	str	r3, [sp, #0]
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2280      	movs	r2, #128	; 0x80
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fed8 	bl	800b37c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	7959      	ldrb	r1, [r3, #5]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800a5e0:	b292      	uxth	r2, r2
 800a5e2:	9202      	str	r2, [sp, #8]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	9201      	str	r2, [sp, #4]
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fec4 	bl	800b37c <USBH_OpenPipe>

    }
    break;
 800a5f4:	e0ad      	b.n	800a752 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800a5f6:	2112      	movs	r1, #18
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f974 	bl	800a8e6 <USBH_Get_DevDesc>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	f040 80a8 	bne.w	800a756 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2202      	movs	r2, #2
 800a60a:	705a      	strb	r2, [r3, #1]

    }
    break;
 800a60c:	e0a3      	b.n	800a756 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800a60e:	2101      	movs	r1, #1
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fa14 	bl	800aa3e <USBH_SetAddress>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f040 809e 	bne.w	800a75a <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 800a61e:	2002      	movs	r0, #2
 800a620:	f001 f9f1 	bl	800ba06 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2203      	movs	r2, #3
 800a630:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	7919      	ldrb	r1, [r3, #4]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800a646:	b292      	uxth	r2, r2
 800a648:	9202      	str	r2, [sp, #8]
 800a64a:	2200      	movs	r2, #0
 800a64c:	9201      	str	r2, [sp, #4]
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	4603      	mov	r3, r0
 800a652:	2280      	movs	r2, #128	; 0x80
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fe91 	bl	800b37c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	7959      	ldrb	r1, [r3, #5]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800a66e:	b292      	uxth	r2, r2
 800a670:	9202      	str	r2, [sp, #8]
 800a672:	2200      	movs	r2, #0
 800a674:	9201      	str	r2, [sp, #4]
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	4603      	mov	r3, r0
 800a67a:	2200      	movs	r2, #0
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fe7d 	bl	800b37c <USBH_OpenPipe>
    }
    break;
 800a682:	e06a      	b.n	800a75a <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800a684:	2109      	movs	r1, #9
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f955 	bl	800a936 <USBH_Get_CfgDesc>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d165      	bne.n	800a75e <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2204      	movs	r2, #4
 800a696:	705a      	strb	r2, [r3, #1]
    }
    break;
 800a698:	e061      	b.n	800a75e <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f947 	bl	800a936 <USBH_Get_CfgDesc>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d159      	bne.n	800a762 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2205      	movs	r2, #5
 800a6b2:	705a      	strb	r2, [r3, #1]
    }
    break;
 800a6b4:	e055      	b.n	800a762 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d010      	beq.n	800a6e2 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800a6cc:	23ff      	movs	r3, #255	; 0xff
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 f955 	bl	800a97e <USBH_Get_StringDesc>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d145      	bne.n	800a766 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2206      	movs	r2, #6
 800a6de:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800a6e0:	e041      	b.n	800a766 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2206      	movs	r2, #6
 800a6e6:	705a      	strb	r2, [r3, #1]
    break;
 800a6e8:	e03d      	b.n	800a766 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d010      	beq.n	800a716 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800a700:	23ff      	movs	r3, #255	; 0xff
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f93b 	bl	800a97e <USBH_Get_StringDesc>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d12d      	bne.n	800a76a <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2207      	movs	r2, #7
 800a712:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800a714:	e029      	b.n	800a76a <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2207      	movs	r2, #7
 800a71a:	705a      	strb	r2, [r3, #1]
    break;
 800a71c:	e025      	b.n	800a76a <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800a724:	2b00      	cmp	r3, #0
 800a726:	d00f      	beq.n	800a748 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800a734:	23ff      	movs	r3, #255	; 0xff
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f921 	bl	800a97e <USBH_Get_StringDesc>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d115      	bne.n	800a76e <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800a746:	e012      	b.n	800a76e <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	73fb      	strb	r3, [r7, #15]
    break;
 800a74c:	e00f      	b.n	800a76e <USBH_HandleEnum+0x226>

  default:
    break;
 800a74e:	bf00      	nop
 800a750:	e00e      	b.n	800a770 <USBH_HandleEnum+0x228>
    break;
 800a752:	bf00      	nop
 800a754:	e00c      	b.n	800a770 <USBH_HandleEnum+0x228>
    break;
 800a756:	bf00      	nop
 800a758:	e00a      	b.n	800a770 <USBH_HandleEnum+0x228>
    break;
 800a75a:	bf00      	nop
 800a75c:	e008      	b.n	800a770 <USBH_HandleEnum+0x228>
    break;
 800a75e:	bf00      	nop
 800a760:	e006      	b.n	800a770 <USBH_HandleEnum+0x228>
    break;
 800a762:	bf00      	nop
 800a764:	e004      	b.n	800a770 <USBH_HandleEnum+0x228>
    break;
 800a766:	bf00      	nop
 800a768:	e002      	b.n	800a770 <USBH_HandleEnum+0x228>
    break;
 800a76a:	bf00      	nop
 800a76c:	e000      	b.n	800a770 <USBH_HandleEnum+0x228>
    break;
 800a76e:	bf00      	nop
  }
  return Status;
 800a770:	7bfb      	ldrb	r3, [r7, #15]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop

0800a77c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	683a      	ldr	r2, [r7, #0]
 800a78a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800a78e:	bf00      	nop
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b082      	sub	sp, #8
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a7a8:	1c5a      	adds	r2, r3, #1
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 f804 	bl	800a7be <USBH_HandleSof>
}
 800a7b6:	bf00      	nop
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b082      	sub	sp, #8
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	2b0b      	cmp	r3, #11
 800a7ce:	d10a      	bne.n	800a7e6 <USBH_HandleSof+0x28>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d005      	beq.n	800a7e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	4798      	blx	r3
  }
}
 800a7e6:	bf00      	nop
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b083      	sub	sp, #12
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800a7fe:	bf00      	nop
}
 800a800:	370c      	adds	r7, #12
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800a80a:	b480      	push	{r7}
 800a80c:	b083      	sub	sp, #12
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800a81a:	bf00      	nop
}
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800a826:	b480      	push	{r7}
 800a828:	b083      	sub	sp, #12
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800a834:	4618      	mov	r0, r3
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d10f      	bne.n	800a872 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a860:	2b00      	cmp	r3, #0
 800a862:	d00e      	beq.n	800a882 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a86a:	2104      	movs	r1, #4
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	4798      	blx	r3
 800a870:	e007      	b.n	800a882 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d102      	bne.n	800a882 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2202      	movs	r2, #2
 800a880:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3708      	adds	r7, #8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 ff6c 	bl	800b772 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	791b      	ldrb	r3, [r3, #4]
 800a89e:	4619      	mov	r1, r3
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fdb8 	bl	800b416 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	795b      	ldrb	r3, [r3, #5]
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 fdb2 	bl	800b416 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d005      	beq.n	800a8d0 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a8ca:	2105      	movs	r1, #5
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 ff33 	bl	800b73c <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2203      	movs	r2, #3
 800a8da:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a8dc:	2300      	movs	r3, #0
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b086      	sub	sp, #24
 800a8ea:	af02      	add	r7, sp, #8
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800a8f8:	78fb      	ldrb	r3, [r7, #3]
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	9300      	str	r3, [sp, #0]
 800a8fe:	4613      	mov	r3, r2
 800a900:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a904:	2100      	movs	r1, #0
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 f864 	bl	800a9d4 <USBH_GetDescriptor>
 800a90c:	4603      	mov	r3, r0
 800a90e:	73fb      	strb	r3, [r7, #15]
 800a910:	7bfb      	ldrb	r3, [r7, #15]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10a      	bne.n	800a92c <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f203 3022 	addw	r0, r3, #802	; 0x322
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a922:	78fa      	ldrb	r2, [r7, #3]
 800a924:	b292      	uxth	r2, r2
 800a926:	4619      	mov	r1, r3
 800a928:	f000 f918 	bl	800ab5c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800a92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800a936:	b580      	push	{r7, lr}
 800a938:	b086      	sub	sp, #24
 800a93a:	af02      	add	r7, sp, #8
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	460b      	mov	r3, r1
 800a940:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	331c      	adds	r3, #28
 800a946:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800a948:	887b      	ldrh	r3, [r7, #2]
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a952:	2100      	movs	r1, #0
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f83d 	bl	800a9d4 <USBH_GetDescriptor>
 800a95a:	4603      	mov	r3, r0
 800a95c:	72fb      	strb	r3, [r7, #11]
 800a95e:	7afb      	ldrb	r3, [r7, #11]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d107      	bne.n	800a974 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800a96a:	887a      	ldrh	r2, [r7, #2]
 800a96c:	68f9      	ldr	r1, [r7, #12]
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 f964 	bl	800ac3c <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800a974:	7afb      	ldrb	r3, [r7, #11]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b088      	sub	sp, #32
 800a982:	af02      	add	r7, sp, #8
 800a984:	60f8      	str	r0, [r7, #12]
 800a986:	607a      	str	r2, [r7, #4]
 800a988:	461a      	mov	r2, r3
 800a98a:	460b      	mov	r3, r1
 800a98c:	72fb      	strb	r3, [r7, #11]
 800a98e:	4613      	mov	r3, r2
 800a990:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800a992:	7afb      	ldrb	r3, [r7, #11]
 800a994:	b29b      	uxth	r3, r3
 800a996:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a99a:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800a9a2:	893b      	ldrh	r3, [r7, #8]
 800a9a4:	9300      	str	r3, [sp, #0]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	f000 f812 	bl	800a9d4 <USBH_GetDescriptor>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	75fb      	strb	r3, [r7, #23]
 800a9b4:	7dfb      	ldrb	r3, [r7, #23]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d107      	bne.n	800a9ca <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a9c0:	893a      	ldrh	r2, [r7, #8]
 800a9c2:	6879      	ldr	r1, [r7, #4]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f000 fa37 	bl	800ae38 <USBH_ParseStringDesc>
  }
  return status;
 800a9ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3718      	adds	r7, #24
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	607b      	str	r3, [r7, #4]
 800a9de:	460b      	mov	r3, r1
 800a9e0:	72fb      	strb	r3, [r7, #11]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	789b      	ldrb	r3, [r3, #2]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d11c      	bne.n	800aa28 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a9ee:	7afb      	ldrb	r3, [r7, #11]
 800a9f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a9f4:	b2da      	uxtb	r2, r3
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2206      	movs	r2, #6
 800a9fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	893a      	ldrh	r2, [r7, #8]
 800aa04:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aa06:	893b      	ldrh	r3, [r7, #8]
 800aa08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aa0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa10:	d104      	bne.n	800aa1c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f240 4209 	movw	r2, #1033	; 0x409
 800aa18:	829a      	strh	r2, [r3, #20]
 800aa1a:	e002      	b.n	800aa22 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	8b3a      	ldrh	r2, [r7, #24]
 800aa26:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800aa28:	8b3b      	ldrh	r3, [r7, #24]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	6879      	ldr	r1, [r7, #4]
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f000 fa50 	bl	800aed4 <USBH_CtlReq>
 800aa34:	4603      	mov	r3, r0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b082      	sub	sp, #8
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	460b      	mov	r3, r1
 800aa48:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	789b      	ldrb	r3, [r3, #2]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d10f      	bne.n	800aa72 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2205      	movs	r2, #5
 800aa5c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aa5e:	78fb      	ldrb	r3, [r7, #3]
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800aa72:	2200      	movs	r2, #0
 800aa74:	2100      	movs	r1, #0
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 fa2c 	bl	800aed4 <USBH_CtlReq>
 800aa7c:	4603      	mov	r3, r0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b082      	sub	sp, #8
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	460b      	mov	r3, r1
 800aa90:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	789b      	ldrb	r3, [r3, #2]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d10e      	bne.n	800aab8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2209      	movs	r2, #9
 800aaa4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	887a      	ldrh	r2, [r7, #2]
 800aaaa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800aab8:	2200      	movs	r2, #0
 800aaba:	2100      	movs	r1, #0
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 fa09 	bl	800aed4 <USBH_CtlReq>
 800aac2:	4603      	mov	r3, r0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	460b      	mov	r3, r1
 800aad6:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	789b      	ldrb	r3, [r3, #2]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d10f      	bne.n	800ab00 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2203      	movs	r2, #3
 800aaea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800aaec:	78fb      	ldrb	r3, [r7, #3]
 800aaee:	b29a      	uxth	r2, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ab00:	2200      	movs	r2, #0
 800ab02:	2100      	movs	r1, #0
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 f9e5 	bl	800aed4 <USBH_CtlReq>
 800ab0a:	4603      	mov	r3, r0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	789b      	ldrb	r3, [r3, #2]
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d10f      	bne.n	800ab48 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2202      	movs	r2, #2
 800ab2c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ab3a:	78fb      	ldrb	r3, [r7, #3]
 800ab3c:	b29a      	uxth	r2, r3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f9c1 	bl	800aed4 <USBH_CtlReq>
 800ab52:	4603      	mov	r3, r0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	4613      	mov	r3, r2
 800ab68:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	781a      	ldrb	r2, [r3, #0]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	785a      	ldrb	r2, [r3, #1]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	3302      	adds	r3, #2
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	3303      	adds	r3, #3
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	021b      	lsls	r3, r3, #8
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	b29a      	uxth	r2, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	791a      	ldrb	r2, [r3, #4]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	795a      	ldrb	r2, [r3, #5]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	799a      	ldrb	r2, [r3, #6]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	79da      	ldrb	r2, [r3, #7]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800abb6:	88fb      	ldrh	r3, [r7, #6]
 800abb8:	2b08      	cmp	r3, #8
 800abba:	d939      	bls.n	800ac30 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	3308      	adds	r3, #8
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	3309      	adds	r3, #9
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	b29b      	uxth	r3, r3
 800abcc:	021b      	lsls	r3, r3, #8
 800abce:	b29b      	uxth	r3, r3
 800abd0:	4313      	orrs	r3, r2
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	330a      	adds	r3, #10
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	b29a      	uxth	r2, r3
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	330b      	adds	r3, #11
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	021b      	lsls	r3, r3, #8
 800abea:	b29b      	uxth	r3, r3
 800abec:	4313      	orrs	r3, r2
 800abee:	b29a      	uxth	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	330c      	adds	r3, #12
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	330d      	adds	r3, #13
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	021b      	lsls	r3, r3, #8
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	b29a      	uxth	r2, r3
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	7b9a      	ldrb	r2, [r3, #14]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	7bda      	ldrb	r2, [r3, #15]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	7c1a      	ldrb	r2, [r3, #16]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	7c5a      	ldrb	r2, [r3, #17]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	745a      	strb	r2, [r3, #17]
  }
}
 800ac30:	bf00      	nop
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b08a      	sub	sp, #40	; 0x28
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	4613      	mov	r3, r2
 800ac48:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800ac54:	2300      	movs	r3, #0
 800ac56:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	781a      	ldrb	r2, [r3, #0]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	785a      	ldrb	r2, [r3, #1]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	3302      	adds	r3, #2
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	b29a      	uxth	r2, r3
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	3303      	adds	r3, #3
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	021b      	lsls	r3, r3, #8
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	4313      	orrs	r3, r2
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	791a      	ldrb	r2, [r3, #4]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	795a      	ldrb	r2, [r3, #5]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	799a      	ldrb	r2, [r3, #6]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	79da      	ldrb	r2, [r3, #7]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	7a1a      	ldrb	r2, [r3, #8]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800acb2:	88fb      	ldrh	r3, [r7, #6]
 800acb4:	2b09      	cmp	r3, #9
 800acb6:	d95f      	bls.n	800ad78 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800acb8:	2309      	movs	r3, #9
 800acba:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800acbc:	2300      	movs	r3, #0
 800acbe:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800acc0:	e051      	b.n	800ad66 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800acc2:	f107 0316 	add.w	r3, r7, #22
 800acc6:	4619      	mov	r1, r3
 800acc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800acca:	f000 f8e8 	bl	800ae9e <USBH_GetNextDesc>
 800acce:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800acd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd2:	785b      	ldrb	r3, [r3, #1]
 800acd4:	2b04      	cmp	r3, #4
 800acd6:	d146      	bne.n	800ad66 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800acd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800acdc:	221a      	movs	r2, #26
 800acde:	fb02 f303 	mul.w	r3, r2, r3
 800ace2:	3308      	adds	r3, #8
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	4413      	add	r3, r2
 800ace8:	3302      	adds	r3, #2
 800acea:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800acec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800acee:	69f8      	ldr	r0, [r7, #28]
 800acf0:	f000 f846 	bl	800ad80 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800acf4:	2300      	movs	r3, #0
 800acf6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800acfe:	e022      	b.n	800ad46 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800ad00:	f107 0316 	add.w	r3, r7, #22
 800ad04:	4619      	mov	r1, r3
 800ad06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad08:	f000 f8c9 	bl	800ae9e <USBH_GetNextDesc>
 800ad0c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad10:	785b      	ldrb	r3, [r3, #1]
 800ad12:	2b05      	cmp	r3, #5
 800ad14:	d117      	bne.n	800ad46 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ad16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ad1a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ad1e:	3201      	adds	r2, #1
 800ad20:	00d2      	lsls	r2, r2, #3
 800ad22:	211a      	movs	r1, #26
 800ad24:	fb01 f303 	mul.w	r3, r1, r3
 800ad28:	4413      	add	r3, r2
 800ad2a:	3308      	adds	r3, #8
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	4413      	add	r3, r2
 800ad30:	3304      	adds	r3, #4
 800ad32:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800ad34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad36:	69b8      	ldr	r0, [r7, #24]
 800ad38:	f000 f851 	bl	800adde <USBH_ParseEPDesc>
            ep_ix++;
 800ad3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ad40:	3301      	adds	r3, #1
 800ad42:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	791b      	ldrb	r3, [r3, #4]
 800ad4a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d204      	bcs.n	800ad5c <USBH_ParseCfgDesc+0x120>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	885a      	ldrh	r2, [r3, #2]
 800ad56:	8afb      	ldrh	r3, [r7, #22]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d8d1      	bhi.n	800ad00 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ad5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ad60:	3301      	adds	r3, #1
 800ad62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ad66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d804      	bhi.n	800ad78 <USBH_ParseCfgDesc+0x13c>
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	885a      	ldrh	r2, [r3, #2]
 800ad72:	8afb      	ldrh	r3, [r7, #22]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d8a4      	bhi.n	800acc2 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ad78:	bf00      	nop
 800ad7a:	3728      	adds	r7, #40	; 0x28
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	781a      	ldrb	r2, [r3, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	785a      	ldrb	r2, [r3, #1]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	789a      	ldrb	r2, [r3, #2]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	78da      	ldrb	r2, [r3, #3]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	791a      	ldrb	r2, [r3, #4]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	795a      	ldrb	r2, [r3, #5]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	799a      	ldrb	r2, [r3, #6]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	79da      	ldrb	r2, [r3, #7]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	7a1a      	ldrb	r2, [r3, #8]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	721a      	strb	r2, [r3, #8]
}
 800add2:	bf00      	nop
 800add4:	370c      	adds	r7, #12
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800adde:	b480      	push	{r7}
 800ade0:	b083      	sub	sp, #12
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	781a      	ldrb	r2, [r3, #0]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	785a      	ldrb	r2, [r3, #1]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	789a      	ldrb	r2, [r3, #2]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	78da      	ldrb	r2, [r3, #3]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	3304      	adds	r3, #4
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	3305      	adds	r3, #5
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	021b      	lsls	r3, r3, #8
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	799a      	ldrb	r2, [r3, #6]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	719a      	strb	r2, [r3, #6]
}
 800ae2c:	bf00      	nop
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b087      	sub	sp, #28
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	60b9      	str	r1, [r7, #8]
 800ae42:	4613      	mov	r3, r2
 800ae44:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	2b03      	cmp	r3, #3
 800ae4e:	d120      	bne.n	800ae92 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	1e9a      	subs	r2, r3, #2
 800ae56:	88fb      	ldrh	r3, [r7, #6]
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	bf28      	it	cs
 800ae5c:	4613      	movcs	r3, r2
 800ae5e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	3302      	adds	r3, #2
 800ae64:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ae66:	2300      	movs	r3, #0
 800ae68:	82fb      	strh	r3, [r7, #22]
 800ae6a:	e00b      	b.n	800ae84 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ae6c:	8afb      	ldrh	r3, [r7, #22]
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	4413      	add	r3, r2
 800ae72:	781a      	ldrb	r2, [r3, #0]
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ae7e:	8afb      	ldrh	r3, [r7, #22]
 800ae80:	3302      	adds	r3, #2
 800ae82:	82fb      	strh	r3, [r7, #22]
 800ae84:	8afa      	ldrh	r2, [r7, #22]
 800ae86:	8abb      	ldrh	r3, [r7, #20]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d3ef      	bcc.n	800ae6c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	701a      	strb	r2, [r3, #0]
  }
}
 800ae92:	bf00      	nop
 800ae94:	371c      	adds	r7, #28
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr

0800ae9e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800ae9e:	b480      	push	{r7}
 800aea0:	b085      	sub	sp, #20
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
 800aea6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	881a      	ldrh	r2, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	4413      	add	r3, r2
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4413      	add	r3, r2
 800aec4:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800aec6:	68fb      	ldr	r3, [r7, #12]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3714      	adds	r7, #20
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	4613      	mov	r3, r2
 800aee0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800aee2:	2301      	movs	r3, #1
 800aee4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	789b      	ldrb	r3, [r3, #2]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d002      	beq.n	800aef4 <USBH_CtlReq+0x20>
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d00f      	beq.n	800af12 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 800aef2:	e034      	b.n	800af5e <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	88fa      	ldrh	r2, [r7, #6]
 800aefe:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2201      	movs	r2, #1
 800af04:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2202      	movs	r2, #2
 800af0a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800af0c:	2301      	movs	r3, #1
 800af0e:	75fb      	strb	r3, [r7, #23]
    break;
 800af10:	e025      	b.n	800af5e <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f000 f828 	bl	800af68 <USBH_HandleControl>
 800af18:	4603      	mov	r3, r0
 800af1a:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800af1c:	7dfb      	ldrb	r3, [r7, #23]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d108      	bne.n	800af34 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2201      	movs	r2, #1
 800af26:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800af2e:	2300      	movs	r3, #0
 800af30:	75fb      	strb	r3, [r7, #23]
    break;
 800af32:	e013      	b.n	800af5c <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 800af34:	7dfb      	ldrb	r3, [r7, #23]
 800af36:	2b03      	cmp	r3, #3
 800af38:	d108      	bne.n	800af4c <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2201      	movs	r2, #1
 800af3e:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800af46:	2303      	movs	r3, #3
 800af48:	75fb      	strb	r3, [r7, #23]
    break;
 800af4a:	e007      	b.n	800af5c <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 800af4c:	7dfb      	ldrb	r3, [r7, #23]
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d104      	bne.n	800af5c <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2201      	movs	r2, #1
 800af56:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800af58:	2302      	movs	r3, #2
 800af5a:	75fb      	strb	r3, [r7, #23]
    break;
 800af5c:	bf00      	nop
  }
  return status;
 800af5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3718      	adds	r7, #24
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af02      	add	r7, sp, #8
 800af6e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800af70:	2301      	movs	r3, #1
 800af72:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800af74:	2300      	movs	r3, #0
 800af76:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	7e1b      	ldrb	r3, [r3, #24]
 800af7c:	3b01      	subs	r3, #1
 800af7e:	2b0a      	cmp	r3, #10
 800af80:	f200 814c 	bhi.w	800b21c <USBH_HandleControl+0x2b4>
 800af84:	a201      	add	r2, pc, #4	; (adr r2, 800af8c <USBH_HandleControl+0x24>)
 800af86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8a:	bf00      	nop
 800af8c:	0800afb9 	.word	0x0800afb9
 800af90:	0800afd3 	.word	0x0800afd3
 800af94:	0800b03d 	.word	0x0800b03d
 800af98:	0800b063 	.word	0x0800b063
 800af9c:	0800b09b 	.word	0x0800b09b
 800afa0:	0800b0c7 	.word	0x0800b0c7
 800afa4:	0800b119 	.word	0x0800b119
 800afa8:	0800b13b 	.word	0x0800b13b
 800afac:	0800b177 	.word	0x0800b177
 800afb0:	0800b19f 	.word	0x0800b19f
 800afb4:	0800b1dd 	.word	0x0800b1dd
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f103 0110 	add.w	r1, r3, #16
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	795b      	ldrb	r3, [r3, #5]
 800afc2:	461a      	mov	r2, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 f939 	bl	800b23c <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2202      	movs	r2, #2
 800afce:	761a      	strb	r2, [r3, #24]
    break;
 800afd0:	e12f      	b.n	800b232 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	795b      	ldrb	r3, [r3, #5]
 800afd6:	4619      	mov	r1, r3
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fcb7 	bl	800b94c <USBH_LL_GetURBState>
 800afde:	4603      	mov	r3, r0
 800afe0:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800afe2:	7bbb      	ldrb	r3, [r7, #14]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d11e      	bne.n	800b026 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	7c1b      	ldrb	r3, [r3, #16]
 800afec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aff0:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	8adb      	ldrh	r3, [r3, #22]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00a      	beq.n	800b010 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800affa:	7b7b      	ldrb	r3, [r7, #13]
 800affc:	2b80      	cmp	r3, #128	; 0x80
 800affe:	d103      	bne.n	800b008 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2203      	movs	r2, #3
 800b004:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b006:	e10b      	b.n	800b220 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2205      	movs	r2, #5
 800b00c:	761a      	strb	r2, [r3, #24]
    break;
 800b00e:	e107      	b.n	800b220 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 800b010:	7b7b      	ldrb	r3, [r7, #13]
 800b012:	2b80      	cmp	r3, #128	; 0x80
 800b014:	d103      	bne.n	800b01e <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2209      	movs	r2, #9
 800b01a:	761a      	strb	r2, [r3, #24]
    break;
 800b01c:	e100      	b.n	800b220 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2207      	movs	r2, #7
 800b022:	761a      	strb	r2, [r3, #24]
    break;
 800b024:	e0fc      	b.n	800b220 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b026:	7bbb      	ldrb	r3, [r7, #14]
 800b028:	2b04      	cmp	r3, #4
 800b02a:	d003      	beq.n	800b034 <USBH_HandleControl+0xcc>
 800b02c:	7bbb      	ldrb	r3, [r7, #14]
 800b02e:	2b02      	cmp	r3, #2
 800b030:	f040 80f6 	bne.w	800b220 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	220b      	movs	r2, #11
 800b038:	761a      	strb	r2, [r3, #24]
    break;
 800b03a:	e0f1      	b.n	800b220 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800b042:	b29a      	uxth	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6899      	ldr	r1, [r3, #8]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	899a      	ldrh	r2, [r3, #12]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	791b      	ldrb	r3, [r3, #4]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f930 	bl	800b2ba <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2204      	movs	r2, #4
 800b05e:	761a      	strb	r2, [r3, #24]
    break;
 800b060:	e0e7      	b.n	800b232 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	791b      	ldrb	r3, [r3, #4]
 800b066:	4619      	mov	r1, r3
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 fc6f 	bl	800b94c <USBH_LL_GetURBState>
 800b06e:	4603      	mov	r3, r0
 800b070:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800b072:	7bbb      	ldrb	r3, [r7, #14]
 800b074:	2b01      	cmp	r3, #1
 800b076:	d102      	bne.n	800b07e <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2209      	movs	r2, #9
 800b07c:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800b07e:	7bbb      	ldrb	r3, [r7, #14]
 800b080:	2b05      	cmp	r3, #5
 800b082:	d102      	bne.n	800b08a <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800b084:	2303      	movs	r3, #3
 800b086:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b088:	e0cc      	b.n	800b224 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 800b08a:	7bbb      	ldrb	r3, [r7, #14]
 800b08c:	2b04      	cmp	r3, #4
 800b08e:	f040 80c9 	bne.w	800b224 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	220b      	movs	r2, #11
 800b096:	761a      	strb	r2, [r3, #24]
    break;
 800b098:	e0c4      	b.n	800b224 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6899      	ldr	r1, [r3, #8]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	899a      	ldrh	r2, [r3, #12]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	7958      	ldrb	r0, [r3, #5]
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 f8df 	bl	800b270 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2206      	movs	r2, #6
 800b0c2:	761a      	strb	r2, [r3, #24]
    break;
 800b0c4:	e0b5      	b.n	800b232 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	795b      	ldrb	r3, [r3, #5]
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fc3d 	bl	800b94c <USBH_LL_GetURBState>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800b0d6:	7bbb      	ldrb	r3, [r7, #14]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d103      	bne.n	800b0e4 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2207      	movs	r2, #7
 800b0e0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b0e2:	e0a1      	b.n	800b228 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
 800b0e6:	2b05      	cmp	r3, #5
 800b0e8:	d105      	bne.n	800b0f6 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	220c      	movs	r2, #12
 800b0ee:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b0f4:	e098      	b.n	800b228 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800b0f6:	7bbb      	ldrb	r3, [r7, #14]
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	d103      	bne.n	800b104 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2205      	movs	r2, #5
 800b100:	761a      	strb	r2, [r3, #24]
    break;
 800b102:	e091      	b.n	800b228 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 800b104:	7bbb      	ldrb	r3, [r7, #14]
 800b106:	2b04      	cmp	r3, #4
 800b108:	f040 808e 	bne.w	800b228 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	220b      	movs	r2, #11
 800b110:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800b112:	2302      	movs	r3, #2
 800b114:	73fb      	strb	r3, [r7, #15]
    break;
 800b116:	e087      	b.n	800b228 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	791b      	ldrb	r3, [r3, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	2100      	movs	r1, #0
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 f8ca 	bl	800b2ba <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800b12c:	b29a      	uxth	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2208      	movs	r2, #8
 800b136:	761a      	strb	r2, [r3, #24]

    break;
 800b138:	e07b      	b.n	800b232 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	791b      	ldrb	r3, [r3, #4]
 800b13e:	4619      	mov	r1, r3
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fc03 	bl	800b94c <USBH_LL_GetURBState>
 800b146:	4603      	mov	r3, r0
 800b148:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800b14a:	7bbb      	ldrb	r3, [r7, #14]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d105      	bne.n	800b15c <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	220d      	movs	r2, #13
 800b154:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800b156:	2300      	movs	r3, #0
 800b158:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b15a:	e067      	b.n	800b22c <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 800b15c:	7bbb      	ldrb	r3, [r7, #14]
 800b15e:	2b04      	cmp	r3, #4
 800b160:	d103      	bne.n	800b16a <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	220b      	movs	r2, #11
 800b166:	761a      	strb	r2, [r3, #24]
    break;
 800b168:	e060      	b.n	800b22c <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 800b16a:	7bbb      	ldrb	r3, [r7, #14]
 800b16c:	2b05      	cmp	r3, #5
 800b16e:	d15d      	bne.n	800b22c <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800b170:	2303      	movs	r3, #3
 800b172:	73fb      	strb	r3, [r7, #15]
    break;
 800b174:	e05a      	b.n	800b22c <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	795a      	ldrb	r2, [r3, #5]
 800b17a:	2301      	movs	r3, #1
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	4613      	mov	r3, r2
 800b180:	2200      	movs	r2, #0
 800b182:	2100      	movs	r1, #0
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 f873 	bl	800b270 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800b190:	b29a      	uxth	r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	220a      	movs	r2, #10
 800b19a:	761a      	strb	r2, [r3, #24]
    break;
 800b19c:	e049      	b.n	800b232 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	795b      	ldrb	r3, [r3, #5]
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fbd1 	bl	800b94c <USBH_LL_GetURBState>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800b1ae:	7bbb      	ldrb	r3, [r7, #14]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d105      	bne.n	800b1c0 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	220d      	movs	r2, #13
 800b1bc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800b1be:	e037      	b.n	800b230 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800b1c0:	7bbb      	ldrb	r3, [r7, #14]
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d103      	bne.n	800b1ce <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2209      	movs	r2, #9
 800b1ca:	761a      	strb	r2, [r3, #24]
    break;
 800b1cc:	e030      	b.n	800b230 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800b1ce:	7bbb      	ldrb	r3, [r7, #14]
 800b1d0:	2b04      	cmp	r3, #4
 800b1d2:	d12d      	bne.n	800b230 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	220b      	movs	r2, #11
 800b1d8:	761a      	strb	r2, [r3, #24]
    break;
 800b1da:	e029      	b.n	800b230 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	7e5b      	ldrb	r3, [r3, #25]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	b2da      	uxtb	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	765a      	strb	r2, [r3, #25]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	7e5b      	ldrb	r3, [r3, #25]
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	d809      	bhi.n	800b204 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fabe 	bl	800b772 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800b202:	e016      	b.n	800b232 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b20a:	2106      	movs	r1, #6
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800b216:	2302      	movs	r3, #2
 800b218:	73fb      	strb	r3, [r7, #15]
    break;
 800b21a:	e00a      	b.n	800b232 <USBH_HandleControl+0x2ca>

  default:
    break;
 800b21c:	bf00      	nop
 800b21e:	e008      	b.n	800b232 <USBH_HandleControl+0x2ca>
    break;
 800b220:	bf00      	nop
 800b222:	e006      	b.n	800b232 <USBH_HandleControl+0x2ca>
    break;
 800b224:	bf00      	nop
 800b226:	e004      	b.n	800b232 <USBH_HandleControl+0x2ca>
    break;
 800b228:	bf00      	nop
 800b22a:	e002      	b.n	800b232 <USBH_HandleControl+0x2ca>
    break;
 800b22c:	bf00      	nop
 800b22e:	e000      	b.n	800b232 <USBH_HandleControl+0x2ca>
    break;
 800b230:	bf00      	nop
  }
  return status;
 800b232:	7bfb      	ldrb	r3, [r7, #15]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b088      	sub	sp, #32
 800b240:	af04      	add	r7, sp, #16
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	4613      	mov	r3, r2
 800b248:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800b24a:	79f9      	ldrb	r1, [r7, #7]
 800b24c:	2300      	movs	r3, #0
 800b24e:	9303      	str	r3, [sp, #12]
 800b250:	2308      	movs	r3, #8
 800b252:	9302      	str	r3, [sp, #8]
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	9301      	str	r3, [sp, #4]
 800b258:	2300      	movs	r3, #0
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	2300      	movs	r3, #0
 800b25e:	2200      	movs	r2, #0
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f000 fb42 	bl	800b8ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b088      	sub	sp, #32
 800b274:	af04      	add	r7, sp, #16
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	4611      	mov	r1, r2
 800b27c:	461a      	mov	r2, r3
 800b27e:	460b      	mov	r3, r1
 800b280:	80fb      	strh	r3, [r7, #6]
 800b282:	4613      	mov	r3, r2
 800b284:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d001      	beq.n	800b294 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b290:	2300      	movs	r3, #0
 800b292:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800b294:	7979      	ldrb	r1, [r7, #5]
 800b296:	7e3b      	ldrb	r3, [r7, #24]
 800b298:	9303      	str	r3, [sp, #12]
 800b29a:	88fb      	ldrh	r3, [r7, #6]
 800b29c:	9302      	str	r3, [sp, #8]
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	9301      	str	r3, [sp, #4]
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	f000 fb1d 	bl	800b8ea <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b088      	sub	sp, #32
 800b2be:	af04      	add	r7, sp, #16
 800b2c0:	60f8      	str	r0, [r7, #12]
 800b2c2:	60b9      	str	r1, [r7, #8]
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	80fb      	strh	r3, [r7, #6]
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800b2d0:	7979      	ldrb	r1, [r7, #5]
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	9303      	str	r3, [sp, #12]
 800b2d6:	88fb      	ldrh	r3, [r7, #6]
 800b2d8:	9302      	str	r3, [sp, #8]
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	9301      	str	r3, [sp, #4]
 800b2de:	2301      	movs	r3, #1
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	f000 faff 	bl	800b8ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b2ec:	2300      	movs	r3, #0

}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b088      	sub	sp, #32
 800b2fa:	af04      	add	r7, sp, #16
 800b2fc:	60f8      	str	r0, [r7, #12]
 800b2fe:	60b9      	str	r1, [r7, #8]
 800b300:	4611      	mov	r1, r2
 800b302:	461a      	mov	r2, r3
 800b304:	460b      	mov	r3, r1
 800b306:	80fb      	strh	r3, [r7, #6]
 800b308:	4613      	mov	r3, r2
 800b30a:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b316:	2300      	movs	r3, #0
 800b318:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800b31a:	7979      	ldrb	r1, [r7, #5]
 800b31c:	7e3b      	ldrb	r3, [r7, #24]
 800b31e:	9303      	str	r3, [sp, #12]
 800b320:	88fb      	ldrh	r3, [r7, #6]
 800b322:	9302      	str	r3, [sp, #8]
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	9301      	str	r3, [sp, #4]
 800b328:	2301      	movs	r3, #1
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	2302      	movs	r3, #2
 800b32e:	2200      	movs	r2, #0
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f000 fada 	bl	800b8ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b088      	sub	sp, #32
 800b344:	af04      	add	r7, sp, #16
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	4611      	mov	r1, r2
 800b34c:	461a      	mov	r2, r3
 800b34e:	460b      	mov	r3, r1
 800b350:	80fb      	strh	r3, [r7, #6]
 800b352:	4613      	mov	r3, r2
 800b354:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800b356:	7979      	ldrb	r1, [r7, #5]
 800b358:	2300      	movs	r3, #0
 800b35a:	9303      	str	r3, [sp, #12]
 800b35c:	88fb      	ldrh	r3, [r7, #6]
 800b35e:	9302      	str	r3, [sp, #8]
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	9301      	str	r3, [sp, #4]
 800b364:	2301      	movs	r3, #1
 800b366:	9300      	str	r3, [sp, #0]
 800b368:	2302      	movs	r3, #2
 800b36a:	2201      	movs	r2, #1
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f000 fabc 	bl	800b8ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b372:	2300      	movs	r3, #0
}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af04      	add	r7, sp, #16
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	4608      	mov	r0, r1
 800b386:	4611      	mov	r1, r2
 800b388:	461a      	mov	r2, r3
 800b38a:	4603      	mov	r3, r0
 800b38c:	70fb      	strb	r3, [r7, #3]
 800b38e:	460b      	mov	r3, r1
 800b390:	70bb      	strb	r3, [r7, #2]
 800b392:	4613      	mov	r3, r2
 800b394:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800b396:	7878      	ldrb	r0, [r7, #1]
 800b398:	78ba      	ldrb	r2, [r7, #2]
 800b39a:	78f9      	ldrb	r1, [r7, #3]
 800b39c:	8b3b      	ldrh	r3, [r7, #24]
 800b39e:	9302      	str	r3, [sp, #8]
 800b3a0:	7d3b      	ldrb	r3, [r7, #20]
 800b3a2:	9301      	str	r3, [sp, #4]
 800b3a4:	7c3b      	ldrb	r3, [r7, #16]
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fa4f 	bl	800b84e <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800b3b0:	2300      	movs	r3, #0

}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3708      	adds	r7, #8
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b082      	sub	sp, #8
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800b3c6:	78fb      	ldrb	r3, [r7, #3]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 fa6e 	bl	800b8ac <USBH_LL_ClosePipe>

  return USBH_OK;
 800b3d0:	2300      	movs	r3, #0

}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b084      	sub	sp, #16
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f831 	bl	800b44e <USBH_GetFreePipe>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b3f0:	89fb      	ldrh	r3, [r7, #14]
 800b3f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d007      	beq.n	800b40a <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800b3fa:	78fb      	ldrb	r3, [r7, #3]
 800b3fc:	89fa      	ldrh	r2, [r7, #14]
 800b3fe:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	32e0      	adds	r2, #224	; 0xe0
 800b406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800b40a:	89fb      	ldrh	r3, [r7, #14]
 800b40c:	b2db      	uxtb	r3, r3
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b416:	b480      	push	{r7}
 800b418:	b083      	sub	sp, #12
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
 800b41e:	460b      	mov	r3, r1
 800b420:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800b422:	78fb      	ldrb	r3, [r7, #3]
 800b424:	2b0a      	cmp	r3, #10
 800b426:	d80b      	bhi.n	800b440 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800b428:	78fa      	ldrb	r2, [r7, #3]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	32e0      	adds	r2, #224	; 0xe0
 800b42e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b432:	78fa      	ldrb	r2, [r7, #3]
 800b434:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	32e0      	adds	r2, #224	; 0xe0
 800b43c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800b440:	2300      	movs	r3, #0
}
 800b442:	4618      	mov	r0, r3
 800b444:	370c      	adds	r7, #12
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr

0800b44e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800b44e:	b480      	push	{r7}
 800b450:	b085      	sub	sp, #20
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b456:	2300      	movs	r3, #0
 800b458:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b45a:	2300      	movs	r3, #0
 800b45c:	73fb      	strb	r3, [r7, #15]
 800b45e:	e00e      	b.n	800b47e <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b460:	7bfa      	ldrb	r2, [r7, #15]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	32e0      	adds	r2, #224	; 0xe0
 800b466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b46a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d102      	bne.n	800b478 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800b472:	7bfb      	ldrb	r3, [r7, #15]
 800b474:	b29b      	uxth	r3, r3
 800b476:	e007      	b.n	800b488 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800b478:	7bfb      	ldrb	r3, [r7, #15]
 800b47a:	3301      	adds	r3, #1
 800b47c:	73fb      	strb	r3, [r7, #15]
 800b47e:	7bfb      	ldrb	r3, [r7, #15]
 800b480:	2b0a      	cmp	r3, #10
 800b482:	d9ed      	bls.n	800b460 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800b484:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b498:	2201      	movs	r2, #1
 800b49a:	490e      	ldr	r1, [pc, #56]	; (800b4d4 <MX_USB_HOST_Init+0x40>)
 800b49c:	480e      	ldr	r0, [pc, #56]	; (800b4d8 <MX_USB_HOST_Init+0x44>)
 800b49e:	f7fe fdbb 	bl	800a018 <USBH_Init>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d001      	beq.n	800b4ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b4a8:	f7f5 fd3c 	bl	8000f24 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b4ac:	490b      	ldr	r1, [pc, #44]	; (800b4dc <MX_USB_HOST_Init+0x48>)
 800b4ae:	480a      	ldr	r0, [pc, #40]	; (800b4d8 <MX_USB_HOST_Init+0x44>)
 800b4b0:	f7fe fe25 	bl	800a0fe <USBH_RegisterClass>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d001      	beq.n	800b4be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b4ba:	f7f5 fd33 	bl	8000f24 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b4be:	4806      	ldr	r0, [pc, #24]	; (800b4d8 <MX_USB_HOST_Init+0x44>)
 800b4c0:	f7fe feaa 	bl	800a218 <USBH_Start>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d001      	beq.n	800b4ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b4ca:	f7f5 fd2b 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b4ce:	bf00      	nop
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	0800b4f5 	.word	0x0800b4f5
 800b4d8:	2000087c 	.word	0x2000087c
 800b4dc:	2000002c 	.word	0x2000002c

0800b4e0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b4e4:	4802      	ldr	r0, [pc, #8]	; (800b4f0 <MX_USB_HOST_Process+0x10>)
 800b4e6:	f7fe fea7 	bl	800a238 <USBH_Process>
}
 800b4ea:	bf00      	nop
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	2000087c 	.word	0x2000087c

0800b4f4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b500:	78fb      	ldrb	r3, [r7, #3]
 800b502:	3b01      	subs	r3, #1
 800b504:	2b04      	cmp	r3, #4
 800b506:	d819      	bhi.n	800b53c <USBH_UserProcess+0x48>
 800b508:	a201      	add	r2, pc, #4	; (adr r2, 800b510 <USBH_UserProcess+0x1c>)
 800b50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b50e:	bf00      	nop
 800b510:	0800b53d 	.word	0x0800b53d
 800b514:	0800b52d 	.word	0x0800b52d
 800b518:	0800b53d 	.word	0x0800b53d
 800b51c:	0800b535 	.word	0x0800b535
 800b520:	0800b525 	.word	0x0800b525
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b524:	4b09      	ldr	r3, [pc, #36]	; (800b54c <USBH_UserProcess+0x58>)
 800b526:	2203      	movs	r2, #3
 800b528:	701a      	strb	r2, [r3, #0]
  break;
 800b52a:	e008      	b.n	800b53e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b52c:	4b07      	ldr	r3, [pc, #28]	; (800b54c <USBH_UserProcess+0x58>)
 800b52e:	2202      	movs	r2, #2
 800b530:	701a      	strb	r2, [r3, #0]
  break;
 800b532:	e004      	b.n	800b53e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b534:	4b05      	ldr	r3, [pc, #20]	; (800b54c <USBH_UserProcess+0x58>)
 800b536:	2201      	movs	r2, #1
 800b538:	701a      	strb	r2, [r3, #0]
  break;
 800b53a:	e000      	b.n	800b53e <USBH_UserProcess+0x4a>

  default:
  break;
 800b53c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b53e:	bf00      	nop
 800b540:	370c      	adds	r7, #12
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	200004f8 	.word	0x200004f8

0800b550 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b08a      	sub	sp, #40	; 0x28
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b558:	f107 0314 	add.w	r3, r7, #20
 800b55c:	2200      	movs	r2, #0
 800b55e:	601a      	str	r2, [r3, #0]
 800b560:	605a      	str	r2, [r3, #4]
 800b562:	609a      	str	r2, [r3, #8]
 800b564:	60da      	str	r2, [r3, #12]
 800b566:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b570:	d14e      	bne.n	800b610 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b572:	4b29      	ldr	r3, [pc, #164]	; (800b618 <HAL_HCD_MspInit+0xc8>)
 800b574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b576:	4a28      	ldr	r2, [pc, #160]	; (800b618 <HAL_HCD_MspInit+0xc8>)
 800b578:	f043 0301 	orr.w	r3, r3, #1
 800b57c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b57e:	4b26      	ldr	r3, [pc, #152]	; (800b618 <HAL_HCD_MspInit+0xc8>)
 800b580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b582:	f003 0301 	and.w	r3, r3, #1
 800b586:	613b      	str	r3, [r7, #16]
 800b588:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b58a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b58e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b590:	2302      	movs	r3, #2
 800b592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b594:	2300      	movs	r3, #0
 800b596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b598:	2303      	movs	r3, #3
 800b59a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b59c:	230a      	movs	r3, #10
 800b59e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5a0:	f107 0314 	add.w	r3, r7, #20
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b5aa:	f7f7 fb65 	bl	8002c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b5ae:	4b1a      	ldr	r3, [pc, #104]	; (800b618 <HAL_HCD_MspInit+0xc8>)
 800b5b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5b2:	4a19      	ldr	r2, [pc, #100]	; (800b618 <HAL_HCD_MspInit+0xc8>)
 800b5b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b5b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b5ba:	4b17      	ldr	r3, [pc, #92]	; (800b618 <HAL_HCD_MspInit+0xc8>)
 800b5bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b5c2:	60fb      	str	r3, [r7, #12]
 800b5c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b5c6:	4b14      	ldr	r3, [pc, #80]	; (800b618 <HAL_HCD_MspInit+0xc8>)
 800b5c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d114      	bne.n	800b5fc <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b5d2:	4b11      	ldr	r3, [pc, #68]	; (800b618 <HAL_HCD_MspInit+0xc8>)
 800b5d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5d6:	4a10      	ldr	r2, [pc, #64]	; (800b618 <HAL_HCD_MspInit+0xc8>)
 800b5d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5dc:	6593      	str	r3, [r2, #88]	; 0x58
 800b5de:	4b0e      	ldr	r3, [pc, #56]	; (800b618 <HAL_HCD_MspInit+0xc8>)
 800b5e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5e6:	60bb      	str	r3, [r7, #8]
 800b5e8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800b5ea:	f7f9 ff25 	bl	8005438 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b5ee:	4b0a      	ldr	r3, [pc, #40]	; (800b618 <HAL_HCD_MspInit+0xc8>)
 800b5f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5f2:	4a09      	ldr	r2, [pc, #36]	; (800b618 <HAL_HCD_MspInit+0xc8>)
 800b5f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5f8:	6593      	str	r3, [r2, #88]	; 0x58
 800b5fa:	e001      	b.n	800b600 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800b5fc:	f7f9 ff1c 	bl	8005438 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b600:	2200      	movs	r2, #0
 800b602:	2100      	movs	r1, #0
 800b604:	2043      	movs	r0, #67	; 0x43
 800b606:	f7f7 fafc 	bl	8002c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b60a:	2043      	movs	r0, #67	; 0x43
 800b60c:	f7f7 fb15 	bl	8002c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b610:	bf00      	nop
 800b612:	3728      	adds	r7, #40	; 0x28
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	40021000 	.word	0x40021000

0800b61c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7ff f8b5 	bl	800a79a <USBH_LL_IncTimer>
}
 800b630:	bf00      	nop
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b646:	4618      	mov	r0, r3
 800b648:	f7ff f8fa 	bl	800a840 <USBH_LL_Connect>
}
 800b64c:	bf00      	nop
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b662:	4618      	mov	r0, r3
 800b664:	f7ff f912 	bl	800a88c <USBH_LL_Disconnect>
}
 800b668:	bf00      	nop
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	460b      	mov	r3, r1
 800b67a:	70fb      	strb	r3, [r7, #3]
 800b67c:	4613      	mov	r3, r2
 800b67e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b680:	bf00      	nop
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7ff f8a7 	bl	800a7ee <USBH_LL_PortEnabled>
} 
 800b6a0:	bf00      	nop
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7ff f8a7 	bl	800a80a <USBH_LL_PortDisabled>
} 
 800b6bc:	bf00      	nop
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d12a      	bne.n	800b72c <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b6d6:	4a18      	ldr	r2, [pc, #96]	; (800b738 <USBH_LL_Init+0x74>)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a15      	ldr	r2, [pc, #84]	; (800b738 <USBH_LL_Init+0x74>)
 800b6e2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b6e6:	4b14      	ldr	r3, [pc, #80]	; (800b738 <USBH_LL_Init+0x74>)
 800b6e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b6ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b6ee:	4b12      	ldr	r3, [pc, #72]	; (800b738 <USBH_LL_Init+0x74>)
 800b6f0:	2208      	movs	r2, #8
 800b6f2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b6f4:	4b10      	ldr	r3, [pc, #64]	; (800b738 <USBH_LL_Init+0x74>)
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b6fa:	4b0f      	ldr	r3, [pc, #60]	; (800b738 <USBH_LL_Init+0x74>)
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b700:	4b0d      	ldr	r3, [pc, #52]	; (800b738 <USBH_LL_Init+0x74>)
 800b702:	2202      	movs	r2, #2
 800b704:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b706:	4b0c      	ldr	r3, [pc, #48]	; (800b738 <USBH_LL_Init+0x74>)
 800b708:	2200      	movs	r2, #0
 800b70a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b70c:	480a      	ldr	r0, [pc, #40]	; (800b738 <USBH_LL_Init+0x74>)
 800b70e:	f7f7 fc8b 	bl	8003028 <HAL_HCD_Init>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d001      	beq.n	800b71c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b718:	f7f5 fc04 	bl	8000f24 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b71c:	4806      	ldr	r0, [pc, #24]	; (800b738 <USBH_LL_Init+0x74>)
 800b71e:	f7f8 f883 	bl	8003828 <HAL_HCD_GetCurrentFrame>
 800b722:	4603      	mov	r3, r0
 800b724:	4619      	mov	r1, r3
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7ff f828 	bl	800a77c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	20000c48 	.word	0x20000c48

0800b73c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b744:	2300      	movs	r3, #0
 800b746:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b748:	2300      	movs	r3, #0
 800b74a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b752:	4618      	mov	r0, r3
 800b754:	f7f7 fff0 	bl	8003738 <HAL_HCD_Start>
 800b758:	4603      	mov	r3, r0
 800b75a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b75c:	7bfb      	ldrb	r3, [r7, #15]
 800b75e:	4618      	mov	r0, r3
 800b760:	f000 f95c 	bl	800ba1c <USBH_Get_USB_Status>
 800b764:	4603      	mov	r3, r0
 800b766:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b768:	7bbb      	ldrb	r3, [r7, #14]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}

0800b772 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b084      	sub	sp, #16
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b788:	4618      	mov	r0, r3
 800b78a:	f7f7 fff8 	bl	800377e <HAL_HCD_Stop>
 800b78e:	4603      	mov	r3, r0
 800b790:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b792:	7bfb      	ldrb	r3, [r7, #15]
 800b794:	4618      	mov	r0, r3
 800b796:	f000 f941 	bl	800ba1c <USBH_Get_USB_Status>
 800b79a:	4603      	mov	r3, r0
 800b79c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b79e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7f8 f842 	bl	8003844 <HAL_HCD_GetCurrentSpeed>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d007      	beq.n	800b7d6 <USBH_LL_GetSpeed+0x2e>
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d302      	bcc.n	800b7d0 <USBH_LL_GetSpeed+0x28>
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d006      	beq.n	800b7dc <USBH_LL_GetSpeed+0x34>
 800b7ce:	e008      	b.n	800b7e2 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b7d4:	e008      	b.n	800b7e8 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b7da:	e005      	b.n	800b7e8 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b7dc:	2302      	movs	r3, #2
 800b7de:	73fb      	strb	r3, [r7, #15]
    break;
 800b7e0:	e002      	b.n	800b7e8 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	73fb      	strb	r3, [r7, #15]
    break;
 800b7e6:	bf00      	nop
  }
  return  speed;
 800b7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b7fe:	2300      	movs	r3, #0
 800b800:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b808:	4618      	mov	r0, r3
 800b80a:	f7f7 ffd5 	bl	80037b8 <HAL_HCD_ResetPort>
 800b80e:	4603      	mov	r3, r0
 800b810:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800b812:	7bfb      	ldrb	r3, [r7, #15]
 800b814:	4618      	mov	r0, r3
 800b816:	f000 f901 	bl	800ba1c <USBH_Get_USB_Status>
 800b81a:	4603      	mov	r3, r0
 800b81c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b81e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	460b      	mov	r3, r1
 800b832:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b83a:	78fa      	ldrb	r2, [r7, #3]
 800b83c:	4611      	mov	r1, r2
 800b83e:	4618      	mov	r0, r3
 800b840:	f7f7 ffdd 	bl	80037fe <HAL_HCD_HC_GetXferCount>
 800b844:	4603      	mov	r3, r0
}
 800b846:	4618      	mov	r0, r3
 800b848:	3708      	adds	r7, #8
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b84e:	b590      	push	{r4, r7, lr}
 800b850:	b089      	sub	sp, #36	; 0x24
 800b852:	af04      	add	r7, sp, #16
 800b854:	6078      	str	r0, [r7, #4]
 800b856:	4608      	mov	r0, r1
 800b858:	4611      	mov	r1, r2
 800b85a:	461a      	mov	r2, r3
 800b85c:	4603      	mov	r3, r0
 800b85e:	70fb      	strb	r3, [r7, #3]
 800b860:	460b      	mov	r3, r1
 800b862:	70bb      	strb	r3, [r7, #2]
 800b864:	4613      	mov	r3, r2
 800b866:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b868:	2300      	movs	r3, #0
 800b86a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b86c:	2300      	movs	r3, #0
 800b86e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800b876:	787c      	ldrb	r4, [r7, #1]
 800b878:	78ba      	ldrb	r2, [r7, #2]
 800b87a:	78f9      	ldrb	r1, [r7, #3]
 800b87c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b87e:	9302      	str	r3, [sp, #8]
 800b880:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b884:	9301      	str	r3, [sp, #4]
 800b886:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	4623      	mov	r3, r4
 800b88e:	f7f7 fc2d 	bl	80030ec <HAL_HCD_HC_Init>
 800b892:	4603      	mov	r3, r0
 800b894:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b896:	7bfb      	ldrb	r3, [r7, #15]
 800b898:	4618      	mov	r0, r3
 800b89a:	f000 f8bf 	bl	800ba1c <USBH_Get_USB_Status>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b8a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd90      	pop	{r4, r7, pc}

0800b8ac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b8c6:	78fa      	ldrb	r2, [r7, #3]
 800b8c8:	4611      	mov	r1, r2
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7f7 fca6 	bl	800321c <HAL_HCD_HC_Halt>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b8d4:	7bfb      	ldrb	r3, [r7, #15]
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f000 f8a0 	bl	800ba1c <USBH_Get_USB_Status>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	73bb      	strb	r3, [r7, #14]
   
  return usb_status;
 800b8e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b8ea:	b590      	push	{r4, r7, lr}
 800b8ec:	b089      	sub	sp, #36	; 0x24
 800b8ee:	af04      	add	r7, sp, #16
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	4608      	mov	r0, r1
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	70fb      	strb	r3, [r7, #3]
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	70bb      	strb	r3, [r7, #2]
 800b900:	4613      	mov	r3, r2
 800b902:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b904:	2300      	movs	r3, #0
 800b906:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b908:	2300      	movs	r3, #0
 800b90a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800b912:	787c      	ldrb	r4, [r7, #1]
 800b914:	78ba      	ldrb	r2, [r7, #2]
 800b916:	78f9      	ldrb	r1, [r7, #3]
 800b918:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b91c:	9303      	str	r3, [sp, #12]
 800b91e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b920:	9302      	str	r3, [sp, #8]
 800b922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b924:	9301      	str	r3, [sp, #4]
 800b926:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	4623      	mov	r3, r4
 800b92e:	f7f7 fc99 	bl	8003264 <HAL_HCD_HC_SubmitRequest>
 800b932:	4603      	mov	r3, r0
 800b934:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b936:	7bfb      	ldrb	r3, [r7, #15]
 800b938:	4618      	mov	r0, r3
 800b93a:	f000 f86f 	bl	800ba1c <USBH_Get_USB_Status>
 800b93e:	4603      	mov	r3, r0
 800b940:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b942:	7bbb      	ldrb	r3, [r7, #14]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3714      	adds	r7, #20
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd90      	pop	{r4, r7, pc}

0800b94c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	460b      	mov	r3, r1
 800b956:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b95e:	78fa      	ldrb	r2, [r7, #3]
 800b960:	4611      	mov	r1, r2
 800b962:	4618      	mov	r0, r3
 800b964:	f7f7 ff36 	bl	80037d4 <HAL_HCD_HC_GetURBState>
 800b968:	4603      	mov	r3, r0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3708      	adds	r7, #8
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b972:	b580      	push	{r7, lr}
 800b974:	b082      	sub	sp, #8
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
 800b97a:	460b      	mov	r3, r1
 800b97c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800b984:	2b01      	cmp	r3, #1
 800b986:	d103      	bne.n	800b990 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b988:	78fb      	ldrb	r3, [r7, #3]
 800b98a:	4618      	mov	r0, r3
 800b98c:	f000 f872 	bl	800ba74 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b990:	20c8      	movs	r0, #200	; 0xc8
 800b992:	f7f7 f825 	bl	80029e0 <HAL_Delay>
  return USBH_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b085      	sub	sp, #20
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	70fb      	strb	r3, [r7, #3]
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b9b6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b9b8:	78fa      	ldrb	r2, [r7, #3]
 800b9ba:	68f9      	ldr	r1, [r7, #12]
 800b9bc:	4613      	mov	r3, r2
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	4413      	add	r3, r2
 800b9c2:	00db      	lsls	r3, r3, #3
 800b9c4:	440b      	add	r3, r1
 800b9c6:	333b      	adds	r3, #59	; 0x3b
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00a      	beq.n	800b9e4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b9ce:	78fa      	ldrb	r2, [r7, #3]
 800b9d0:	68f9      	ldr	r1, [r7, #12]
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	00db      	lsls	r3, r3, #3
 800b9da:	440b      	add	r3, r1
 800b9dc:	3350      	adds	r3, #80	; 0x50
 800b9de:	78ba      	ldrb	r2, [r7, #2]
 800b9e0:	701a      	strb	r2, [r3, #0]
 800b9e2:	e009      	b.n	800b9f8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b9e4:	78fa      	ldrb	r2, [r7, #3]
 800b9e6:	68f9      	ldr	r1, [r7, #12]
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	4413      	add	r3, r2
 800b9ee:	00db      	lsls	r3, r3, #3
 800b9f0:	440b      	add	r3, r1
 800b9f2:	3351      	adds	r3, #81	; 0x51
 800b9f4:	78ba      	ldrb	r2, [r7, #2]
 800b9f6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3714      	adds	r7, #20
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr

0800ba06 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b082      	sub	sp, #8
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f7f6 ffe6 	bl	80029e0 <HAL_Delay>
}
 800ba14:	bf00      	nop
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	4603      	mov	r3, r0
 800ba24:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba26:	2300      	movs	r3, #0
 800ba28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba2a:	79fb      	ldrb	r3, [r7, #7]
 800ba2c:	2b03      	cmp	r3, #3
 800ba2e:	d817      	bhi.n	800ba60 <USBH_Get_USB_Status+0x44>
 800ba30:	a201      	add	r2, pc, #4	; (adr r2, 800ba38 <USBH_Get_USB_Status+0x1c>)
 800ba32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba36:	bf00      	nop
 800ba38:	0800ba49 	.word	0x0800ba49
 800ba3c:	0800ba4f 	.word	0x0800ba4f
 800ba40:	0800ba55 	.word	0x0800ba55
 800ba44:	0800ba5b 	.word	0x0800ba5b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba4c:	e00b      	b.n	800ba66 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ba4e:	2302      	movs	r3, #2
 800ba50:	73fb      	strb	r3, [r7, #15]
    break;
 800ba52:	e008      	b.n	800ba66 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ba54:	2301      	movs	r3, #1
 800ba56:	73fb      	strb	r3, [r7, #15]
    break;
 800ba58:	e005      	b.n	800ba66 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ba5a:	2302      	movs	r3, #2
 800ba5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba5e:	e002      	b.n	800ba66 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ba60:	2302      	movs	r3, #2
 800ba62:	73fb      	strb	r3, [r7, #15]
    break;
 800ba64:	bf00      	nop
  }
  return usb_status;
 800ba66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3714      	adds	r7, #20
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800ba7e:	79fb      	ldrb	r3, [r7, #7]
 800ba80:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ba82:	79fb      	ldrb	r3, [r7, #7]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d102      	bne.n	800ba8e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	73fb      	strb	r3, [r7, #15]
 800ba8c:	e001      	b.n	800ba92 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800ba92:	7bfb      	ldrb	r3, [r7, #15]
 800ba94:	461a      	mov	r2, r3
 800ba96:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba9a:	4803      	ldr	r0, [pc, #12]	; (800baa8 <MX_DriverVbusFS+0x34>)
 800ba9c:	f7f7 faac 	bl	8002ff8 <HAL_GPIO_WritePin>
}
 800baa0:	bf00      	nop
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	48000800 	.word	0x48000800

0800baac <__errno>:
 800baac:	4b01      	ldr	r3, [pc, #4]	; (800bab4 <__errno+0x8>)
 800baae:	6818      	ldr	r0, [r3, #0]
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	2000004c 	.word	0x2000004c

0800bab8 <__libc_init_array>:
 800bab8:	b570      	push	{r4, r5, r6, lr}
 800baba:	4e0d      	ldr	r6, [pc, #52]	; (800baf0 <__libc_init_array+0x38>)
 800babc:	4c0d      	ldr	r4, [pc, #52]	; (800baf4 <__libc_init_array+0x3c>)
 800babe:	1ba4      	subs	r4, r4, r6
 800bac0:	10a4      	asrs	r4, r4, #2
 800bac2:	2500      	movs	r5, #0
 800bac4:	42a5      	cmp	r5, r4
 800bac6:	d109      	bne.n	800badc <__libc_init_array+0x24>
 800bac8:	4e0b      	ldr	r6, [pc, #44]	; (800baf8 <__libc_init_array+0x40>)
 800baca:	4c0c      	ldr	r4, [pc, #48]	; (800bafc <__libc_init_array+0x44>)
 800bacc:	f000 fc36 	bl	800c33c <_init>
 800bad0:	1ba4      	subs	r4, r4, r6
 800bad2:	10a4      	asrs	r4, r4, #2
 800bad4:	2500      	movs	r5, #0
 800bad6:	42a5      	cmp	r5, r4
 800bad8:	d105      	bne.n	800bae6 <__libc_init_array+0x2e>
 800bada:	bd70      	pop	{r4, r5, r6, pc}
 800badc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bae0:	4798      	blx	r3
 800bae2:	3501      	adds	r5, #1
 800bae4:	e7ee      	b.n	800bac4 <__libc_init_array+0xc>
 800bae6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800baea:	4798      	blx	r3
 800baec:	3501      	adds	r5, #1
 800baee:	e7f2      	b.n	800bad6 <__libc_init_array+0x1e>
 800baf0:	0800e374 	.word	0x0800e374
 800baf4:	0800e374 	.word	0x0800e374
 800baf8:	0800e374 	.word	0x0800e374
 800bafc:	0800e378 	.word	0x0800e378

0800bb00 <malloc>:
 800bb00:	4b02      	ldr	r3, [pc, #8]	; (800bb0c <malloc+0xc>)
 800bb02:	4601      	mov	r1, r0
 800bb04:	6818      	ldr	r0, [r3, #0]
 800bb06:	f000 b885 	b.w	800bc14 <_malloc_r>
 800bb0a:	bf00      	nop
 800bb0c:	2000004c 	.word	0x2000004c

0800bb10 <free>:
 800bb10:	4b02      	ldr	r3, [pc, #8]	; (800bb1c <free+0xc>)
 800bb12:	4601      	mov	r1, r0
 800bb14:	6818      	ldr	r0, [r3, #0]
 800bb16:	f000 b82f 	b.w	800bb78 <_free_r>
 800bb1a:	bf00      	nop
 800bb1c:	2000004c 	.word	0x2000004c

0800bb20 <memcpy>:
 800bb20:	b510      	push	{r4, lr}
 800bb22:	1e43      	subs	r3, r0, #1
 800bb24:	440a      	add	r2, r1
 800bb26:	4291      	cmp	r1, r2
 800bb28:	d100      	bne.n	800bb2c <memcpy+0xc>
 800bb2a:	bd10      	pop	{r4, pc}
 800bb2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb34:	e7f7      	b.n	800bb26 <memcpy+0x6>

0800bb36 <memmove>:
 800bb36:	4288      	cmp	r0, r1
 800bb38:	b510      	push	{r4, lr}
 800bb3a:	eb01 0302 	add.w	r3, r1, r2
 800bb3e:	d807      	bhi.n	800bb50 <memmove+0x1a>
 800bb40:	1e42      	subs	r2, r0, #1
 800bb42:	4299      	cmp	r1, r3
 800bb44:	d00a      	beq.n	800bb5c <memmove+0x26>
 800bb46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb4a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bb4e:	e7f8      	b.n	800bb42 <memmove+0xc>
 800bb50:	4283      	cmp	r3, r0
 800bb52:	d9f5      	bls.n	800bb40 <memmove+0xa>
 800bb54:	1881      	adds	r1, r0, r2
 800bb56:	1ad2      	subs	r2, r2, r3
 800bb58:	42d3      	cmn	r3, r2
 800bb5a:	d100      	bne.n	800bb5e <memmove+0x28>
 800bb5c:	bd10      	pop	{r4, pc}
 800bb5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb62:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bb66:	e7f7      	b.n	800bb58 <memmove+0x22>

0800bb68 <memset>:
 800bb68:	4402      	add	r2, r0
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d100      	bne.n	800bb72 <memset+0xa>
 800bb70:	4770      	bx	lr
 800bb72:	f803 1b01 	strb.w	r1, [r3], #1
 800bb76:	e7f9      	b.n	800bb6c <memset+0x4>

0800bb78 <_free_r>:
 800bb78:	b538      	push	{r3, r4, r5, lr}
 800bb7a:	4605      	mov	r5, r0
 800bb7c:	2900      	cmp	r1, #0
 800bb7e:	d045      	beq.n	800bc0c <_free_r+0x94>
 800bb80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb84:	1f0c      	subs	r4, r1, #4
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	bfb8      	it	lt
 800bb8a:	18e4      	addlt	r4, r4, r3
 800bb8c:	f000 f8cc 	bl	800bd28 <__malloc_lock>
 800bb90:	4a1f      	ldr	r2, [pc, #124]	; (800bc10 <_free_r+0x98>)
 800bb92:	6813      	ldr	r3, [r2, #0]
 800bb94:	4610      	mov	r0, r2
 800bb96:	b933      	cbnz	r3, 800bba6 <_free_r+0x2e>
 800bb98:	6063      	str	r3, [r4, #4]
 800bb9a:	6014      	str	r4, [r2, #0]
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bba2:	f000 b8c2 	b.w	800bd2a <__malloc_unlock>
 800bba6:	42a3      	cmp	r3, r4
 800bba8:	d90c      	bls.n	800bbc4 <_free_r+0x4c>
 800bbaa:	6821      	ldr	r1, [r4, #0]
 800bbac:	1862      	adds	r2, r4, r1
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	bf04      	itt	eq
 800bbb2:	681a      	ldreq	r2, [r3, #0]
 800bbb4:	685b      	ldreq	r3, [r3, #4]
 800bbb6:	6063      	str	r3, [r4, #4]
 800bbb8:	bf04      	itt	eq
 800bbba:	1852      	addeq	r2, r2, r1
 800bbbc:	6022      	streq	r2, [r4, #0]
 800bbbe:	6004      	str	r4, [r0, #0]
 800bbc0:	e7ec      	b.n	800bb9c <_free_r+0x24>
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	685a      	ldr	r2, [r3, #4]
 800bbc6:	b10a      	cbz	r2, 800bbcc <_free_r+0x54>
 800bbc8:	42a2      	cmp	r2, r4
 800bbca:	d9fa      	bls.n	800bbc2 <_free_r+0x4a>
 800bbcc:	6819      	ldr	r1, [r3, #0]
 800bbce:	1858      	adds	r0, r3, r1
 800bbd0:	42a0      	cmp	r0, r4
 800bbd2:	d10b      	bne.n	800bbec <_free_r+0x74>
 800bbd4:	6820      	ldr	r0, [r4, #0]
 800bbd6:	4401      	add	r1, r0
 800bbd8:	1858      	adds	r0, r3, r1
 800bbda:	4282      	cmp	r2, r0
 800bbdc:	6019      	str	r1, [r3, #0]
 800bbde:	d1dd      	bne.n	800bb9c <_free_r+0x24>
 800bbe0:	6810      	ldr	r0, [r2, #0]
 800bbe2:	6852      	ldr	r2, [r2, #4]
 800bbe4:	605a      	str	r2, [r3, #4]
 800bbe6:	4401      	add	r1, r0
 800bbe8:	6019      	str	r1, [r3, #0]
 800bbea:	e7d7      	b.n	800bb9c <_free_r+0x24>
 800bbec:	d902      	bls.n	800bbf4 <_free_r+0x7c>
 800bbee:	230c      	movs	r3, #12
 800bbf0:	602b      	str	r3, [r5, #0]
 800bbf2:	e7d3      	b.n	800bb9c <_free_r+0x24>
 800bbf4:	6820      	ldr	r0, [r4, #0]
 800bbf6:	1821      	adds	r1, r4, r0
 800bbf8:	428a      	cmp	r2, r1
 800bbfa:	bf04      	itt	eq
 800bbfc:	6811      	ldreq	r1, [r2, #0]
 800bbfe:	6852      	ldreq	r2, [r2, #4]
 800bc00:	6062      	str	r2, [r4, #4]
 800bc02:	bf04      	itt	eq
 800bc04:	1809      	addeq	r1, r1, r0
 800bc06:	6021      	streq	r1, [r4, #0]
 800bc08:	605c      	str	r4, [r3, #4]
 800bc0a:	e7c7      	b.n	800bb9c <_free_r+0x24>
 800bc0c:	bd38      	pop	{r3, r4, r5, pc}
 800bc0e:	bf00      	nop
 800bc10:	200004fc 	.word	0x200004fc

0800bc14 <_malloc_r>:
 800bc14:	b570      	push	{r4, r5, r6, lr}
 800bc16:	1ccd      	adds	r5, r1, #3
 800bc18:	f025 0503 	bic.w	r5, r5, #3
 800bc1c:	3508      	adds	r5, #8
 800bc1e:	2d0c      	cmp	r5, #12
 800bc20:	bf38      	it	cc
 800bc22:	250c      	movcc	r5, #12
 800bc24:	2d00      	cmp	r5, #0
 800bc26:	4606      	mov	r6, r0
 800bc28:	db01      	blt.n	800bc2e <_malloc_r+0x1a>
 800bc2a:	42a9      	cmp	r1, r5
 800bc2c:	d903      	bls.n	800bc36 <_malloc_r+0x22>
 800bc2e:	230c      	movs	r3, #12
 800bc30:	6033      	str	r3, [r6, #0]
 800bc32:	2000      	movs	r0, #0
 800bc34:	bd70      	pop	{r4, r5, r6, pc}
 800bc36:	f000 f877 	bl	800bd28 <__malloc_lock>
 800bc3a:	4a21      	ldr	r2, [pc, #132]	; (800bcc0 <_malloc_r+0xac>)
 800bc3c:	6814      	ldr	r4, [r2, #0]
 800bc3e:	4621      	mov	r1, r4
 800bc40:	b991      	cbnz	r1, 800bc68 <_malloc_r+0x54>
 800bc42:	4c20      	ldr	r4, [pc, #128]	; (800bcc4 <_malloc_r+0xb0>)
 800bc44:	6823      	ldr	r3, [r4, #0]
 800bc46:	b91b      	cbnz	r3, 800bc50 <_malloc_r+0x3c>
 800bc48:	4630      	mov	r0, r6
 800bc4a:	f000 f83d 	bl	800bcc8 <_sbrk_r>
 800bc4e:	6020      	str	r0, [r4, #0]
 800bc50:	4629      	mov	r1, r5
 800bc52:	4630      	mov	r0, r6
 800bc54:	f000 f838 	bl	800bcc8 <_sbrk_r>
 800bc58:	1c43      	adds	r3, r0, #1
 800bc5a:	d124      	bne.n	800bca6 <_malloc_r+0x92>
 800bc5c:	230c      	movs	r3, #12
 800bc5e:	6033      	str	r3, [r6, #0]
 800bc60:	4630      	mov	r0, r6
 800bc62:	f000 f862 	bl	800bd2a <__malloc_unlock>
 800bc66:	e7e4      	b.n	800bc32 <_malloc_r+0x1e>
 800bc68:	680b      	ldr	r3, [r1, #0]
 800bc6a:	1b5b      	subs	r3, r3, r5
 800bc6c:	d418      	bmi.n	800bca0 <_malloc_r+0x8c>
 800bc6e:	2b0b      	cmp	r3, #11
 800bc70:	d90f      	bls.n	800bc92 <_malloc_r+0x7e>
 800bc72:	600b      	str	r3, [r1, #0]
 800bc74:	50cd      	str	r5, [r1, r3]
 800bc76:	18cc      	adds	r4, r1, r3
 800bc78:	4630      	mov	r0, r6
 800bc7a:	f000 f856 	bl	800bd2a <__malloc_unlock>
 800bc7e:	f104 000b 	add.w	r0, r4, #11
 800bc82:	1d23      	adds	r3, r4, #4
 800bc84:	f020 0007 	bic.w	r0, r0, #7
 800bc88:	1ac3      	subs	r3, r0, r3
 800bc8a:	d0d3      	beq.n	800bc34 <_malloc_r+0x20>
 800bc8c:	425a      	negs	r2, r3
 800bc8e:	50e2      	str	r2, [r4, r3]
 800bc90:	e7d0      	b.n	800bc34 <_malloc_r+0x20>
 800bc92:	428c      	cmp	r4, r1
 800bc94:	684b      	ldr	r3, [r1, #4]
 800bc96:	bf16      	itet	ne
 800bc98:	6063      	strne	r3, [r4, #4]
 800bc9a:	6013      	streq	r3, [r2, #0]
 800bc9c:	460c      	movne	r4, r1
 800bc9e:	e7eb      	b.n	800bc78 <_malloc_r+0x64>
 800bca0:	460c      	mov	r4, r1
 800bca2:	6849      	ldr	r1, [r1, #4]
 800bca4:	e7cc      	b.n	800bc40 <_malloc_r+0x2c>
 800bca6:	1cc4      	adds	r4, r0, #3
 800bca8:	f024 0403 	bic.w	r4, r4, #3
 800bcac:	42a0      	cmp	r0, r4
 800bcae:	d005      	beq.n	800bcbc <_malloc_r+0xa8>
 800bcb0:	1a21      	subs	r1, r4, r0
 800bcb2:	4630      	mov	r0, r6
 800bcb4:	f000 f808 	bl	800bcc8 <_sbrk_r>
 800bcb8:	3001      	adds	r0, #1
 800bcba:	d0cf      	beq.n	800bc5c <_malloc_r+0x48>
 800bcbc:	6025      	str	r5, [r4, #0]
 800bcbe:	e7db      	b.n	800bc78 <_malloc_r+0x64>
 800bcc0:	200004fc 	.word	0x200004fc
 800bcc4:	20000500 	.word	0x20000500

0800bcc8 <_sbrk_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4c06      	ldr	r4, [pc, #24]	; (800bce4 <_sbrk_r+0x1c>)
 800bccc:	2300      	movs	r3, #0
 800bcce:	4605      	mov	r5, r0
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	6023      	str	r3, [r4, #0]
 800bcd4:	f7f6 fd0e 	bl	80026f4 <_sbrk>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d102      	bne.n	800bce2 <_sbrk_r+0x1a>
 800bcdc:	6823      	ldr	r3, [r4, #0]
 800bcde:	b103      	cbz	r3, 800bce2 <_sbrk_r+0x1a>
 800bce0:	602b      	str	r3, [r5, #0]
 800bce2:	bd38      	pop	{r3, r4, r5, pc}
 800bce4:	20000f0c 	.word	0x20000f0c

0800bce8 <siprintf>:
 800bce8:	b40e      	push	{r1, r2, r3}
 800bcea:	b500      	push	{lr}
 800bcec:	b09c      	sub	sp, #112	; 0x70
 800bcee:	ab1d      	add	r3, sp, #116	; 0x74
 800bcf0:	9002      	str	r0, [sp, #8]
 800bcf2:	9006      	str	r0, [sp, #24]
 800bcf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bcf8:	4809      	ldr	r0, [pc, #36]	; (800bd20 <siprintf+0x38>)
 800bcfa:	9107      	str	r1, [sp, #28]
 800bcfc:	9104      	str	r1, [sp, #16]
 800bcfe:	4909      	ldr	r1, [pc, #36]	; (800bd24 <siprintf+0x3c>)
 800bd00:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd04:	9105      	str	r1, [sp, #20]
 800bd06:	6800      	ldr	r0, [r0, #0]
 800bd08:	9301      	str	r3, [sp, #4]
 800bd0a:	a902      	add	r1, sp, #8
 800bd0c:	f000 f868 	bl	800bde0 <_svfiprintf_r>
 800bd10:	9b02      	ldr	r3, [sp, #8]
 800bd12:	2200      	movs	r2, #0
 800bd14:	701a      	strb	r2, [r3, #0]
 800bd16:	b01c      	add	sp, #112	; 0x70
 800bd18:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd1c:	b003      	add	sp, #12
 800bd1e:	4770      	bx	lr
 800bd20:	2000004c 	.word	0x2000004c
 800bd24:	ffff0208 	.word	0xffff0208

0800bd28 <__malloc_lock>:
 800bd28:	4770      	bx	lr

0800bd2a <__malloc_unlock>:
 800bd2a:	4770      	bx	lr

0800bd2c <__ssputs_r>:
 800bd2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd30:	688e      	ldr	r6, [r1, #8]
 800bd32:	429e      	cmp	r6, r3
 800bd34:	4682      	mov	sl, r0
 800bd36:	460c      	mov	r4, r1
 800bd38:	4690      	mov	r8, r2
 800bd3a:	4699      	mov	r9, r3
 800bd3c:	d837      	bhi.n	800bdae <__ssputs_r+0x82>
 800bd3e:	898a      	ldrh	r2, [r1, #12]
 800bd40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd44:	d031      	beq.n	800bdaa <__ssputs_r+0x7e>
 800bd46:	6825      	ldr	r5, [r4, #0]
 800bd48:	6909      	ldr	r1, [r1, #16]
 800bd4a:	1a6f      	subs	r7, r5, r1
 800bd4c:	6965      	ldr	r5, [r4, #20]
 800bd4e:	2302      	movs	r3, #2
 800bd50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd54:	fb95 f5f3 	sdiv	r5, r5, r3
 800bd58:	f109 0301 	add.w	r3, r9, #1
 800bd5c:	443b      	add	r3, r7
 800bd5e:	429d      	cmp	r5, r3
 800bd60:	bf38      	it	cc
 800bd62:	461d      	movcc	r5, r3
 800bd64:	0553      	lsls	r3, r2, #21
 800bd66:	d530      	bpl.n	800bdca <__ssputs_r+0x9e>
 800bd68:	4629      	mov	r1, r5
 800bd6a:	f7ff ff53 	bl	800bc14 <_malloc_r>
 800bd6e:	4606      	mov	r6, r0
 800bd70:	b950      	cbnz	r0, 800bd88 <__ssputs_r+0x5c>
 800bd72:	230c      	movs	r3, #12
 800bd74:	f8ca 3000 	str.w	r3, [sl]
 800bd78:	89a3      	ldrh	r3, [r4, #12]
 800bd7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd7e:	81a3      	strh	r3, [r4, #12]
 800bd80:	f04f 30ff 	mov.w	r0, #4294967295
 800bd84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd88:	463a      	mov	r2, r7
 800bd8a:	6921      	ldr	r1, [r4, #16]
 800bd8c:	f7ff fec8 	bl	800bb20 <memcpy>
 800bd90:	89a3      	ldrh	r3, [r4, #12]
 800bd92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd9a:	81a3      	strh	r3, [r4, #12]
 800bd9c:	6126      	str	r6, [r4, #16]
 800bd9e:	6165      	str	r5, [r4, #20]
 800bda0:	443e      	add	r6, r7
 800bda2:	1bed      	subs	r5, r5, r7
 800bda4:	6026      	str	r6, [r4, #0]
 800bda6:	60a5      	str	r5, [r4, #8]
 800bda8:	464e      	mov	r6, r9
 800bdaa:	454e      	cmp	r6, r9
 800bdac:	d900      	bls.n	800bdb0 <__ssputs_r+0x84>
 800bdae:	464e      	mov	r6, r9
 800bdb0:	4632      	mov	r2, r6
 800bdb2:	4641      	mov	r1, r8
 800bdb4:	6820      	ldr	r0, [r4, #0]
 800bdb6:	f7ff febe 	bl	800bb36 <memmove>
 800bdba:	68a3      	ldr	r3, [r4, #8]
 800bdbc:	1b9b      	subs	r3, r3, r6
 800bdbe:	60a3      	str	r3, [r4, #8]
 800bdc0:	6823      	ldr	r3, [r4, #0]
 800bdc2:	441e      	add	r6, r3
 800bdc4:	6026      	str	r6, [r4, #0]
 800bdc6:	2000      	movs	r0, #0
 800bdc8:	e7dc      	b.n	800bd84 <__ssputs_r+0x58>
 800bdca:	462a      	mov	r2, r5
 800bdcc:	f000 fa88 	bl	800c2e0 <_realloc_r>
 800bdd0:	4606      	mov	r6, r0
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	d1e2      	bne.n	800bd9c <__ssputs_r+0x70>
 800bdd6:	6921      	ldr	r1, [r4, #16]
 800bdd8:	4650      	mov	r0, sl
 800bdda:	f7ff fecd 	bl	800bb78 <_free_r>
 800bdde:	e7c8      	b.n	800bd72 <__ssputs_r+0x46>

0800bde0 <_svfiprintf_r>:
 800bde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde4:	461d      	mov	r5, r3
 800bde6:	898b      	ldrh	r3, [r1, #12]
 800bde8:	061f      	lsls	r7, r3, #24
 800bdea:	b09d      	sub	sp, #116	; 0x74
 800bdec:	4680      	mov	r8, r0
 800bdee:	460c      	mov	r4, r1
 800bdf0:	4616      	mov	r6, r2
 800bdf2:	d50f      	bpl.n	800be14 <_svfiprintf_r+0x34>
 800bdf4:	690b      	ldr	r3, [r1, #16]
 800bdf6:	b96b      	cbnz	r3, 800be14 <_svfiprintf_r+0x34>
 800bdf8:	2140      	movs	r1, #64	; 0x40
 800bdfa:	f7ff ff0b 	bl	800bc14 <_malloc_r>
 800bdfe:	6020      	str	r0, [r4, #0]
 800be00:	6120      	str	r0, [r4, #16]
 800be02:	b928      	cbnz	r0, 800be10 <_svfiprintf_r+0x30>
 800be04:	230c      	movs	r3, #12
 800be06:	f8c8 3000 	str.w	r3, [r8]
 800be0a:	f04f 30ff 	mov.w	r0, #4294967295
 800be0e:	e0c8      	b.n	800bfa2 <_svfiprintf_r+0x1c2>
 800be10:	2340      	movs	r3, #64	; 0x40
 800be12:	6163      	str	r3, [r4, #20]
 800be14:	2300      	movs	r3, #0
 800be16:	9309      	str	r3, [sp, #36]	; 0x24
 800be18:	2320      	movs	r3, #32
 800be1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be1e:	2330      	movs	r3, #48	; 0x30
 800be20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be24:	9503      	str	r5, [sp, #12]
 800be26:	f04f 0b01 	mov.w	fp, #1
 800be2a:	4637      	mov	r7, r6
 800be2c:	463d      	mov	r5, r7
 800be2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800be32:	b10b      	cbz	r3, 800be38 <_svfiprintf_r+0x58>
 800be34:	2b25      	cmp	r3, #37	; 0x25
 800be36:	d13e      	bne.n	800beb6 <_svfiprintf_r+0xd6>
 800be38:	ebb7 0a06 	subs.w	sl, r7, r6
 800be3c:	d00b      	beq.n	800be56 <_svfiprintf_r+0x76>
 800be3e:	4653      	mov	r3, sl
 800be40:	4632      	mov	r2, r6
 800be42:	4621      	mov	r1, r4
 800be44:	4640      	mov	r0, r8
 800be46:	f7ff ff71 	bl	800bd2c <__ssputs_r>
 800be4a:	3001      	adds	r0, #1
 800be4c:	f000 80a4 	beq.w	800bf98 <_svfiprintf_r+0x1b8>
 800be50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be52:	4453      	add	r3, sl
 800be54:	9309      	str	r3, [sp, #36]	; 0x24
 800be56:	783b      	ldrb	r3, [r7, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f000 809d 	beq.w	800bf98 <_svfiprintf_r+0x1b8>
 800be5e:	2300      	movs	r3, #0
 800be60:	f04f 32ff 	mov.w	r2, #4294967295
 800be64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be68:	9304      	str	r3, [sp, #16]
 800be6a:	9307      	str	r3, [sp, #28]
 800be6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be70:	931a      	str	r3, [sp, #104]	; 0x68
 800be72:	462f      	mov	r7, r5
 800be74:	2205      	movs	r2, #5
 800be76:	f817 1b01 	ldrb.w	r1, [r7], #1
 800be7a:	4850      	ldr	r0, [pc, #320]	; (800bfbc <_svfiprintf_r+0x1dc>)
 800be7c:	f7f4 f9a8 	bl	80001d0 <memchr>
 800be80:	9b04      	ldr	r3, [sp, #16]
 800be82:	b9d0      	cbnz	r0, 800beba <_svfiprintf_r+0xda>
 800be84:	06d9      	lsls	r1, r3, #27
 800be86:	bf44      	itt	mi
 800be88:	2220      	movmi	r2, #32
 800be8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be8e:	071a      	lsls	r2, r3, #28
 800be90:	bf44      	itt	mi
 800be92:	222b      	movmi	r2, #43	; 0x2b
 800be94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be98:	782a      	ldrb	r2, [r5, #0]
 800be9a:	2a2a      	cmp	r2, #42	; 0x2a
 800be9c:	d015      	beq.n	800beca <_svfiprintf_r+0xea>
 800be9e:	9a07      	ldr	r2, [sp, #28]
 800bea0:	462f      	mov	r7, r5
 800bea2:	2000      	movs	r0, #0
 800bea4:	250a      	movs	r5, #10
 800bea6:	4639      	mov	r1, r7
 800bea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800beac:	3b30      	subs	r3, #48	; 0x30
 800beae:	2b09      	cmp	r3, #9
 800beb0:	d94d      	bls.n	800bf4e <_svfiprintf_r+0x16e>
 800beb2:	b1b8      	cbz	r0, 800bee4 <_svfiprintf_r+0x104>
 800beb4:	e00f      	b.n	800bed6 <_svfiprintf_r+0xf6>
 800beb6:	462f      	mov	r7, r5
 800beb8:	e7b8      	b.n	800be2c <_svfiprintf_r+0x4c>
 800beba:	4a40      	ldr	r2, [pc, #256]	; (800bfbc <_svfiprintf_r+0x1dc>)
 800bebc:	1a80      	subs	r0, r0, r2
 800bebe:	fa0b f000 	lsl.w	r0, fp, r0
 800bec2:	4318      	orrs	r0, r3
 800bec4:	9004      	str	r0, [sp, #16]
 800bec6:	463d      	mov	r5, r7
 800bec8:	e7d3      	b.n	800be72 <_svfiprintf_r+0x92>
 800beca:	9a03      	ldr	r2, [sp, #12]
 800becc:	1d11      	adds	r1, r2, #4
 800bece:	6812      	ldr	r2, [r2, #0]
 800bed0:	9103      	str	r1, [sp, #12]
 800bed2:	2a00      	cmp	r2, #0
 800bed4:	db01      	blt.n	800beda <_svfiprintf_r+0xfa>
 800bed6:	9207      	str	r2, [sp, #28]
 800bed8:	e004      	b.n	800bee4 <_svfiprintf_r+0x104>
 800beda:	4252      	negs	r2, r2
 800bedc:	f043 0302 	orr.w	r3, r3, #2
 800bee0:	9207      	str	r2, [sp, #28]
 800bee2:	9304      	str	r3, [sp, #16]
 800bee4:	783b      	ldrb	r3, [r7, #0]
 800bee6:	2b2e      	cmp	r3, #46	; 0x2e
 800bee8:	d10c      	bne.n	800bf04 <_svfiprintf_r+0x124>
 800beea:	787b      	ldrb	r3, [r7, #1]
 800beec:	2b2a      	cmp	r3, #42	; 0x2a
 800beee:	d133      	bne.n	800bf58 <_svfiprintf_r+0x178>
 800bef0:	9b03      	ldr	r3, [sp, #12]
 800bef2:	1d1a      	adds	r2, r3, #4
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	9203      	str	r2, [sp, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	bfb8      	it	lt
 800befc:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf00:	3702      	adds	r7, #2
 800bf02:	9305      	str	r3, [sp, #20]
 800bf04:	4d2e      	ldr	r5, [pc, #184]	; (800bfc0 <_svfiprintf_r+0x1e0>)
 800bf06:	7839      	ldrb	r1, [r7, #0]
 800bf08:	2203      	movs	r2, #3
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	f7f4 f960 	bl	80001d0 <memchr>
 800bf10:	b138      	cbz	r0, 800bf22 <_svfiprintf_r+0x142>
 800bf12:	2340      	movs	r3, #64	; 0x40
 800bf14:	1b40      	subs	r0, r0, r5
 800bf16:	fa03 f000 	lsl.w	r0, r3, r0
 800bf1a:	9b04      	ldr	r3, [sp, #16]
 800bf1c:	4303      	orrs	r3, r0
 800bf1e:	3701      	adds	r7, #1
 800bf20:	9304      	str	r3, [sp, #16]
 800bf22:	7839      	ldrb	r1, [r7, #0]
 800bf24:	4827      	ldr	r0, [pc, #156]	; (800bfc4 <_svfiprintf_r+0x1e4>)
 800bf26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf2a:	2206      	movs	r2, #6
 800bf2c:	1c7e      	adds	r6, r7, #1
 800bf2e:	f7f4 f94f 	bl	80001d0 <memchr>
 800bf32:	2800      	cmp	r0, #0
 800bf34:	d038      	beq.n	800bfa8 <_svfiprintf_r+0x1c8>
 800bf36:	4b24      	ldr	r3, [pc, #144]	; (800bfc8 <_svfiprintf_r+0x1e8>)
 800bf38:	bb13      	cbnz	r3, 800bf80 <_svfiprintf_r+0x1a0>
 800bf3a:	9b03      	ldr	r3, [sp, #12]
 800bf3c:	3307      	adds	r3, #7
 800bf3e:	f023 0307 	bic.w	r3, r3, #7
 800bf42:	3308      	adds	r3, #8
 800bf44:	9303      	str	r3, [sp, #12]
 800bf46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf48:	444b      	add	r3, r9
 800bf4a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf4c:	e76d      	b.n	800be2a <_svfiprintf_r+0x4a>
 800bf4e:	fb05 3202 	mla	r2, r5, r2, r3
 800bf52:	2001      	movs	r0, #1
 800bf54:	460f      	mov	r7, r1
 800bf56:	e7a6      	b.n	800bea6 <_svfiprintf_r+0xc6>
 800bf58:	2300      	movs	r3, #0
 800bf5a:	3701      	adds	r7, #1
 800bf5c:	9305      	str	r3, [sp, #20]
 800bf5e:	4619      	mov	r1, r3
 800bf60:	250a      	movs	r5, #10
 800bf62:	4638      	mov	r0, r7
 800bf64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf68:	3a30      	subs	r2, #48	; 0x30
 800bf6a:	2a09      	cmp	r2, #9
 800bf6c:	d903      	bls.n	800bf76 <_svfiprintf_r+0x196>
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d0c8      	beq.n	800bf04 <_svfiprintf_r+0x124>
 800bf72:	9105      	str	r1, [sp, #20]
 800bf74:	e7c6      	b.n	800bf04 <_svfiprintf_r+0x124>
 800bf76:	fb05 2101 	mla	r1, r5, r1, r2
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	4607      	mov	r7, r0
 800bf7e:	e7f0      	b.n	800bf62 <_svfiprintf_r+0x182>
 800bf80:	ab03      	add	r3, sp, #12
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	4622      	mov	r2, r4
 800bf86:	4b11      	ldr	r3, [pc, #68]	; (800bfcc <_svfiprintf_r+0x1ec>)
 800bf88:	a904      	add	r1, sp, #16
 800bf8a:	4640      	mov	r0, r8
 800bf8c:	f3af 8000 	nop.w
 800bf90:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bf94:	4681      	mov	r9, r0
 800bf96:	d1d6      	bne.n	800bf46 <_svfiprintf_r+0x166>
 800bf98:	89a3      	ldrh	r3, [r4, #12]
 800bf9a:	065b      	lsls	r3, r3, #25
 800bf9c:	f53f af35 	bmi.w	800be0a <_svfiprintf_r+0x2a>
 800bfa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfa2:	b01d      	add	sp, #116	; 0x74
 800bfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfa8:	ab03      	add	r3, sp, #12
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	4622      	mov	r2, r4
 800bfae:	4b07      	ldr	r3, [pc, #28]	; (800bfcc <_svfiprintf_r+0x1ec>)
 800bfb0:	a904      	add	r1, sp, #16
 800bfb2:	4640      	mov	r0, r8
 800bfb4:	f000 f882 	bl	800c0bc <_printf_i>
 800bfb8:	e7ea      	b.n	800bf90 <_svfiprintf_r+0x1b0>
 800bfba:	bf00      	nop
 800bfbc:	0800e338 	.word	0x0800e338
 800bfc0:	0800e33e 	.word	0x0800e33e
 800bfc4:	0800e342 	.word	0x0800e342
 800bfc8:	00000000 	.word	0x00000000
 800bfcc:	0800bd2d 	.word	0x0800bd2d

0800bfd0 <_printf_common>:
 800bfd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfd4:	4691      	mov	r9, r2
 800bfd6:	461f      	mov	r7, r3
 800bfd8:	688a      	ldr	r2, [r1, #8]
 800bfda:	690b      	ldr	r3, [r1, #16]
 800bfdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	bfb8      	it	lt
 800bfe4:	4613      	movlt	r3, r2
 800bfe6:	f8c9 3000 	str.w	r3, [r9]
 800bfea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfee:	4606      	mov	r6, r0
 800bff0:	460c      	mov	r4, r1
 800bff2:	b112      	cbz	r2, 800bffa <_printf_common+0x2a>
 800bff4:	3301      	adds	r3, #1
 800bff6:	f8c9 3000 	str.w	r3, [r9]
 800bffa:	6823      	ldr	r3, [r4, #0]
 800bffc:	0699      	lsls	r1, r3, #26
 800bffe:	bf42      	ittt	mi
 800c000:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c004:	3302      	addmi	r3, #2
 800c006:	f8c9 3000 	strmi.w	r3, [r9]
 800c00a:	6825      	ldr	r5, [r4, #0]
 800c00c:	f015 0506 	ands.w	r5, r5, #6
 800c010:	d107      	bne.n	800c022 <_printf_common+0x52>
 800c012:	f104 0a19 	add.w	sl, r4, #25
 800c016:	68e3      	ldr	r3, [r4, #12]
 800c018:	f8d9 2000 	ldr.w	r2, [r9]
 800c01c:	1a9b      	subs	r3, r3, r2
 800c01e:	42ab      	cmp	r3, r5
 800c020:	dc28      	bgt.n	800c074 <_printf_common+0xa4>
 800c022:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c026:	6822      	ldr	r2, [r4, #0]
 800c028:	3300      	adds	r3, #0
 800c02a:	bf18      	it	ne
 800c02c:	2301      	movne	r3, #1
 800c02e:	0692      	lsls	r2, r2, #26
 800c030:	d42d      	bmi.n	800c08e <_printf_common+0xbe>
 800c032:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c036:	4639      	mov	r1, r7
 800c038:	4630      	mov	r0, r6
 800c03a:	47c0      	blx	r8
 800c03c:	3001      	adds	r0, #1
 800c03e:	d020      	beq.n	800c082 <_printf_common+0xb2>
 800c040:	6823      	ldr	r3, [r4, #0]
 800c042:	68e5      	ldr	r5, [r4, #12]
 800c044:	f8d9 2000 	ldr.w	r2, [r9]
 800c048:	f003 0306 	and.w	r3, r3, #6
 800c04c:	2b04      	cmp	r3, #4
 800c04e:	bf08      	it	eq
 800c050:	1aad      	subeq	r5, r5, r2
 800c052:	68a3      	ldr	r3, [r4, #8]
 800c054:	6922      	ldr	r2, [r4, #16]
 800c056:	bf0c      	ite	eq
 800c058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c05c:	2500      	movne	r5, #0
 800c05e:	4293      	cmp	r3, r2
 800c060:	bfc4      	itt	gt
 800c062:	1a9b      	subgt	r3, r3, r2
 800c064:	18ed      	addgt	r5, r5, r3
 800c066:	f04f 0900 	mov.w	r9, #0
 800c06a:	341a      	adds	r4, #26
 800c06c:	454d      	cmp	r5, r9
 800c06e:	d11a      	bne.n	800c0a6 <_printf_common+0xd6>
 800c070:	2000      	movs	r0, #0
 800c072:	e008      	b.n	800c086 <_printf_common+0xb6>
 800c074:	2301      	movs	r3, #1
 800c076:	4652      	mov	r2, sl
 800c078:	4639      	mov	r1, r7
 800c07a:	4630      	mov	r0, r6
 800c07c:	47c0      	blx	r8
 800c07e:	3001      	adds	r0, #1
 800c080:	d103      	bne.n	800c08a <_printf_common+0xba>
 800c082:	f04f 30ff 	mov.w	r0, #4294967295
 800c086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c08a:	3501      	adds	r5, #1
 800c08c:	e7c3      	b.n	800c016 <_printf_common+0x46>
 800c08e:	18e1      	adds	r1, r4, r3
 800c090:	1c5a      	adds	r2, r3, #1
 800c092:	2030      	movs	r0, #48	; 0x30
 800c094:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c098:	4422      	add	r2, r4
 800c09a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c09e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0a2:	3302      	adds	r3, #2
 800c0a4:	e7c5      	b.n	800c032 <_printf_common+0x62>
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	4622      	mov	r2, r4
 800c0aa:	4639      	mov	r1, r7
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	47c0      	blx	r8
 800c0b0:	3001      	adds	r0, #1
 800c0b2:	d0e6      	beq.n	800c082 <_printf_common+0xb2>
 800c0b4:	f109 0901 	add.w	r9, r9, #1
 800c0b8:	e7d8      	b.n	800c06c <_printf_common+0x9c>
	...

0800c0bc <_printf_i>:
 800c0bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c0c4:	460c      	mov	r4, r1
 800c0c6:	7e09      	ldrb	r1, [r1, #24]
 800c0c8:	b085      	sub	sp, #20
 800c0ca:	296e      	cmp	r1, #110	; 0x6e
 800c0cc:	4617      	mov	r7, r2
 800c0ce:	4606      	mov	r6, r0
 800c0d0:	4698      	mov	r8, r3
 800c0d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0d4:	f000 80b3 	beq.w	800c23e <_printf_i+0x182>
 800c0d8:	d822      	bhi.n	800c120 <_printf_i+0x64>
 800c0da:	2963      	cmp	r1, #99	; 0x63
 800c0dc:	d036      	beq.n	800c14c <_printf_i+0x90>
 800c0de:	d80a      	bhi.n	800c0f6 <_printf_i+0x3a>
 800c0e0:	2900      	cmp	r1, #0
 800c0e2:	f000 80b9 	beq.w	800c258 <_printf_i+0x19c>
 800c0e6:	2958      	cmp	r1, #88	; 0x58
 800c0e8:	f000 8083 	beq.w	800c1f2 <_printf_i+0x136>
 800c0ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c0f4:	e032      	b.n	800c15c <_printf_i+0xa0>
 800c0f6:	2964      	cmp	r1, #100	; 0x64
 800c0f8:	d001      	beq.n	800c0fe <_printf_i+0x42>
 800c0fa:	2969      	cmp	r1, #105	; 0x69
 800c0fc:	d1f6      	bne.n	800c0ec <_printf_i+0x30>
 800c0fe:	6820      	ldr	r0, [r4, #0]
 800c100:	6813      	ldr	r3, [r2, #0]
 800c102:	0605      	lsls	r5, r0, #24
 800c104:	f103 0104 	add.w	r1, r3, #4
 800c108:	d52a      	bpl.n	800c160 <_printf_i+0xa4>
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	6011      	str	r1, [r2, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	da03      	bge.n	800c11a <_printf_i+0x5e>
 800c112:	222d      	movs	r2, #45	; 0x2d
 800c114:	425b      	negs	r3, r3
 800c116:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c11a:	486f      	ldr	r0, [pc, #444]	; (800c2d8 <_printf_i+0x21c>)
 800c11c:	220a      	movs	r2, #10
 800c11e:	e039      	b.n	800c194 <_printf_i+0xd8>
 800c120:	2973      	cmp	r1, #115	; 0x73
 800c122:	f000 809d 	beq.w	800c260 <_printf_i+0x1a4>
 800c126:	d808      	bhi.n	800c13a <_printf_i+0x7e>
 800c128:	296f      	cmp	r1, #111	; 0x6f
 800c12a:	d020      	beq.n	800c16e <_printf_i+0xb2>
 800c12c:	2970      	cmp	r1, #112	; 0x70
 800c12e:	d1dd      	bne.n	800c0ec <_printf_i+0x30>
 800c130:	6823      	ldr	r3, [r4, #0]
 800c132:	f043 0320 	orr.w	r3, r3, #32
 800c136:	6023      	str	r3, [r4, #0]
 800c138:	e003      	b.n	800c142 <_printf_i+0x86>
 800c13a:	2975      	cmp	r1, #117	; 0x75
 800c13c:	d017      	beq.n	800c16e <_printf_i+0xb2>
 800c13e:	2978      	cmp	r1, #120	; 0x78
 800c140:	d1d4      	bne.n	800c0ec <_printf_i+0x30>
 800c142:	2378      	movs	r3, #120	; 0x78
 800c144:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c148:	4864      	ldr	r0, [pc, #400]	; (800c2dc <_printf_i+0x220>)
 800c14a:	e055      	b.n	800c1f8 <_printf_i+0x13c>
 800c14c:	6813      	ldr	r3, [r2, #0]
 800c14e:	1d19      	adds	r1, r3, #4
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	6011      	str	r1, [r2, #0]
 800c154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c158:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c15c:	2301      	movs	r3, #1
 800c15e:	e08c      	b.n	800c27a <_printf_i+0x1be>
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	6011      	str	r1, [r2, #0]
 800c164:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c168:	bf18      	it	ne
 800c16a:	b21b      	sxthne	r3, r3
 800c16c:	e7cf      	b.n	800c10e <_printf_i+0x52>
 800c16e:	6813      	ldr	r3, [r2, #0]
 800c170:	6825      	ldr	r5, [r4, #0]
 800c172:	1d18      	adds	r0, r3, #4
 800c174:	6010      	str	r0, [r2, #0]
 800c176:	0628      	lsls	r0, r5, #24
 800c178:	d501      	bpl.n	800c17e <_printf_i+0xc2>
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	e002      	b.n	800c184 <_printf_i+0xc8>
 800c17e:	0668      	lsls	r0, r5, #25
 800c180:	d5fb      	bpl.n	800c17a <_printf_i+0xbe>
 800c182:	881b      	ldrh	r3, [r3, #0]
 800c184:	4854      	ldr	r0, [pc, #336]	; (800c2d8 <_printf_i+0x21c>)
 800c186:	296f      	cmp	r1, #111	; 0x6f
 800c188:	bf14      	ite	ne
 800c18a:	220a      	movne	r2, #10
 800c18c:	2208      	moveq	r2, #8
 800c18e:	2100      	movs	r1, #0
 800c190:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c194:	6865      	ldr	r5, [r4, #4]
 800c196:	60a5      	str	r5, [r4, #8]
 800c198:	2d00      	cmp	r5, #0
 800c19a:	f2c0 8095 	blt.w	800c2c8 <_printf_i+0x20c>
 800c19e:	6821      	ldr	r1, [r4, #0]
 800c1a0:	f021 0104 	bic.w	r1, r1, #4
 800c1a4:	6021      	str	r1, [r4, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d13d      	bne.n	800c226 <_printf_i+0x16a>
 800c1aa:	2d00      	cmp	r5, #0
 800c1ac:	f040 808e 	bne.w	800c2cc <_printf_i+0x210>
 800c1b0:	4665      	mov	r5, ip
 800c1b2:	2a08      	cmp	r2, #8
 800c1b4:	d10b      	bne.n	800c1ce <_printf_i+0x112>
 800c1b6:	6823      	ldr	r3, [r4, #0]
 800c1b8:	07db      	lsls	r3, r3, #31
 800c1ba:	d508      	bpl.n	800c1ce <_printf_i+0x112>
 800c1bc:	6923      	ldr	r3, [r4, #16]
 800c1be:	6862      	ldr	r2, [r4, #4]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	bfde      	ittt	le
 800c1c4:	2330      	movle	r3, #48	; 0x30
 800c1c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c1ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c1ce:	ebac 0305 	sub.w	r3, ip, r5
 800c1d2:	6123      	str	r3, [r4, #16]
 800c1d4:	f8cd 8000 	str.w	r8, [sp]
 800c1d8:	463b      	mov	r3, r7
 800c1da:	aa03      	add	r2, sp, #12
 800c1dc:	4621      	mov	r1, r4
 800c1de:	4630      	mov	r0, r6
 800c1e0:	f7ff fef6 	bl	800bfd0 <_printf_common>
 800c1e4:	3001      	adds	r0, #1
 800c1e6:	d14d      	bne.n	800c284 <_printf_i+0x1c8>
 800c1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ec:	b005      	add	sp, #20
 800c1ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1f2:	4839      	ldr	r0, [pc, #228]	; (800c2d8 <_printf_i+0x21c>)
 800c1f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c1f8:	6813      	ldr	r3, [r2, #0]
 800c1fa:	6821      	ldr	r1, [r4, #0]
 800c1fc:	1d1d      	adds	r5, r3, #4
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6015      	str	r5, [r2, #0]
 800c202:	060a      	lsls	r2, r1, #24
 800c204:	d50b      	bpl.n	800c21e <_printf_i+0x162>
 800c206:	07ca      	lsls	r2, r1, #31
 800c208:	bf44      	itt	mi
 800c20a:	f041 0120 	orrmi.w	r1, r1, #32
 800c20e:	6021      	strmi	r1, [r4, #0]
 800c210:	b91b      	cbnz	r3, 800c21a <_printf_i+0x15e>
 800c212:	6822      	ldr	r2, [r4, #0]
 800c214:	f022 0220 	bic.w	r2, r2, #32
 800c218:	6022      	str	r2, [r4, #0]
 800c21a:	2210      	movs	r2, #16
 800c21c:	e7b7      	b.n	800c18e <_printf_i+0xd2>
 800c21e:	064d      	lsls	r5, r1, #25
 800c220:	bf48      	it	mi
 800c222:	b29b      	uxthmi	r3, r3
 800c224:	e7ef      	b.n	800c206 <_printf_i+0x14a>
 800c226:	4665      	mov	r5, ip
 800c228:	fbb3 f1f2 	udiv	r1, r3, r2
 800c22c:	fb02 3311 	mls	r3, r2, r1, r3
 800c230:	5cc3      	ldrb	r3, [r0, r3]
 800c232:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c236:	460b      	mov	r3, r1
 800c238:	2900      	cmp	r1, #0
 800c23a:	d1f5      	bne.n	800c228 <_printf_i+0x16c>
 800c23c:	e7b9      	b.n	800c1b2 <_printf_i+0xf6>
 800c23e:	6813      	ldr	r3, [r2, #0]
 800c240:	6825      	ldr	r5, [r4, #0]
 800c242:	6961      	ldr	r1, [r4, #20]
 800c244:	1d18      	adds	r0, r3, #4
 800c246:	6010      	str	r0, [r2, #0]
 800c248:	0628      	lsls	r0, r5, #24
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	d501      	bpl.n	800c252 <_printf_i+0x196>
 800c24e:	6019      	str	r1, [r3, #0]
 800c250:	e002      	b.n	800c258 <_printf_i+0x19c>
 800c252:	066a      	lsls	r2, r5, #25
 800c254:	d5fb      	bpl.n	800c24e <_printf_i+0x192>
 800c256:	8019      	strh	r1, [r3, #0]
 800c258:	2300      	movs	r3, #0
 800c25a:	6123      	str	r3, [r4, #16]
 800c25c:	4665      	mov	r5, ip
 800c25e:	e7b9      	b.n	800c1d4 <_printf_i+0x118>
 800c260:	6813      	ldr	r3, [r2, #0]
 800c262:	1d19      	adds	r1, r3, #4
 800c264:	6011      	str	r1, [r2, #0]
 800c266:	681d      	ldr	r5, [r3, #0]
 800c268:	6862      	ldr	r2, [r4, #4]
 800c26a:	2100      	movs	r1, #0
 800c26c:	4628      	mov	r0, r5
 800c26e:	f7f3 ffaf 	bl	80001d0 <memchr>
 800c272:	b108      	cbz	r0, 800c278 <_printf_i+0x1bc>
 800c274:	1b40      	subs	r0, r0, r5
 800c276:	6060      	str	r0, [r4, #4]
 800c278:	6863      	ldr	r3, [r4, #4]
 800c27a:	6123      	str	r3, [r4, #16]
 800c27c:	2300      	movs	r3, #0
 800c27e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c282:	e7a7      	b.n	800c1d4 <_printf_i+0x118>
 800c284:	6923      	ldr	r3, [r4, #16]
 800c286:	462a      	mov	r2, r5
 800c288:	4639      	mov	r1, r7
 800c28a:	4630      	mov	r0, r6
 800c28c:	47c0      	blx	r8
 800c28e:	3001      	adds	r0, #1
 800c290:	d0aa      	beq.n	800c1e8 <_printf_i+0x12c>
 800c292:	6823      	ldr	r3, [r4, #0]
 800c294:	079b      	lsls	r3, r3, #30
 800c296:	d413      	bmi.n	800c2c0 <_printf_i+0x204>
 800c298:	68e0      	ldr	r0, [r4, #12]
 800c29a:	9b03      	ldr	r3, [sp, #12]
 800c29c:	4298      	cmp	r0, r3
 800c29e:	bfb8      	it	lt
 800c2a0:	4618      	movlt	r0, r3
 800c2a2:	e7a3      	b.n	800c1ec <_printf_i+0x130>
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	464a      	mov	r2, r9
 800c2a8:	4639      	mov	r1, r7
 800c2aa:	4630      	mov	r0, r6
 800c2ac:	47c0      	blx	r8
 800c2ae:	3001      	adds	r0, #1
 800c2b0:	d09a      	beq.n	800c1e8 <_printf_i+0x12c>
 800c2b2:	3501      	adds	r5, #1
 800c2b4:	68e3      	ldr	r3, [r4, #12]
 800c2b6:	9a03      	ldr	r2, [sp, #12]
 800c2b8:	1a9b      	subs	r3, r3, r2
 800c2ba:	42ab      	cmp	r3, r5
 800c2bc:	dcf2      	bgt.n	800c2a4 <_printf_i+0x1e8>
 800c2be:	e7eb      	b.n	800c298 <_printf_i+0x1dc>
 800c2c0:	2500      	movs	r5, #0
 800c2c2:	f104 0919 	add.w	r9, r4, #25
 800c2c6:	e7f5      	b.n	800c2b4 <_printf_i+0x1f8>
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1ac      	bne.n	800c226 <_printf_i+0x16a>
 800c2cc:	7803      	ldrb	r3, [r0, #0]
 800c2ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c2d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2d6:	e76c      	b.n	800c1b2 <_printf_i+0xf6>
 800c2d8:	0800e349 	.word	0x0800e349
 800c2dc:	0800e35a 	.word	0x0800e35a

0800c2e0 <_realloc_r>:
 800c2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e2:	4607      	mov	r7, r0
 800c2e4:	4614      	mov	r4, r2
 800c2e6:	460e      	mov	r6, r1
 800c2e8:	b921      	cbnz	r1, 800c2f4 <_realloc_r+0x14>
 800c2ea:	4611      	mov	r1, r2
 800c2ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c2f0:	f7ff bc90 	b.w	800bc14 <_malloc_r>
 800c2f4:	b922      	cbnz	r2, 800c300 <_realloc_r+0x20>
 800c2f6:	f7ff fc3f 	bl	800bb78 <_free_r>
 800c2fa:	4625      	mov	r5, r4
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c300:	f000 f814 	bl	800c32c <_malloc_usable_size_r>
 800c304:	42a0      	cmp	r0, r4
 800c306:	d20f      	bcs.n	800c328 <_realloc_r+0x48>
 800c308:	4621      	mov	r1, r4
 800c30a:	4638      	mov	r0, r7
 800c30c:	f7ff fc82 	bl	800bc14 <_malloc_r>
 800c310:	4605      	mov	r5, r0
 800c312:	2800      	cmp	r0, #0
 800c314:	d0f2      	beq.n	800c2fc <_realloc_r+0x1c>
 800c316:	4631      	mov	r1, r6
 800c318:	4622      	mov	r2, r4
 800c31a:	f7ff fc01 	bl	800bb20 <memcpy>
 800c31e:	4631      	mov	r1, r6
 800c320:	4638      	mov	r0, r7
 800c322:	f7ff fc29 	bl	800bb78 <_free_r>
 800c326:	e7e9      	b.n	800c2fc <_realloc_r+0x1c>
 800c328:	4635      	mov	r5, r6
 800c32a:	e7e7      	b.n	800c2fc <_realloc_r+0x1c>

0800c32c <_malloc_usable_size_r>:
 800c32c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c330:	1f18      	subs	r0, r3, #4
 800c332:	2b00      	cmp	r3, #0
 800c334:	bfbc      	itt	lt
 800c336:	580b      	ldrlt	r3, [r1, r0]
 800c338:	18c0      	addlt	r0, r0, r3
 800c33a:	4770      	bx	lr

0800c33c <_init>:
 800c33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33e:	bf00      	nop
 800c340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c342:	bc08      	pop	{r3}
 800c344:	469e      	mov	lr, r3
 800c346:	4770      	bx	lr

0800c348 <_fini>:
 800c348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34a:	bf00      	nop
 800c34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c34e:	bc08      	pop	{r3}
 800c350:	469e      	mov	lr, r3
 800c352:	4770      	bx	lr
=======
 80096f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096fa:	d0ec      	beq.n	80096d6 <USB_HC_Halt+0x1a4>
 80096fc:	e011      	b.n	8009722 <USB_HC_Halt+0x1f0>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	4413      	add	r3, r2
 8009706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	0151      	lsls	r1, r2, #5
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	440a      	add	r2, r1
 8009714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009718:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	e000      	b.n	8009722 <USB_HC_Halt+0x1f0>
 8009720:	bf00      	nop
 8009722:	2300      	movs	r3, #0
 8009724:	4618      	mov	r0, r3
 8009726:	371c      	adds	r7, #28
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <USB_StopHost>:
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	60fb      	str	r3, [r7, #12]
 800973c:	2300      	movs	r3, #0
 800973e:	617b      	str	r3, [r7, #20]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f7ff fa7b 	bl	8008c3c <USB_DisableGlobalInt>
 8009746:	2110      	movs	r1, #16
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f7ff fab3 	bl	8008cb4 <USB_FlushTxFifo>
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7ff fad6 	bl	8008d00 <USB_FlushRxFifo>
 8009754:	2300      	movs	r3, #0
 8009756:	613b      	str	r3, [r7, #16]
 8009758:	e01f      	b.n	800979a <USB_StopHost+0x6a>
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	015a      	lsls	r2, r3, #5
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	4413      	add	r3, r2
 8009762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	60bb      	str	r3, [r7, #8]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009770:	60bb      	str	r3, [r7, #8]
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009778:	60bb      	str	r3, [r7, #8]
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009780:	60bb      	str	r3, [r7, #8]
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	4413      	add	r3, r2
 800978a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800978e:	461a      	mov	r2, r3
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	6013      	str	r3, [r2, #0]
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	3301      	adds	r3, #1
 8009798:	613b      	str	r3, [r7, #16]
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	2b0f      	cmp	r3, #15
 800979e:	d9dc      	bls.n	800975a <USB_StopHost+0x2a>
 80097a0:	2300      	movs	r3, #0
 80097a2:	613b      	str	r3, [r7, #16]
 80097a4:	e034      	b.n	8009810 <USB_StopHost+0xe0>
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	015a      	lsls	r2, r3, #5
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	4413      	add	r3, r2
 80097ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	60bb      	str	r3, [r7, #8]
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097bc:	60bb      	str	r3, [r7, #8]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097c4:	60bb      	str	r3, [r7, #8]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80097cc:	60bb      	str	r3, [r7, #8]
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097da:	461a      	mov	r2, r3
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	3301      	adds	r3, #1
 80097e4:	617b      	str	r3, [r7, #20]
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097ec:	d80c      	bhi.n	8009808 <USB_StopHost+0xd8>
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	015a      	lsls	r2, r3, #5
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	4413      	add	r3, r2
 80097f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009804:	d0ec      	beq.n	80097e0 <USB_StopHost+0xb0>
 8009806:	e000      	b.n	800980a <USB_StopHost+0xda>
 8009808:	bf00      	nop
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	3301      	adds	r3, #1
 800980e:	613b      	str	r3, [r7, #16]
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	2b0f      	cmp	r3, #15
 8009814:	d9c7      	bls.n	80097a6 <USB_StopHost+0x76>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800981c:	461a      	mov	r2, r3
 800981e:	f04f 33ff 	mov.w	r3, #4294967295
 8009822:	6153      	str	r3, [r2, #20]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f04f 32ff 	mov.w	r2, #4294967295
 800982a:	615a      	str	r2, [r3, #20]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7ff f9f4 	bl	8008c1a <USB_EnableGlobalInt>
 8009832:	2300      	movs	r3, #0
 8009834:	4618      	mov	r0, r3
 8009836:	3718      	adds	r7, #24
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBH_CDC_InterfaceInit>:
 800983c:	b590      	push	{r4, r7, lr}
 800983e:	b089      	sub	sp, #36	; 0x24
 8009840:	af04      	add	r7, sp, #16
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	2302      	movs	r3, #2
 8009846:	73fb      	strb	r3, [r7, #15]
 8009848:	2301      	movs	r3, #1
 800984a:	2202      	movs	r2, #2
 800984c:	2102      	movs	r1, #2
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fc3a 	bl	800a0c8 <USBH_FindInterface>
 8009854:	4603      	mov	r3, r0
 8009856:	73bb      	strb	r3, [r7, #14]
 8009858:	7bbb      	ldrb	r3, [r7, #14]
 800985a:	2bff      	cmp	r3, #255	; 0xff
 800985c:	f000 812a 	beq.w	8009ab4 <USBH_CDC_InterfaceInit+0x278>
 8009860:	7bbb      	ldrb	r3, [r7, #14]
 8009862:	4619      	mov	r1, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fc13 	bl	800a090 <USBH_SelectInterface>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8009870:	2050      	movs	r0, #80	; 0x50
 8009872:	f002 f8e3 	bl	800ba3c <malloc>
 8009876:	4603      	mov	r3, r0
 8009878:	61e3      	str	r3, [r4, #28]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	60bb      	str	r3, [r7, #8]
 8009884:	7bbb      	ldrb	r3, [r7, #14]
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	211a      	movs	r1, #26
 800988a:	fb01 f303 	mul.w	r3, r1, r3
 800988e:	4413      	add	r3, r2
 8009890:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	b25b      	sxtb	r3, r3
 8009898:	2b00      	cmp	r3, #0
 800989a:	da15      	bge.n	80098c8 <USBH_CDC_InterfaceInit+0x8c>
 800989c:	7bbb      	ldrb	r3, [r7, #14]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	211a      	movs	r1, #26
 80098a2:	fb01 f303 	mul.w	r3, r1, r3
 80098a6:	4413      	add	r3, r2
 80098a8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80098ac:	781a      	ldrb	r2, [r3, #0]
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	705a      	strb	r2, [r3, #1]
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	211a      	movs	r1, #26
 80098b8:	fb01 f303 	mul.w	r3, r1, r3
 80098bc:	4413      	add	r3, r2
 80098be:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80098c2:	881a      	ldrh	r2, [r3, #0]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	815a      	strh	r2, [r3, #10]
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	785b      	ldrb	r3, [r3, #1]
 80098cc:	4619      	mov	r1, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f001 fd21 	bl	800b316 <USBH_AllocPipe>
 80098d4:	4603      	mov	r3, r0
 80098d6:	461a      	mov	r2, r3
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	701a      	strb	r2, [r3, #0]
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	7819      	ldrb	r1, [r3, #0]
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	7858      	ldrb	r0, [r3, #1]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	8952      	ldrh	r2, [r2, #10]
 80098f4:	9202      	str	r2, [sp, #8]
 80098f6:	2203      	movs	r2, #3
 80098f8:	9201      	str	r2, [sp, #4]
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	4623      	mov	r3, r4
 80098fe:	4602      	mov	r2, r0
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f001 fcd9 	bl	800b2b8 <USBH_OpenPipe>
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	2200      	movs	r2, #0
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f001 ffe4 	bl	800b8dc <USBH_LL_SetToggle>
 8009914:	2300      	movs	r3, #0
 8009916:	2200      	movs	r2, #0
 8009918:	210a      	movs	r1, #10
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fbd4 	bl	800a0c8 <USBH_FindInterface>
 8009920:	4603      	mov	r3, r0
 8009922:	73bb      	strb	r3, [r7, #14]
 8009924:	7bbb      	ldrb	r3, [r7, #14]
 8009926:	2bff      	cmp	r3, #255	; 0xff
 8009928:	f000 80c4 	beq.w	8009ab4 <USBH_CDC_InterfaceInit+0x278>
 800992c:	7bbb      	ldrb	r3, [r7, #14]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	211a      	movs	r1, #26
 8009932:	fb01 f303 	mul.w	r3, r1, r3
 8009936:	4413      	add	r3, r2
 8009938:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	b25b      	sxtb	r3, r3
 8009940:	2b00      	cmp	r3, #0
 8009942:	da16      	bge.n	8009972 <USBH_CDC_InterfaceInit+0x136>
 8009944:	7bbb      	ldrb	r3, [r7, #14]
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	211a      	movs	r1, #26
 800994a:	fb01 f303 	mul.w	r3, r1, r3
 800994e:	4413      	add	r3, r2
 8009950:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8009954:	781a      	ldrb	r2, [r3, #0]
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	73da      	strb	r2, [r3, #15]
 800995a:	7bbb      	ldrb	r3, [r7, #14]
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	211a      	movs	r1, #26
 8009960:	fb01 f303 	mul.w	r3, r1, r3
 8009964:	4413      	add	r3, r2
 8009966:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800996a:	881a      	ldrh	r2, [r3, #0]
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	835a      	strh	r2, [r3, #26]
 8009970:	e015      	b.n	800999e <USBH_CDC_InterfaceInit+0x162>
 8009972:	7bbb      	ldrb	r3, [r7, #14]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	211a      	movs	r1, #26
 8009978:	fb01 f303 	mul.w	r3, r1, r3
 800997c:	4413      	add	r3, r2
 800997e:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8009982:	781a      	ldrb	r2, [r3, #0]
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	739a      	strb	r2, [r3, #14]
 8009988:	7bbb      	ldrb	r3, [r7, #14]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	211a      	movs	r1, #26
 800998e:	fb01 f303 	mul.w	r3, r1, r3
 8009992:	4413      	add	r3, r2
 8009994:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8009998:	881a      	ldrh	r2, [r3, #0]
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	831a      	strh	r2, [r3, #24]
 800999e:	7bbb      	ldrb	r3, [r7, #14]
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	211a      	movs	r1, #26
 80099a4:	fb01 f303 	mul.w	r3, r1, r3
 80099a8:	4413      	add	r3, r2
 80099aa:	f203 3352 	addw	r3, r3, #850	; 0x352
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	b25b      	sxtb	r3, r3
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	da16      	bge.n	80099e4 <USBH_CDC_InterfaceInit+0x1a8>
 80099b6:	7bbb      	ldrb	r3, [r7, #14]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	211a      	movs	r1, #26
 80099bc:	fb01 f303 	mul.w	r3, r1, r3
 80099c0:	4413      	add	r3, r2
 80099c2:	f203 3352 	addw	r3, r3, #850	; 0x352
 80099c6:	781a      	ldrb	r2, [r3, #0]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	73da      	strb	r2, [r3, #15]
 80099cc:	7bbb      	ldrb	r3, [r7, #14]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	211a      	movs	r1, #26
 80099d2:	fb01 f303 	mul.w	r3, r1, r3
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80099dc:	881a      	ldrh	r2, [r3, #0]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	835a      	strh	r2, [r3, #26]
 80099e2:	e015      	b.n	8009a10 <USBH_CDC_InterfaceInit+0x1d4>
 80099e4:	7bbb      	ldrb	r3, [r7, #14]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	211a      	movs	r1, #26
 80099ea:	fb01 f303 	mul.w	r3, r1, r3
 80099ee:	4413      	add	r3, r2
 80099f0:	f203 3352 	addw	r3, r3, #850	; 0x352
 80099f4:	781a      	ldrb	r2, [r3, #0]
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	739a      	strb	r2, [r3, #14]
 80099fa:	7bbb      	ldrb	r3, [r7, #14]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	211a      	movs	r1, #26
 8009a00:	fb01 f303 	mul.w	r3, r1, r3
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8009a0a:	881a      	ldrh	r2, [r3, #0]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	831a      	strh	r2, [r3, #24]
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	7b9b      	ldrb	r3, [r3, #14]
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f001 fc7d 	bl	800b316 <USBH_AllocPipe>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	461a      	mov	r2, r3
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	735a      	strb	r2, [r3, #13]
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	7bdb      	ldrb	r3, [r3, #15]
 8009a28:	4619      	mov	r1, r3
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f001 fc73 	bl	800b316 <USBH_AllocPipe>
 8009a30:	4603      	mov	r3, r0
 8009a32:	461a      	mov	r2, r3
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	731a      	strb	r2, [r3, #12]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	7b59      	ldrb	r1, [r3, #13]
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	7b98      	ldrb	r0, [r3, #14]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a4c:	68ba      	ldr	r2, [r7, #8]
 8009a4e:	8b12      	ldrh	r2, [r2, #24]
 8009a50:	9202      	str	r2, [sp, #8]
 8009a52:	2202      	movs	r2, #2
 8009a54:	9201      	str	r2, [sp, #4]
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	4623      	mov	r3, r4
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f001 fc2b 	bl	800b2b8 <USBH_OpenPipe>
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	7b19      	ldrb	r1, [r3, #12]
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	7bd8      	ldrb	r0, [r3, #15]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	8b52      	ldrh	r2, [r2, #26]
 8009a7a:	9202      	str	r2, [sp, #8]
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	9201      	str	r2, [sp, #4]
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	4623      	mov	r3, r4
 8009a84:	4602      	mov	r2, r0
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f001 fc16 	bl	800b2b8 <USBH_OpenPipe>
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	7b5b      	ldrb	r3, [r3, #13]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f001 ff1d 	bl	800b8dc <USBH_LL_SetToggle>
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	7b1b      	ldrb	r3, [r3, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f001 ff16 	bl	800b8dc <USBH_LL_SetToggle>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	73fb      	strb	r3, [r7, #15]
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd90      	pop	{r4, r7, pc}

08009abe <USBH_CDC_InterfaceDeInit>:
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b084      	sub	sp, #16
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	60fb      	str	r3, [r7, #12]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00e      	beq.n	8009af6 <USBH_CDC_InterfaceDeInit+0x38>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f001 fc09 	bl	800b2f6 <USBH_ClosePipe>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f001 fc31 	bl	800b352 <USBH_FreePipe>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2200      	movs	r2, #0
 8009af4:	701a      	strb	r2, [r3, #0]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	7b1b      	ldrb	r3, [r3, #12]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00e      	beq.n	8009b1c <USBH_CDC_InterfaceDeInit+0x5e>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	7b1b      	ldrb	r3, [r3, #12]
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f001 fbf6 	bl	800b2f6 <USBH_ClosePipe>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	7b1b      	ldrb	r3, [r3, #12]
 8009b0e:	4619      	mov	r1, r3
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f001 fc1e 	bl	800b352 <USBH_FreePipe>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	731a      	strb	r2, [r3, #12]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	7b5b      	ldrb	r3, [r3, #13]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00e      	beq.n	8009b42 <USBH_CDC_InterfaceDeInit+0x84>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	7b5b      	ldrb	r3, [r3, #13]
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f001 fbe3 	bl	800b2f6 <USBH_ClosePipe>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	7b5b      	ldrb	r3, [r3, #13]
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f001 fc0b 	bl	800b352 <USBH_FreePipe>
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	735a      	strb	r2, [r3, #13]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009b48:	69db      	ldr	r3, [r3, #28]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00b      	beq.n	8009b66 <USBH_CDC_InterfaceDeInit+0xa8>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f001 ff78 	bl	800ba4c <free>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009b62:	2200      	movs	r2, #0
 8009b64:	61da      	str	r2, [r3, #28]
 8009b66:	2300      	movs	r3, #0
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <USBH_CDC_ClassRequest>:
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	2302      	movs	r3, #2
 8009b7a:	73fb      	strb	r3, [r7, #15]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009b82:	69db      	ldr	r3, [r3, #28]
 8009b84:	60bb      	str	r3, [r7, #8]
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	3340      	adds	r3, #64	; 0x40
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f8b2 	bl	8009cf6 <GetLineCoding>
 8009b92:	4603      	mov	r3, r0
 8009b94:	73fb      	strb	r3, [r7, #15]
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d105      	bne.n	8009ba8 <USBH_CDC_ClassRequest+0x38>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009ba2:	2102      	movs	r1, #2
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	4798      	blx	r3
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	4618      	mov	r0, r3
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
	...

08009bb4 <USBH_CDC_Process>:
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	73fb      	strb	r3, [r7, #15]
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73bb      	strb	r3, [r7, #14]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009bca:	69db      	ldr	r3, [r3, #28]
 8009bcc:	60bb      	str	r3, [r7, #8]
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009bd4:	2b04      	cmp	r3, #4
 8009bd6:	d877      	bhi.n	8009cc8 <USBH_CDC_Process+0x114>
 8009bd8:	a201      	add	r2, pc, #4	; (adr r2, 8009be0 <USBH_CDC_Process+0x2c>)
 8009bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bde:	bf00      	nop
 8009be0:	08009bf5 	.word	0x08009bf5
 8009be4:	08009bfb 	.word	0x08009bfb
 8009be8:	08009c2b 	.word	0x08009c2b
 8009bec:	08009c9f 	.word	0x08009c9f
 8009bf0:	08009cad 	.word	0x08009cad
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	73fb      	strb	r3, [r7, #15]
 8009bf8:	e06d      	b.n	8009cd6 <USBH_CDC_Process+0x122>
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bfe:	4619      	mov	r1, r3
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f897 	bl	8009d34 <SetLineCoding>
 8009c06:	4603      	mov	r3, r0
 8009c08:	73bb      	strb	r3, [r7, #14]
 8009c0a:	7bbb      	ldrb	r3, [r7, #14]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d104      	bne.n	8009c1a <USBH_CDC_Process+0x66>
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	2202      	movs	r2, #2
 8009c14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8009c18:	e058      	b.n	8009ccc <USBH_CDC_Process+0x118>
 8009c1a:	7bbb      	ldrb	r3, [r7, #14]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d055      	beq.n	8009ccc <USBH_CDC_Process+0x118>
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2204      	movs	r2, #4
 8009c24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8009c28:	e050      	b.n	8009ccc <USBH_CDC_Process+0x118>
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	3340      	adds	r3, #64	; 0x40
 8009c2e:	4619      	mov	r1, r3
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f860 	bl	8009cf6 <GetLineCoding>
 8009c36:	4603      	mov	r3, r0
 8009c38:	73bb      	strb	r3, [r7, #14]
 8009c3a:	7bbb      	ldrb	r3, [r7, #14]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d126      	bne.n	8009c8e <USBH_CDC_Process+0xda>
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c52:	791b      	ldrb	r3, [r3, #4]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d13b      	bne.n	8009cd0 <USBH_CDC_Process+0x11c>
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c62:	799b      	ldrb	r3, [r3, #6]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d133      	bne.n	8009cd0 <USBH_CDC_Process+0x11c>
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c72:	795b      	ldrb	r3, [r3, #5]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d12b      	bne.n	8009cd0 <USBH_CDC_Process+0x11c>
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d124      	bne.n	8009cd0 <USBH_CDC_Process+0x11c>
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f95a 	bl	8009f40 <USBH_CDC_LineCodingChanged>
 8009c8c:	e020      	b.n	8009cd0 <USBH_CDC_Process+0x11c>
 8009c8e:	7bbb      	ldrb	r3, [r7, #14]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d01d      	beq.n	8009cd0 <USBH_CDC_Process+0x11c>
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2204      	movs	r2, #4
 8009c98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8009c9c:	e018      	b.n	8009cd0 <USBH_CDC_Process+0x11c>
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f867 	bl	8009d72 <CDC_ProcessTransmission>
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 f8dc 	bl	8009e62 <CDC_ProcessReception>
 8009caa:	e014      	b.n	8009cd6 <USBH_CDC_Process+0x122>
 8009cac:	2100      	movs	r1, #0
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fece 	bl	800aa50 <USBH_ClrFeature>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73bb      	strb	r3, [r7, #14]
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10a      	bne.n	8009cd4 <USBH_CDC_Process+0x120>
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8009cc6:	e005      	b.n	8009cd4 <USBH_CDC_Process+0x120>
 8009cc8:	bf00      	nop
 8009cca:	e004      	b.n	8009cd6 <USBH_CDC_Process+0x122>
 8009ccc:	bf00      	nop
 8009cce:	e002      	b.n	8009cd6 <USBH_CDC_Process+0x122>
 8009cd0:	bf00      	nop
 8009cd2:	e000      	b.n	8009cd6 <USBH_CDC_Process+0x122>
 8009cd4:	bf00      	nop
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <USBH_CDC_SOFProcess>:
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	2300      	movs	r3, #0
 8009cea:	4618      	mov	r0, r3
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <GetLineCoding>:
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b082      	sub	sp, #8
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	6039      	str	r1, [r7, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	22a1      	movs	r2, #161	; 0xa1
 8009d04:	741a      	strb	r2, [r3, #16]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2221      	movs	r2, #33	; 0x21
 8009d0a:	745a      	strb	r2, [r3, #17]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	825a      	strh	r2, [r3, #18]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	829a      	strh	r2, [r3, #20]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2207      	movs	r2, #7
 8009d1c:	82da      	strh	r2, [r3, #22]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2207      	movs	r2, #7
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f001 f873 	bl	800ae10 <USBH_CtlReq>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <SetLineCoding>:
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2221      	movs	r2, #33	; 0x21
 8009d42:	741a      	strb	r2, [r3, #16]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2220      	movs	r2, #32
 8009d48:	745a      	strb	r2, [r3, #17]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	825a      	strh	r2, [r3, #18]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	829a      	strh	r2, [r3, #20]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2207      	movs	r2, #7
 8009d5a:	82da      	strh	r2, [r3, #22]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	2207      	movs	r2, #7
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f001 f854 	bl	800ae10 <USBH_CtlReq>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <CDC_ProcessTransmission>:
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b086      	sub	sp, #24
 8009d76:	af02      	add	r7, sp, #8
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	60fb      	str	r3, [r7, #12]
 8009d84:	2300      	movs	r3, #0
 8009d86:	72fb      	strb	r3, [r7, #11]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d002      	beq.n	8009d98 <CDC_ProcessTransmission+0x26>
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d025      	beq.n	8009de2 <CDC_ProcessTransmission+0x70>
 8009d96:	e060      	b.n	8009e5a <CDC_ProcessTransmission+0xe8>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	8b12      	ldrh	r2, [r2, #24]
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d90c      	bls.n	8009dbe <CDC_ProcessTransmission+0x4c>
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	69d9      	ldr	r1, [r3, #28]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	8b1a      	ldrh	r2, [r3, #24]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	7b58      	ldrb	r0, [r3, #13]
 8009db0:	2301      	movs	r3, #1
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	4603      	mov	r3, r0
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f001 fa3b 	bl	800b232 <USBH_BulkSendData>
 8009dbc:	e00c      	b.n	8009dd8 <CDC_ProcessTransmission+0x66>
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	69d9      	ldr	r1, [r3, #28]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	7b58      	ldrb	r0, [r3, #13]
 8009dcc:	2301      	movs	r3, #1
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f001 fa2d 	bl	800b232 <USBH_BulkSendData>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2202      	movs	r2, #2
 8009ddc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8009de0:	e03b      	b.n	8009e5a <CDC_ProcessTransmission+0xe8>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	7b5b      	ldrb	r3, [r3, #13]
 8009de6:	4619      	mov	r1, r3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f001 fd4d 	bl	800b888 <USBH_LL_GetURBState>
 8009dee:	4603      	mov	r3, r0
 8009df0:	72fb      	strb	r3, [r7, #11]
 8009df2:	7afb      	ldrb	r3, [r7, #11]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d128      	bne.n	8009e4a <CDC_ProcessTransmission+0xd8>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	8b12      	ldrh	r2, [r2, #24]
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d90e      	bls.n	8009e22 <CDC_ProcessTransmission+0xb0>
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	8b12      	ldrh	r2, [r2, #24]
 8009e0c:	1a9a      	subs	r2, r3, r2
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	625a      	str	r2, [r3, #36]	; 0x24
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	8b12      	ldrh	r2, [r2, #24]
 8009e1a:	441a      	add	r2, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	61da      	str	r2, [r3, #28]
 8009e20:	e002      	b.n	8009e28 <CDC_ProcessTransmission+0xb6>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	625a      	str	r2, [r3, #36]	; 0x24
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d004      	beq.n	8009e3a <CDC_ProcessTransmission+0xc8>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8009e38:	e00e      	b.n	8009e58 <CDC_ProcessTransmission+0xe6>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f868 	bl	8009f18 <USBH_CDC_TransmitCallback>
 8009e48:	e006      	b.n	8009e58 <CDC_ProcessTransmission+0xe6>
 8009e4a:	7afb      	ldrb	r3, [r7, #11]
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d103      	bne.n	8009e58 <CDC_ProcessTransmission+0xe6>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8009e58:	bf00      	nop
 8009e5a:	bf00      	nop
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <CDC_ProcessReception>:
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b086      	sub	sp, #24
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009e70:	69db      	ldr	r3, [r3, #28]
 8009e72:	617b      	str	r3, [r7, #20]
 8009e74:	2300      	movs	r3, #0
 8009e76:	74fb      	strb	r3, [r7, #19]
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009e7e:	2b03      	cmp	r3, #3
 8009e80:	d002      	beq.n	8009e88 <CDC_ProcessReception+0x26>
 8009e82:	2b04      	cmp	r3, #4
 8009e84:	d00e      	beq.n	8009ea4 <CDC_ProcessReception+0x42>
 8009e86:	e043      	b.n	8009f10 <CDC_ProcessReception+0xae>
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	6a19      	ldr	r1, [r3, #32]
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	8b5a      	ldrh	r2, [r3, #26]
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	7b1b      	ldrb	r3, [r3, #12]
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f001 f9f1 	bl	800b27c <USBH_BulkReceiveData>
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	2204      	movs	r2, #4
 8009e9e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8009ea2:	e035      	b.n	8009f10 <CDC_ProcessReception+0xae>
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	7b1b      	ldrb	r3, [r3, #12]
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f001 fcec 	bl	800b888 <USBH_LL_GetURBState>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	74fb      	strb	r3, [r7, #19]
 8009eb4:	7cfb      	ldrb	r3, [r7, #19]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d129      	bne.n	8009f0e <CDC_ProcessReception+0xac>
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	7b1b      	ldrb	r3, [r3, #12]
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f001 fc4f 	bl	800b764 <USBH_LL_GetLastXferSize>
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d016      	beq.n	8009f00 <CDC_ProcessReception+0x9e>
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	8b5b      	ldrh	r3, [r3, #26]
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d910      	bls.n	8009f00 <CDC_ProcessReception+0x9e>
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	1ad2      	subs	r2, r2, r3
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	629a      	str	r2, [r3, #40]	; 0x28
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	6a1a      	ldr	r2, [r3, #32]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	441a      	add	r2, r3
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	621a      	str	r2, [r3, #32]
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	2203      	movs	r2, #3
 8009efa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8009efe:	e006      	b.n	8009f0e <CDC_ProcessReception+0xac>
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f80f 	bl	8009f2c <USBH_CDC_ReceiveCallback>
 8009f0e:	bf00      	nop
 8009f10:	bf00      	nop
 8009f12:	3718      	adds	r7, #24
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USBH_CDC_TransmitCallback>:
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <USBH_CDC_ReceiveCallback>:
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <USBH_CDC_LineCodingChanged>:
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	bf00      	nop
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <USBH_Init>:
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	71fb      	strb	r3, [r7, #7]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d101      	bne.n	8009f6c <USBH_Init+0x18>
 8009f68:	2302      	movs	r3, #2
 8009f6a:	e019      	b.n	8009fa0 <USBH_Init+0x4c>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	79fa      	ldrb	r2, [r7, #7]
 8009f70:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f000 f80f 	bl	8009fa8 <DeInitStateMachine>
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d003      	beq.n	8009f98 <USBH_Init+0x44>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f001 fb31 	bl	800b600 <USBH_LL_Init>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <DeInitStateMachine>:
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	e008      	b.n	8009fc8 <DeInitStateMachine+0x20>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	32e0      	adds	r2, #224	; 0xe0
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	60fb      	str	r3, [r7, #12]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2b0e      	cmp	r3, #14
 8009fcc:	d9f3      	bls.n	8009fb6 <DeInitStateMachine+0xe>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	60fb      	str	r3, [r7, #12]
 8009fd2:	e009      	b.n	8009fe8 <DeInitStateMachine+0x40>
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	4413      	add	r3, r2
 8009fda:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009fde:	2200      	movs	r2, #0
 8009fe0:	701a      	strb	r2, [r3, #0]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	60fb      	str	r3, [r7, #12]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fee:	d3f1      	bcc.n	8009fd4 <DeInitStateMachine+0x2c>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	701a      	strb	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	705a      	strb	r2, [r3, #1]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	709a      	strb	r2, [r3, #2]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	761a      	strb	r2, [r3, #24]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2240      	movs	r2, #64	; 0x40
 800a014:	719a      	strb	r2, [r3, #6]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	765a      	strb	r2, [r3, #25]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 800a02c:	2300      	movs	r3, #0
 800a02e:	4618      	mov	r0, r3
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <USBH_RegisterClass>:
 800a03a:	b480      	push	{r7}
 800a03c:	b085      	sub	sp, #20
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	6039      	str	r1, [r7, #0]
 800a044:	2300      	movs	r3, #0
 800a046:	73fb      	strb	r3, [r7, #15]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d017      	beq.n	800a07e <USBH_RegisterClass+0x44>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10f      	bne.n	800a078 <USBH_RegisterClass+0x3e>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a05e:	1c59      	adds	r1, r3, #1
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	33dc      	adds	r3, #220	; 0xdc
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	683a      	ldr	r2, [r7, #0]
 800a070:	605a      	str	r2, [r3, #4]
 800a072:	2300      	movs	r3, #0
 800a074:	73fb      	strb	r3, [r7, #15]
 800a076:	e004      	b.n	800a082 <USBH_RegisterClass+0x48>
 800a078:	2302      	movs	r3, #2
 800a07a:	73fb      	strb	r3, [r7, #15]
 800a07c:	e001      	b.n	800a082 <USBH_RegisterClass+0x48>
 800a07e:	2302      	movs	r3, #2
 800a080:	73fb      	strb	r3, [r7, #15]
 800a082:	7bfb      	ldrb	r3, [r7, #15]
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <USBH_SelectInterface>:
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	70fb      	strb	r3, [r7, #3]
 800a09c:	2300      	movs	r3, #0
 800a09e:	73fb      	strb	r3, [r7, #15]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800a0a6:	78fa      	ldrb	r2, [r7, #3]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d204      	bcs.n	800a0b6 <USBH_SelectInterface+0x26>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	78fa      	ldrb	r2, [r7, #3]
 800a0b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800a0b4:	e001      	b.n	800a0ba <USBH_SelectInterface+0x2a>
 800a0b6:	2302      	movs	r3, #2
 800a0b8:	73fb      	strb	r3, [r7, #15]
 800a0ba:	7bfb      	ldrb	r3, [r7, #15]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <USBH_FindInterface>:
 800a0c8:	b480      	push	{r7}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	4608      	mov	r0, r1
 800a0d2:	4611      	mov	r1, r2
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	70fb      	strb	r3, [r7, #3]
 800a0da:	460b      	mov	r3, r1
 800a0dc:	70bb      	strb	r3, [r7, #2]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	707b      	strb	r3, [r7, #1]
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	75fb      	strb	r3, [r7, #23]
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	613b      	str	r3, [r7, #16]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800a0f0:	60fb      	str	r3, [r7, #12]
 800a0f2:	e025      	b.n	800a140 <USBH_FindInterface+0x78>
 800a0f4:	7dfb      	ldrb	r3, [r7, #23]
 800a0f6:	221a      	movs	r2, #26
 800a0f8:	fb02 f303 	mul.w	r3, r2, r3
 800a0fc:	3308      	adds	r3, #8
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	4413      	add	r3, r2
 800a102:	3302      	adds	r3, #2
 800a104:	613b      	str	r3, [r7, #16]
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	795b      	ldrb	r3, [r3, #5]
 800a10a:	78fa      	ldrb	r2, [r7, #3]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d002      	beq.n	800a116 <USBH_FindInterface+0x4e>
 800a110:	78fb      	ldrb	r3, [r7, #3]
 800a112:	2bff      	cmp	r3, #255	; 0xff
 800a114:	d111      	bne.n	800a13a <USBH_FindInterface+0x72>
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	799b      	ldrb	r3, [r3, #6]
 800a11a:	78ba      	ldrb	r2, [r7, #2]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d002      	beq.n	800a126 <USBH_FindInterface+0x5e>
 800a120:	78bb      	ldrb	r3, [r7, #2]
 800a122:	2bff      	cmp	r3, #255	; 0xff
 800a124:	d109      	bne.n	800a13a <USBH_FindInterface+0x72>
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	79db      	ldrb	r3, [r3, #7]
 800a12a:	787a      	ldrb	r2, [r7, #1]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d002      	beq.n	800a136 <USBH_FindInterface+0x6e>
 800a130:	787b      	ldrb	r3, [r7, #1]
 800a132:	2bff      	cmp	r3, #255	; 0xff
 800a134:	d101      	bne.n	800a13a <USBH_FindInterface+0x72>
 800a136:	7dfb      	ldrb	r3, [r7, #23]
 800a138:	e006      	b.n	800a148 <USBH_FindInterface+0x80>
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
 800a13c:	3301      	adds	r3, #1
 800a13e:	75fb      	strb	r3, [r7, #23]
 800a140:	7dfb      	ldrb	r3, [r7, #23]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d9d6      	bls.n	800a0f4 <USBH_FindInterface+0x2c>
 800a146:	23ff      	movs	r3, #255	; 0xff
 800a148:	4618      	mov	r0, r3
 800a14a:	371c      	adds	r7, #28
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <USBH_Start>:
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f001 fa8b 	bl	800b678 <USBH_LL_Start>
 800a162:	2101      	movs	r1, #1
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f001 fba2 	bl	800b8ae <USBH_LL_DriverVBUS>
 800a16a:	2300      	movs	r3, #0
 800a16c:	4618      	mov	r0, r3
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <USBH_Process>:
 800a174:	b580      	push	{r7, lr}
 800a176:	b088      	sub	sp, #32
 800a178:	af04      	add	r7, sp, #16
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	2302      	movs	r3, #2
 800a17e:	73bb      	strb	r3, [r7, #14]
 800a180:	2300      	movs	r3, #0
 800a182:	73fb      	strb	r3, [r7, #15]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 faec 	bl	800a762 <USBH_IsPortEnabled>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10c      	bne.n	800a1aa <USBH_Process+0x36>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	d007      	beq.n	800a1aa <USBH_Process+0x36>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	2b03      	cmp	r3, #3
 800a1a2:	d002      	beq.n	800a1aa <USBH_Process+0x36>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2203      	movs	r2, #3
 800a1a8:	701a      	strb	r2, [r3, #0]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	2b0b      	cmp	r3, #11
 800a1b2:	f200 814c 	bhi.w	800a44e <USBH_Process+0x2da>
 800a1b6:	a201      	add	r2, pc, #4	; (adr r2, 800a1bc <USBH_Process+0x48>)
 800a1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1bc:	0800a1ed 	.word	0x0800a1ed
 800a1c0:	0800a20f 	.word	0x0800a20f
 800a1c4:	0800a223 	.word	0x0800a223
 800a1c8:	0800a429 	.word	0x0800a429
 800a1cc:	0800a44f 	.word	0x0800a44f
 800a1d0:	0800a2b1 	.word	0x0800a2b1
 800a1d4:	0800a3df 	.word	0x0800a3df
 800a1d8:	0800a2e1 	.word	0x0800a2e1
 800a1dc:	0800a301 	.word	0x0800a301
 800a1e0:	0800a321 	.word	0x0800a321
 800a1e4:	0800a34f 	.word	0x0800a34f
 800a1e8:	0800a411 	.word	0x0800a411
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f000 812c 	beq.w	800a452 <USBH_Process+0x2de>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	701a      	strb	r2, [r3, #0]
 800a200:	20c8      	movs	r0, #200	; 0xc8
 800a202:	f001 fb9e 	bl	800b942 <USBH_Delay>
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f001 fa91 	bl	800b72e <USBH_LL_ResetPort>
 800a20c:	e121      	b.n	800a452 <USBH_Process+0x2de>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a214:	2b01      	cmp	r3, #1
 800a216:	f040 811e 	bne.w	800a456 <USBH_Process+0x2e2>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2202      	movs	r2, #2
 800a21e:	701a      	strb	r2, [r3, #0]
 800a220:	e119      	b.n	800a456 <USBH_Process+0x2e2>
 800a222:	2064      	movs	r0, #100	; 0x64
 800a224:	f001 fb8d 	bl	800b942 <USBH_Delay>
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f001 fa5b 	bl	800b6e4 <USBH_LL_GetSpeed>
 800a22e:	4603      	mov	r3, r0
 800a230:	461a      	mov	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2205      	movs	r2, #5
 800a23c:	701a      	strb	r2, [r3, #0]
 800a23e:	2100      	movs	r1, #0
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f001 f868 	bl	800b316 <USBH_AllocPipe>
 800a246:	4603      	mov	r3, r0
 800a248:	461a      	mov	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	715a      	strb	r2, [r3, #5]
 800a24e:	2180      	movs	r1, #128	; 0x80
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f001 f860 	bl	800b316 <USBH_AllocPipe>
 800a256:	4603      	mov	r3, r0
 800a258:	461a      	mov	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	711a      	strb	r2, [r3, #4]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	7919      	ldrb	r1, [r3, #4]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	7992      	ldrb	r2, [r2, #6]
 800a272:	b292      	uxth	r2, r2
 800a274:	9202      	str	r2, [sp, #8]
 800a276:	2200      	movs	r2, #0
 800a278:	9201      	str	r2, [sp, #4]
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	4603      	mov	r3, r0
 800a27e:	2280      	movs	r2, #128	; 0x80
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f001 f819 	bl	800b2b8 <USBH_OpenPipe>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	7959      	ldrb	r1, [r3, #5]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	7992      	ldrb	r2, [r2, #6]
 800a29a:	b292      	uxth	r2, r2
 800a29c:	9202      	str	r2, [sp, #8]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	9201      	str	r2, [sp, #4]
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 f805 	bl	800b2b8 <USBH_OpenPipe>
 800a2ae:	e0e3      	b.n	800a478 <USBH_Process+0x304>
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f8e7 	bl	800a484 <USBH_HandleEnum>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f040 80ce 	bne.w	800a45a <USBH_Process+0x2e6>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d103      	bne.n	800a2d8 <USBH_Process+0x164>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2208      	movs	r2, #8
 800a2d4:	701a      	strb	r2, [r3, #0]
 800a2d6:	e0c0      	b.n	800a45a <USBH_Process+0x2e6>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2207      	movs	r2, #7
 800a2dc:	701a      	strb	r2, [r3, #0]
 800a2de:	e0bc      	b.n	800a45a <USBH_Process+0x2e6>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f000 80b9 	beq.w	800a45e <USBH_Process+0x2ea>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a2f2:	2101      	movs	r1, #1
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	4798      	blx	r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2208      	movs	r2, #8
 800a2fc:	701a      	strb	r2, [r3, #0]
 800a2fe:	e0ae      	b.n	800a45e <USBH_Process+0x2ea>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800a306:	b29b      	uxth	r3, r3
 800a308:	4619      	mov	r1, r3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 fb59 	bl	800a9c2 <USBH_SetCfg>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	f040 80a5 	bne.w	800a462 <USBH_Process+0x2ee>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2209      	movs	r2, #9
 800a31c:	701a      	strb	r2, [r3, #0]
 800a31e:	e0a0      	b.n	800a462 <USBH_Process+0x2ee>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800a326:	f003 0320 	and.w	r3, r3, #32
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00b      	beq.n	800a346 <USBH_Process+0x1d2>
 800a32e:	2101      	movs	r1, #1
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 fb69 	bl	800aa08 <USBH_SetFeature>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f040 8094 	bne.w	800a466 <USBH_Process+0x2f2>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	220a      	movs	r2, #10
 800a342:	701a      	strb	r2, [r3, #0]
 800a344:	e08f      	b.n	800a466 <USBH_Process+0x2f2>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	220a      	movs	r2, #10
 800a34a:	701a      	strb	r2, [r3, #0]
 800a34c:	e08b      	b.n	800a466 <USBH_Process+0x2f2>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 8088 	beq.w	800a46a <USBH_Process+0x2f6>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
 800a362:	2300      	movs	r3, #0
 800a364:	73fb      	strb	r3, [r7, #15]
 800a366:	e017      	b.n	800a398 <USBH_Process+0x224>
 800a368:	7bfb      	ldrb	r3, [r7, #15]
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	33dc      	adds	r3, #220	; 0xdc
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4413      	add	r3, r2
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	791a      	ldrb	r2, [r3, #4]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d108      	bne.n	800a392 <USBH_Process+0x21e>
 800a380:	7bfb      	ldrb	r3, [r7, #15]
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	33dc      	adds	r3, #220	; 0xdc
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
 800a392:	7bfb      	ldrb	r3, [r7, #15]
 800a394:	3301      	adds	r3, #1
 800a396:	73fb      	strb	r3, [r7, #15]
 800a398:	7bfb      	ldrb	r3, [r7, #15]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d0e4      	beq.n	800a368 <USBH_Process+0x1f4>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d016      	beq.n	800a3d6 <USBH_Process+0x262>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	4798      	blx	r3
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d109      	bne.n	800a3ce <USBH_Process+0x25a>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2206      	movs	r2, #6
 800a3be:	701a      	strb	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a3c6:	2103      	movs	r1, #3
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	4798      	blx	r3
 800a3cc:	e04d      	b.n	800a46a <USBH_Process+0x2f6>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	220d      	movs	r2, #13
 800a3d2:	701a      	strb	r2, [r3, #0]
 800a3d4:	e049      	b.n	800a46a <USBH_Process+0x2f6>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	220d      	movs	r2, #13
 800a3da:	701a      	strb	r2, [r3, #0]
 800a3dc:	e045      	b.n	800a46a <USBH_Process+0x2f6>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00f      	beq.n	800a408 <USBH_Process+0x294>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	4798      	blx	r3
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	73bb      	strb	r3, [r7, #14]
 800a3f8:	7bbb      	ldrb	r3, [r7, #14]
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d136      	bne.n	800a46e <USBH_Process+0x2fa>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	220b      	movs	r2, #11
 800a404:	701a      	strb	r2, [r3, #0]
 800a406:	e032      	b.n	800a46e <USBH_Process+0x2fa>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	220d      	movs	r2, #13
 800a40c:	701a      	strb	r2, [r3, #0]
 800a40e:	e02e      	b.n	800a46e <USBH_Process+0x2fa>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a416:	2b00      	cmp	r3, #0
 800a418:	d02b      	beq.n	800a472 <USBH_Process+0x2fe>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	4798      	blx	r3
 800a426:	e024      	b.n	800a472 <USBH_Process+0x2fe>
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7ff fdbd 	bl	8009fa8 <DeInitStateMachine>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a434:	2b00      	cmp	r3, #0
 800a436:	d01e      	beq.n	800a476 <USBH_Process+0x302>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	4798      	blx	r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
 800a44c:	e013      	b.n	800a476 <USBH_Process+0x302>
 800a44e:	bf00      	nop
 800a450:	e012      	b.n	800a478 <USBH_Process+0x304>
 800a452:	bf00      	nop
 800a454:	e010      	b.n	800a478 <USBH_Process+0x304>
 800a456:	bf00      	nop
 800a458:	e00e      	b.n	800a478 <USBH_Process+0x304>
 800a45a:	bf00      	nop
 800a45c:	e00c      	b.n	800a478 <USBH_Process+0x304>
 800a45e:	bf00      	nop
 800a460:	e00a      	b.n	800a478 <USBH_Process+0x304>
 800a462:	bf00      	nop
 800a464:	e008      	b.n	800a478 <USBH_Process+0x304>
 800a466:	bf00      	nop
 800a468:	e006      	b.n	800a478 <USBH_Process+0x304>
 800a46a:	bf00      	nop
 800a46c:	e004      	b.n	800a478 <USBH_Process+0x304>
 800a46e:	bf00      	nop
 800a470:	e002      	b.n	800a478 <USBH_Process+0x304>
 800a472:	bf00      	nop
 800a474:	e000      	b.n	800a478 <USBH_Process+0x304>
 800a476:	bf00      	nop
 800a478:	2300      	movs	r3, #0
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop

0800a484 <USBH_HandleEnum>:
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af04      	add	r7, sp, #16
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	2301      	movs	r3, #1
 800a48e:	73fb      	strb	r3, [r7, #15]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	785b      	ldrb	r3, [r3, #1]
 800a494:	2b07      	cmp	r3, #7
 800a496:	f200 80f8 	bhi.w	800a68a <USBH_HandleEnum+0x206>
 800a49a:	a201      	add	r2, pc, #4	; (adr r2, 800a4a0 <USBH_HandleEnum+0x1c>)
 800a49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a0:	0800a4c1 	.word	0x0800a4c1
 800a4a4:	0800a533 	.word	0x0800a533
 800a4a8:	0800a54b 	.word	0x0800a54b
 800a4ac:	0800a5c1 	.word	0x0800a5c1
 800a4b0:	0800a5d7 	.word	0x0800a5d7
 800a4b4:	0800a5f3 	.word	0x0800a5f3
 800a4b8:	0800a627 	.word	0x0800a627
 800a4bc:	0800a65b 	.word	0x0800a65b
 800a4c0:	2108      	movs	r1, #8
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f9ad 	bl	800a822 <USBH_Get_DevDesc>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f040 80df 	bne.w	800a68e <USBH_HandleEnum+0x20a>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	719a      	strb	r2, [r3, #6]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	705a      	strb	r2, [r3, #1]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	7919      	ldrb	r1, [r3, #4]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	7992      	ldrb	r2, [r2, #6]
 800a4f4:	b292      	uxth	r2, r2
 800a4f6:	9202      	str	r2, [sp, #8]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	9201      	str	r2, [sp, #4]
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	4603      	mov	r3, r0
 800a500:	2280      	movs	r2, #128	; 0x80
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fed8 	bl	800b2b8 <USBH_OpenPipe>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	7959      	ldrb	r1, [r3, #5]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	7992      	ldrb	r2, [r2, #6]
 800a51c:	b292      	uxth	r2, r2
 800a51e:	9202      	str	r2, [sp, #8]
 800a520:	2200      	movs	r2, #0
 800a522:	9201      	str	r2, [sp, #4]
 800a524:	9300      	str	r3, [sp, #0]
 800a526:	4603      	mov	r3, r0
 800a528:	2200      	movs	r2, #0
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fec4 	bl	800b2b8 <USBH_OpenPipe>
 800a530:	e0ad      	b.n	800a68e <USBH_HandleEnum+0x20a>
 800a532:	2112      	movs	r1, #18
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 f974 	bl	800a822 <USBH_Get_DevDesc>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f040 80a8 	bne.w	800a692 <USBH_HandleEnum+0x20e>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2202      	movs	r2, #2
 800a546:	705a      	strb	r2, [r3, #1]
 800a548:	e0a3      	b.n	800a692 <USBH_HandleEnum+0x20e>
 800a54a:	2101      	movs	r1, #1
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 fa14 	bl	800a97a <USBH_SetAddress>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	f040 809e 	bne.w	800a696 <USBH_HandleEnum+0x212>
 800a55a:	2002      	movs	r0, #2
 800a55c:	f001 f9f1 	bl	800b942 <USBH_Delay>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2203      	movs	r2, #3
 800a56c:	705a      	strb	r2, [r3, #1]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	7919      	ldrb	r1, [r3, #4]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	7992      	ldrb	r2, [r2, #6]
 800a582:	b292      	uxth	r2, r2
 800a584:	9202      	str	r2, [sp, #8]
 800a586:	2200      	movs	r2, #0
 800a588:	9201      	str	r2, [sp, #4]
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	4603      	mov	r3, r0
 800a58e:	2280      	movs	r2, #128	; 0x80
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fe91 	bl	800b2b8 <USBH_OpenPipe>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	7959      	ldrb	r1, [r3, #5]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	7992      	ldrb	r2, [r2, #6]
 800a5aa:	b292      	uxth	r2, r2
 800a5ac:	9202      	str	r2, [sp, #8]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	9201      	str	r2, [sp, #4]
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fe7d 	bl	800b2b8 <USBH_OpenPipe>
 800a5be:	e06a      	b.n	800a696 <USBH_HandleEnum+0x212>
 800a5c0:	2109      	movs	r1, #9
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f955 	bl	800a872 <USBH_Get_CfgDesc>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d165      	bne.n	800a69a <USBH_HandleEnum+0x216>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2204      	movs	r2, #4
 800a5d2:	705a      	strb	r2, [r3, #1]
 800a5d4:	e061      	b.n	800a69a <USBH_HandleEnum+0x216>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f947 	bl	800a872 <USBH_Get_CfgDesc>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d159      	bne.n	800a69e <USBH_HandleEnum+0x21a>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2205      	movs	r2, #5
 800a5ee:	705a      	strb	r2, [r3, #1]
 800a5f0:	e055      	b.n	800a69e <USBH_HandleEnum+0x21a>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d010      	beq.n	800a61e <USBH_HandleEnum+0x19a>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 800a608:	23ff      	movs	r3, #255	; 0xff
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f955 	bl	800a8ba <USBH_Get_StringDesc>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d145      	bne.n	800a6a2 <USBH_HandleEnum+0x21e>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2206      	movs	r2, #6
 800a61a:	705a      	strb	r2, [r3, #1]
 800a61c:	e041      	b.n	800a6a2 <USBH_HandleEnum+0x21e>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2206      	movs	r2, #6
 800a622:	705a      	strb	r2, [r3, #1]
 800a624:	e03d      	b.n	800a6a2 <USBH_HandleEnum+0x21e>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d010      	beq.n	800a652 <USBH_HandleEnum+0x1ce>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 800a63c:	23ff      	movs	r3, #255	; 0xff
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f93b 	bl	800a8ba <USBH_Get_StringDesc>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d12d      	bne.n	800a6a6 <USBH_HandleEnum+0x222>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2207      	movs	r2, #7
 800a64e:	705a      	strb	r2, [r3, #1]
 800a650:	e029      	b.n	800a6a6 <USBH_HandleEnum+0x222>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2207      	movs	r2, #7
 800a656:	705a      	strb	r2, [r3, #1]
 800a658:	e025      	b.n	800a6a6 <USBH_HandleEnum+0x222>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00f      	beq.n	800a684 <USBH_HandleEnum+0x200>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 800a670:	23ff      	movs	r3, #255	; 0xff
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 f921 	bl	800a8ba <USBH_Get_StringDesc>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d115      	bne.n	800a6aa <USBH_HandleEnum+0x226>
 800a67e:	2300      	movs	r3, #0
 800a680:	73fb      	strb	r3, [r7, #15]
 800a682:	e012      	b.n	800a6aa <USBH_HandleEnum+0x226>
 800a684:	2300      	movs	r3, #0
 800a686:	73fb      	strb	r3, [r7, #15]
 800a688:	e00f      	b.n	800a6aa <USBH_HandleEnum+0x226>
 800a68a:	bf00      	nop
 800a68c:	e00e      	b.n	800a6ac <USBH_HandleEnum+0x228>
 800a68e:	bf00      	nop
 800a690:	e00c      	b.n	800a6ac <USBH_HandleEnum+0x228>
 800a692:	bf00      	nop
 800a694:	e00a      	b.n	800a6ac <USBH_HandleEnum+0x228>
 800a696:	bf00      	nop
 800a698:	e008      	b.n	800a6ac <USBH_HandleEnum+0x228>
 800a69a:	bf00      	nop
 800a69c:	e006      	b.n	800a6ac <USBH_HandleEnum+0x228>
 800a69e:	bf00      	nop
 800a6a0:	e004      	b.n	800a6ac <USBH_HandleEnum+0x228>
 800a6a2:	bf00      	nop
 800a6a4:	e002      	b.n	800a6ac <USBH_HandleEnum+0x228>
 800a6a6:	bf00      	nop
 800a6a8:	e000      	b.n	800a6ac <USBH_HandleEnum+0x228>
 800a6aa:	bf00      	nop
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop

0800a6b8 <USBH_LL_SetTimer>:
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	683a      	ldr	r2, [r7, #0]
 800a6c6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
 800a6ca:	bf00      	nop
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <USBH_LL_IncTimer>:
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a6e4:	1c5a      	adds	r2, r3, #1
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f804 	bl	800a6fa <USBH_HandleSof>
 800a6f2:	bf00      	nop
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <USBH_HandleSof>:
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b082      	sub	sp, #8
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	b2db      	uxtb	r3, r3
 800a708:	2b0b      	cmp	r3, #11
 800a70a:	d10a      	bne.n	800a722 <USBH_HandleSof+0x28>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a712:	2b00      	cmp	r3, #0
 800a714:	d005      	beq.n	800a722 <USBH_HandleSof+0x28>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	4798      	blx	r3
 800a722:	bf00      	nop
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <USBH_LL_PortEnabled>:
 800a72a:	b480      	push	{r7}
 800a72c:	b083      	sub	sp, #12
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 800a73a:	bf00      	nop
 800a73c:	370c      	adds	r7, #12
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr

0800a746 <USBH_LL_PortDisabled>:
 800a746:	b480      	push	{r7}
 800a748:	b083      	sub	sp, #12
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 800a756:	bf00      	nop
 800a758:	370c      	adds	r7, #12
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr

0800a762 <USBH_IsPortEnabled>:
 800a762:	b480      	push	{r7}
 800a764:	b083      	sub	sp, #12
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a770:	4618      	mov	r0, r3
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <USBH_LL_Connect>:
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10f      	bne.n	800a7ae <USBH_LL_Connect+0x32>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2201      	movs	r2, #1
 800a792:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00e      	beq.n	800a7be <USBH_LL_Connect+0x42>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a7a6:	2104      	movs	r1, #4
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	4798      	blx	r3
 800a7ac:	e007      	b.n	800a7be <USBH_LL_Connect+0x42>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d102      	bne.n	800a7be <USBH_LL_Connect+0x42>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2202      	movs	r2, #2
 800a7bc:	701a      	strb	r2, [r3, #0]
 800a7be:	2300      	movs	r3, #0
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <USBH_LL_Disconnect>:
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 ff6c 	bl	800b6ae <USBH_LL_Stop>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	791b      	ldrb	r3, [r3, #4]
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fdb8 	bl	800b352 <USBH_FreePipe>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	795b      	ldrb	r3, [r3, #5]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fdb2 	bl	800b352 <USBH_FreePipe>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d005      	beq.n	800a80c <USBH_LL_Disconnect+0x44>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a806:	2105      	movs	r1, #5
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	4798      	blx	r3
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 ff33 	bl	800b678 <USBH_LL_Start>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2203      	movs	r2, #3
 800a816:	701a      	strb	r2, [r3, #0]
 800a818:	2300      	movs	r3, #0
 800a81a:	4618      	mov	r0, r3
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <USBH_Get_DevDesc>:
 800a822:	b580      	push	{r7, lr}
 800a824:	b086      	sub	sp, #24
 800a826:	af02      	add	r7, sp, #8
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	460b      	mov	r3, r1
 800a82c:	70fb      	strb	r3, [r7, #3]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 800a834:	78fb      	ldrb	r3, [r7, #3]
 800a836:	b29b      	uxth	r3, r3
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	4613      	mov	r3, r2
 800a83c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a840:	2100      	movs	r1, #0
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f864 	bl	800a910 <USBH_GetDescriptor>
 800a848:	4603      	mov	r3, r0
 800a84a:	73fb      	strb	r3, [r7, #15]
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d10a      	bne.n	800a868 <USBH_Get_DevDesc+0x46>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f203 3022 	addw	r0, r3, #802	; 0x322
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a85e:	78fa      	ldrb	r2, [r7, #3]
 800a860:	b292      	uxth	r2, r2
 800a862:	4619      	mov	r1, r3
 800a864:	f000 f918 	bl	800aa98 <USBH_ParseDevDesc>
 800a868:	7bfb      	ldrb	r3, [r7, #15]
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <USBH_Get_CfgDesc>:
 800a872:	b580      	push	{r7, lr}
 800a874:	b086      	sub	sp, #24
 800a876:	af02      	add	r7, sp, #8
 800a878:	6078      	str	r0, [r7, #4]
 800a87a:	460b      	mov	r3, r1
 800a87c:	807b      	strh	r3, [r7, #2]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	331c      	adds	r3, #28
 800a882:	60fb      	str	r3, [r7, #12]
 800a884:	887b      	ldrh	r3, [r7, #2]
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a88e:	2100      	movs	r1, #0
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f83d 	bl	800a910 <USBH_GetDescriptor>
 800a896:	4603      	mov	r3, r0
 800a898:	72fb      	strb	r3, [r7, #11]
 800a89a:	7afb      	ldrb	r3, [r7, #11]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d107      	bne.n	800a8b0 <USBH_Get_CfgDesc+0x3e>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800a8a6:	887a      	ldrh	r2, [r7, #2]
 800a8a8:	68f9      	ldr	r1, [r7, #12]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 f964 	bl	800ab78 <USBH_ParseCfgDesc>
 800a8b0:	7afb      	ldrb	r3, [r7, #11]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3710      	adds	r7, #16
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <USBH_Get_StringDesc>:
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b088      	sub	sp, #32
 800a8be:	af02      	add	r7, sp, #8
 800a8c0:	60f8      	str	r0, [r7, #12]
 800a8c2:	607a      	str	r2, [r7, #4]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	72fb      	strb	r3, [r7, #11]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	813b      	strh	r3, [r7, #8]
 800a8ce:	7afb      	ldrb	r3, [r7, #11]
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f503 718e 	add.w	r1, r3, #284	; 0x11c
 800a8de:	893b      	ldrh	r3, [r7, #8]
 800a8e0:	9300      	str	r3, [sp, #0]
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f000 f812 	bl	800a910 <USBH_GetDescriptor>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	75fb      	strb	r3, [r7, #23]
 800a8f0:	7dfb      	ldrb	r3, [r7, #23]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d107      	bne.n	800a906 <USBH_Get_StringDesc+0x4c>
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a8fc:	893a      	ldrh	r2, [r7, #8]
 800a8fe:	6879      	ldr	r1, [r7, #4]
 800a900:	4618      	mov	r0, r3
 800a902:	f000 fa37 	bl	800ad74 <USBH_ParseStringDesc>
 800a906:	7dfb      	ldrb	r3, [r7, #23]
 800a908:	4618      	mov	r0, r3
 800a90a:	3718      	adds	r7, #24
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USBH_GetDescriptor>:
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	607b      	str	r3, [r7, #4]
 800a91a:	460b      	mov	r3, r1
 800a91c:	72fb      	strb	r3, [r7, #11]
 800a91e:	4613      	mov	r3, r2
 800a920:	813b      	strh	r3, [r7, #8]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	789b      	ldrb	r3, [r3, #2]
 800a926:	2b01      	cmp	r3, #1
 800a928:	d11c      	bne.n	800a964 <USBH_GetDescriptor+0x54>
 800a92a:	7afb      	ldrb	r3, [r7, #11]
 800a92c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a930:	b2da      	uxtb	r2, r3
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	741a      	strb	r2, [r3, #16]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2206      	movs	r2, #6
 800a93a:	745a      	strb	r2, [r3, #17]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	893a      	ldrh	r2, [r7, #8]
 800a940:	825a      	strh	r2, [r3, #18]
 800a942:	893b      	ldrh	r3, [r7, #8]
 800a944:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a94c:	d104      	bne.n	800a958 <USBH_GetDescriptor+0x48>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f240 4209 	movw	r2, #1033	; 0x409
 800a954:	829a      	strh	r2, [r3, #20]
 800a956:	e002      	b.n	800a95e <USBH_GetDescriptor+0x4e>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	829a      	strh	r2, [r3, #20]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	8b3a      	ldrh	r2, [r7, #24]
 800a962:	82da      	strh	r2, [r3, #22]
 800a964:	8b3b      	ldrh	r3, [r7, #24]
 800a966:	461a      	mov	r2, r3
 800a968:	6879      	ldr	r1, [r7, #4]
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f000 fa50 	bl	800ae10 <USBH_CtlReq>
 800a970:	4603      	mov	r3, r0
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <USBH_SetAddress>:
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b082      	sub	sp, #8
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	460b      	mov	r3, r1
 800a984:	70fb      	strb	r3, [r7, #3]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	789b      	ldrb	r3, [r3, #2]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d10f      	bne.n	800a9ae <USBH_SetAddress+0x34>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	741a      	strb	r2, [r3, #16]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2205      	movs	r2, #5
 800a998:	745a      	strb	r2, [r3, #17]
 800a99a:	78fb      	ldrb	r3, [r7, #3]
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	825a      	strh	r2, [r3, #18]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	829a      	strh	r2, [r3, #20]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	82da      	strh	r2, [r3, #22]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 fa2c 	bl	800ae10 <USBH_CtlReq>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3708      	adds	r7, #8
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <USBH_SetCfg>:
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	807b      	strh	r3, [r7, #2]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	789b      	ldrb	r3, [r3, #2]
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d10e      	bne.n	800a9f4 <USBH_SetCfg+0x32>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	741a      	strb	r2, [r3, #16]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2209      	movs	r2, #9
 800a9e0:	745a      	strb	r2, [r3, #17]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	887a      	ldrh	r2, [r7, #2]
 800a9e6:	825a      	strh	r2, [r3, #18]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	829a      	strh	r2, [r3, #20]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	82da      	strh	r2, [r3, #22]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fa09 	bl	800ae10 <USBH_CtlReq>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	4618      	mov	r0, r3
 800aa02:	3708      	adds	r7, #8
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <USBH_SetFeature>:
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	460b      	mov	r3, r1
 800aa12:	70fb      	strb	r3, [r7, #3]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	789b      	ldrb	r3, [r3, #2]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d10f      	bne.n	800aa3c <USBH_SetFeature+0x34>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	741a      	strb	r2, [r3, #16]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2203      	movs	r2, #3
 800aa26:	745a      	strb	r2, [r3, #17]
 800aa28:	78fb      	ldrb	r3, [r7, #3]
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	825a      	strh	r2, [r3, #18]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	829a      	strh	r2, [r3, #20]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	82da      	strh	r2, [r3, #22]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	2100      	movs	r1, #0
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 f9e5 	bl	800ae10 <USBH_CtlReq>
 800aa46:	4603      	mov	r3, r0
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBH_ClrFeature>:
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70fb      	strb	r3, [r7, #3]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	789b      	ldrb	r3, [r3, #2]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d10f      	bne.n	800aa84 <USBH_ClrFeature+0x34>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2202      	movs	r2, #2
 800aa68:	741a      	strb	r2, [r3, #16]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	745a      	strb	r2, [r3, #17]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	825a      	strh	r2, [r3, #18]
 800aa76:	78fb      	ldrb	r3, [r7, #3]
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	829a      	strh	r2, [r3, #20]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	82da      	strh	r2, [r3, #22]
 800aa84:	2200      	movs	r2, #0
 800aa86:	2100      	movs	r1, #0
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 f9c1 	bl	800ae10 <USBH_CtlReq>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <USBH_ParseDevDesc>:
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	80fb      	strh	r3, [r7, #6]
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	781a      	ldrb	r2, [r3, #0]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	701a      	strb	r2, [r3, #0]
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	785a      	ldrb	r2, [r3, #1]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	705a      	strb	r2, [r3, #1]
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	3302      	adds	r3, #2
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	3303      	adds	r3, #3
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	021b      	lsls	r3, r3, #8
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	4313      	orrs	r3, r2
 800aacc:	b29a      	uxth	r2, r3
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	805a      	strh	r2, [r3, #2]
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	791a      	ldrb	r2, [r3, #4]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	711a      	strb	r2, [r3, #4]
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	795a      	ldrb	r2, [r3, #5]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	715a      	strb	r2, [r3, #5]
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	799a      	ldrb	r2, [r3, #6]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	719a      	strb	r2, [r3, #6]
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	79da      	ldrb	r2, [r3, #7]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	71da      	strb	r2, [r3, #7]
 800aaf2:	88fb      	ldrh	r3, [r7, #6]
 800aaf4:	2b08      	cmp	r3, #8
 800aaf6:	d939      	bls.n	800ab6c <USBH_ParseDevDesc+0xd4>
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	3308      	adds	r3, #8
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	b29a      	uxth	r2, r3
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	3309      	adds	r3, #9
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	021b      	lsls	r3, r3, #8
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	811a      	strh	r2, [r3, #8]
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	330a      	adds	r3, #10
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	b29a      	uxth	r2, r3
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	330b      	adds	r3, #11
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	021b      	lsls	r3, r3, #8
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	815a      	strh	r2, [r3, #10]
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	330c      	adds	r3, #12
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	330d      	adds	r3, #13
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	021b      	lsls	r3, r3, #8
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	4313      	orrs	r3, r2
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	819a      	strh	r2, [r3, #12]
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	7b9a      	ldrb	r2, [r3, #14]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	739a      	strb	r2, [r3, #14]
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	7bda      	ldrb	r2, [r3, #15]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	73da      	strb	r2, [r3, #15]
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	7c1a      	ldrb	r2, [r3, #16]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	741a      	strb	r2, [r3, #16]
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	7c5a      	ldrb	r2, [r3, #17]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	745a      	strb	r2, [r3, #17]
 800ab6c:	bf00      	nop
 800ab6e:	3714      	adds	r7, #20
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <USBH_ParseCfgDesc>:
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b08a      	sub	sp, #40	; 0x28
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	4613      	mov	r3, r2
 800ab84:	80fb      	strh	r3, [r7, #6]
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	627b      	str	r3, [r7, #36]	; 0x24
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ab90:	2300      	movs	r3, #0
 800ab92:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	627b      	str	r3, [r7, #36]	; 0x24
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	781a      	ldrb	r2, [r3, #0]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	701a      	strb	r2, [r3, #0]
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	785a      	ldrb	r2, [r3, #1]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	705a      	strb	r2, [r3, #1]
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	3302      	adds	r3, #2
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	3303      	adds	r3, #3
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	b29b      	uxth	r3, r3
 800abba:	021b      	lsls	r3, r3, #8
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	4313      	orrs	r3, r2
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	805a      	strh	r2, [r3, #2]
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	791a      	ldrb	r2, [r3, #4]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	711a      	strb	r2, [r3, #4]
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	795a      	ldrb	r2, [r3, #5]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	715a      	strb	r2, [r3, #5]
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	799a      	ldrb	r2, [r3, #6]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	719a      	strb	r2, [r3, #6]
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	79da      	ldrb	r2, [r3, #7]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	71da      	strb	r2, [r3, #7]
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	7a1a      	ldrb	r2, [r3, #8]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	721a      	strb	r2, [r3, #8]
 800abee:	88fb      	ldrh	r3, [r7, #6]
 800abf0:	2b09      	cmp	r3, #9
 800abf2:	d95f      	bls.n	800acb4 <USBH_ParseCfgDesc+0x13c>
 800abf4:	2309      	movs	r3, #9
 800abf6:	82fb      	strh	r3, [r7, #22]
 800abf8:	2300      	movs	r3, #0
 800abfa:	61fb      	str	r3, [r7, #28]
 800abfc:	e051      	b.n	800aca2 <USBH_ParseCfgDesc+0x12a>
 800abfe:	f107 0316 	add.w	r3, r7, #22
 800ac02:	4619      	mov	r1, r3
 800ac04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac06:	f000 f8e8 	bl	800adda <USBH_GetNextDesc>
 800ac0a:	6278      	str	r0, [r7, #36]	; 0x24
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	785b      	ldrb	r3, [r3, #1]
 800ac10:	2b04      	cmp	r3, #4
 800ac12:	d146      	bne.n	800aca2 <USBH_ParseCfgDesc+0x12a>
 800ac14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac18:	221a      	movs	r2, #26
 800ac1a:	fb02 f303 	mul.w	r3, r2, r3
 800ac1e:	3308      	adds	r3, #8
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	4413      	add	r3, r2
 800ac24:	3302      	adds	r3, #2
 800ac26:	61fb      	str	r3, [r7, #28]
 800ac28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac2a:	69f8      	ldr	r0, [r7, #28]
 800ac2c:	f000 f846 	bl	800acbc <USBH_ParseInterfaceDesc>
 800ac30:	2300      	movs	r3, #0
 800ac32:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ac36:	2300      	movs	r3, #0
 800ac38:	61bb      	str	r3, [r7, #24]
 800ac3a:	e022      	b.n	800ac82 <USBH_ParseCfgDesc+0x10a>
 800ac3c:	f107 0316 	add.w	r3, r7, #22
 800ac40:	4619      	mov	r1, r3
 800ac42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac44:	f000 f8c9 	bl	800adda <USBH_GetNextDesc>
 800ac48:	6278      	str	r0, [r7, #36]	; 0x24
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4c:	785b      	ldrb	r3, [r3, #1]
 800ac4e:	2b05      	cmp	r3, #5
 800ac50:	d117      	bne.n	800ac82 <USBH_ParseCfgDesc+0x10a>
 800ac52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac56:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ac5a:	3201      	adds	r2, #1
 800ac5c:	00d2      	lsls	r2, r2, #3
 800ac5e:	211a      	movs	r1, #26
 800ac60:	fb01 f303 	mul.w	r3, r1, r3
 800ac64:	4413      	add	r3, r2
 800ac66:	3308      	adds	r3, #8
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	61bb      	str	r3, [r7, #24]
 800ac70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac72:	69b8      	ldr	r0, [r7, #24]
 800ac74:	f000 f851 	bl	800ad1a <USBH_ParseEPDesc>
 800ac78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	791b      	ldrb	r3, [r3, #4]
 800ac86:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d204      	bcs.n	800ac98 <USBH_ParseCfgDesc+0x120>
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	885a      	ldrh	r2, [r3, #2]
 800ac92:	8afb      	ldrh	r3, [r7, #22]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d8d1      	bhi.n	800ac3c <USBH_ParseCfgDesc+0xc4>
 800ac98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aca2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d804      	bhi.n	800acb4 <USBH_ParseCfgDesc+0x13c>
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	885a      	ldrh	r2, [r3, #2]
 800acae:	8afb      	ldrh	r3, [r7, #22]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d8a4      	bhi.n	800abfe <USBH_ParseCfgDesc+0x86>
 800acb4:	bf00      	nop
 800acb6:	3728      	adds	r7, #40	; 0x28
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <USBH_ParseInterfaceDesc>:
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	781a      	ldrb	r2, [r3, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	701a      	strb	r2, [r3, #0]
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	785a      	ldrb	r2, [r3, #1]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	705a      	strb	r2, [r3, #1]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	789a      	ldrb	r2, [r3, #2]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	709a      	strb	r2, [r3, #2]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	78da      	ldrb	r2, [r3, #3]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	70da      	strb	r2, [r3, #3]
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	791a      	ldrb	r2, [r3, #4]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	711a      	strb	r2, [r3, #4]
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	795a      	ldrb	r2, [r3, #5]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	715a      	strb	r2, [r3, #5]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	799a      	ldrb	r2, [r3, #6]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	719a      	strb	r2, [r3, #6]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	79da      	ldrb	r2, [r3, #7]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	71da      	strb	r2, [r3, #7]
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	7a1a      	ldrb	r2, [r3, #8]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	721a      	strb	r2, [r3, #8]
 800ad0e:	bf00      	nop
 800ad10:	370c      	adds	r7, #12
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr

0800ad1a <USBH_ParseEPDesc>:
 800ad1a:	b480      	push	{r7}
 800ad1c:	b083      	sub	sp, #12
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	6039      	str	r1, [r7, #0]
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	781a      	ldrb	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	701a      	strb	r2, [r3, #0]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	785a      	ldrb	r2, [r3, #1]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	705a      	strb	r2, [r3, #1]
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	789a      	ldrb	r2, [r3, #2]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	709a      	strb	r2, [r3, #2]
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	78da      	ldrb	r2, [r3, #3]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	70da      	strb	r2, [r3, #3]
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	3304      	adds	r3, #4
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	b29a      	uxth	r2, r3
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	3305      	adds	r3, #5
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	021b      	lsls	r3, r3, #8
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	809a      	strh	r2, [r3, #4]
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	799a      	ldrb	r2, [r3, #6]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	719a      	strb	r2, [r3, #6]
 800ad68:	bf00      	nop
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <USBH_ParseStringDesc>:
 800ad74:	b480      	push	{r7}
 800ad76:	b087      	sub	sp, #28
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	4613      	mov	r3, r2
 800ad80:	80fb      	strh	r3, [r7, #6]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	3301      	adds	r3, #1
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	2b03      	cmp	r3, #3
 800ad8a:	d120      	bne.n	800adce <USBH_ParseStringDesc+0x5a>
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	1e9a      	subs	r2, r3, #2
 800ad92:	88fb      	ldrh	r3, [r7, #6]
 800ad94:	4293      	cmp	r3, r2
 800ad96:	bf28      	it	cs
 800ad98:	4613      	movcs	r3, r2
 800ad9a:	82bb      	strh	r3, [r7, #20]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	3302      	adds	r3, #2
 800ada0:	60fb      	str	r3, [r7, #12]
 800ada2:	2300      	movs	r3, #0
 800ada4:	82fb      	strh	r3, [r7, #22]
 800ada6:	e00b      	b.n	800adc0 <USBH_ParseStringDesc+0x4c>
 800ada8:	8afb      	ldrh	r3, [r7, #22]
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	4413      	add	r3, r2
 800adae:	781a      	ldrb	r2, [r3, #0]
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	701a      	strb	r2, [r3, #0]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	3301      	adds	r3, #1
 800adb8:	60bb      	str	r3, [r7, #8]
 800adba:	8afb      	ldrh	r3, [r7, #22]
 800adbc:	3302      	adds	r3, #2
 800adbe:	82fb      	strh	r3, [r7, #22]
 800adc0:	8afa      	ldrh	r2, [r7, #22]
 800adc2:	8abb      	ldrh	r3, [r7, #20]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d3ef      	bcc.n	800ada8 <USBH_ParseStringDesc+0x34>
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	2200      	movs	r2, #0
 800adcc:	701a      	strb	r2, [r3, #0]
 800adce:	bf00      	nop
 800add0:	371c      	adds	r7, #28
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr

0800adda <USBH_GetNextDesc>:
 800adda:	b480      	push	{r7}
 800addc:	b085      	sub	sp, #20
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
 800ade2:	6039      	str	r1, [r7, #0]
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	881a      	ldrh	r2, [r3, #0]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	b29b      	uxth	r3, r3
 800adee:	4413      	add	r3, r2
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	801a      	strh	r2, [r3, #0]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	461a      	mov	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4413      	add	r3, r2
 800ae00:	60fb      	str	r3, [r7, #12]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	4618      	mov	r0, r3
 800ae06:	3714      	adds	r7, #20
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <USBH_CtlReq>:
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b086      	sub	sp, #24
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	60b9      	str	r1, [r7, #8]
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	80fb      	strh	r3, [r7, #6]
 800ae1e:	2301      	movs	r3, #1
 800ae20:	75fb      	strb	r3, [r7, #23]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	789b      	ldrb	r3, [r3, #2]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d002      	beq.n	800ae30 <USBH_CtlReq+0x20>
 800ae2a:	2b02      	cmp	r3, #2
 800ae2c:	d00f      	beq.n	800ae4e <USBH_CtlReq+0x3e>
 800ae2e:	e034      	b.n	800ae9a <USBH_CtlReq+0x8a>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	68ba      	ldr	r2, [r7, #8]
 800ae34:	609a      	str	r2, [r3, #8]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	88fa      	ldrh	r2, [r7, #6]
 800ae3a:	819a      	strh	r2, [r3, #12]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	761a      	strb	r2, [r3, #24]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2202      	movs	r2, #2
 800ae46:	709a      	strb	r2, [r3, #2]
 800ae48:	2301      	movs	r3, #1
 800ae4a:	75fb      	strb	r3, [r7, #23]
 800ae4c:	e025      	b.n	800ae9a <USBH_CtlReq+0x8a>
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f000 f828 	bl	800aea4 <USBH_HandleControl>
 800ae54:	4603      	mov	r3, r0
 800ae56:	75fb      	strb	r3, [r7, #23]
 800ae58:	7dfb      	ldrb	r3, [r7, #23]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d108      	bne.n	800ae70 <USBH_CtlReq+0x60>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2201      	movs	r2, #1
 800ae62:	709a      	strb	r2, [r3, #2]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2200      	movs	r2, #0
 800ae68:	761a      	strb	r2, [r3, #24]
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	75fb      	strb	r3, [r7, #23]
 800ae6e:	e013      	b.n	800ae98 <USBH_CtlReq+0x88>
 800ae70:	7dfb      	ldrb	r3, [r7, #23]
 800ae72:	2b03      	cmp	r3, #3
 800ae74:	d108      	bne.n	800ae88 <USBH_CtlReq+0x78>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	709a      	strb	r2, [r3, #2]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	761a      	strb	r2, [r3, #24]
 800ae82:	2303      	movs	r3, #3
 800ae84:	75fb      	strb	r3, [r7, #23]
 800ae86:	e007      	b.n	800ae98 <USBH_CtlReq+0x88>
 800ae88:	7dfb      	ldrb	r3, [r7, #23]
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d104      	bne.n	800ae98 <USBH_CtlReq+0x88>
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2201      	movs	r2, #1
 800ae92:	709a      	strb	r2, [r3, #2]
 800ae94:	2302      	movs	r3, #2
 800ae96:	75fb      	strb	r3, [r7, #23]
 800ae98:	bf00      	nop
 800ae9a:	7dfb      	ldrb	r3, [r7, #23]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3718      	adds	r7, #24
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <USBH_HandleControl>:
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af02      	add	r7, sp, #8
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	2301      	movs	r3, #1
 800aeae:	73fb      	strb	r3, [r7, #15]
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	73bb      	strb	r3, [r7, #14]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	7e1b      	ldrb	r3, [r3, #24]
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	2b0a      	cmp	r3, #10
 800aebc:	f200 814c 	bhi.w	800b158 <USBH_HandleControl+0x2b4>
 800aec0:	a201      	add	r2, pc, #4	; (adr r2, 800aec8 <USBH_HandleControl+0x24>)
 800aec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec6:	bf00      	nop
 800aec8:	0800aef5 	.word	0x0800aef5
 800aecc:	0800af0f 	.word	0x0800af0f
 800aed0:	0800af79 	.word	0x0800af79
 800aed4:	0800af9f 	.word	0x0800af9f
 800aed8:	0800afd7 	.word	0x0800afd7
 800aedc:	0800b003 	.word	0x0800b003
 800aee0:	0800b055 	.word	0x0800b055
 800aee4:	0800b077 	.word	0x0800b077
 800aee8:	0800b0b3 	.word	0x0800b0b3
 800aeec:	0800b0db 	.word	0x0800b0db
 800aef0:	0800b119 	.word	0x0800b119
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f103 0110 	add.w	r1, r3, #16
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	795b      	ldrb	r3, [r3, #5]
 800aefe:	461a      	mov	r2, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f939 	bl	800b178 <USBH_CtlSendSetup>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2202      	movs	r2, #2
 800af0a:	761a      	strb	r2, [r3, #24]
 800af0c:	e12f      	b.n	800b16e <USBH_HandleControl+0x2ca>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	795b      	ldrb	r3, [r3, #5]
 800af12:	4619      	mov	r1, r3
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fcb7 	bl	800b888 <USBH_LL_GetURBState>
 800af1a:	4603      	mov	r3, r0
 800af1c:	73bb      	strb	r3, [r7, #14]
 800af1e:	7bbb      	ldrb	r3, [r7, #14]
 800af20:	2b01      	cmp	r3, #1
 800af22:	d11e      	bne.n	800af62 <USBH_HandleControl+0xbe>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	7c1b      	ldrb	r3, [r3, #16]
 800af28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af2c:	737b      	strb	r3, [r7, #13]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	8adb      	ldrh	r3, [r3, #22]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00a      	beq.n	800af4c <USBH_HandleControl+0xa8>
 800af36:	7b7b      	ldrb	r3, [r7, #13]
 800af38:	2b80      	cmp	r3, #128	; 0x80
 800af3a:	d103      	bne.n	800af44 <USBH_HandleControl+0xa0>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2203      	movs	r2, #3
 800af40:	761a      	strb	r2, [r3, #24]
 800af42:	e10b      	b.n	800b15c <USBH_HandleControl+0x2b8>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2205      	movs	r2, #5
 800af48:	761a      	strb	r2, [r3, #24]
 800af4a:	e107      	b.n	800b15c <USBH_HandleControl+0x2b8>
 800af4c:	7b7b      	ldrb	r3, [r7, #13]
 800af4e:	2b80      	cmp	r3, #128	; 0x80
 800af50:	d103      	bne.n	800af5a <USBH_HandleControl+0xb6>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2209      	movs	r2, #9
 800af56:	761a      	strb	r2, [r3, #24]
 800af58:	e100      	b.n	800b15c <USBH_HandleControl+0x2b8>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2207      	movs	r2, #7
 800af5e:	761a      	strb	r2, [r3, #24]
 800af60:	e0fc      	b.n	800b15c <USBH_HandleControl+0x2b8>
 800af62:	7bbb      	ldrb	r3, [r7, #14]
 800af64:	2b04      	cmp	r3, #4
 800af66:	d003      	beq.n	800af70 <USBH_HandleControl+0xcc>
 800af68:	7bbb      	ldrb	r3, [r7, #14]
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	f040 80f6 	bne.w	800b15c <USBH_HandleControl+0x2b8>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	220b      	movs	r2, #11
 800af74:	761a      	strb	r2, [r3, #24]
 800af76:	e0f1      	b.n	800b15c <USBH_HandleControl+0x2b8>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800af7e:	b29a      	uxth	r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	81da      	strh	r2, [r3, #14]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6899      	ldr	r1, [r3, #8]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	899a      	ldrh	r2, [r3, #12]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	791b      	ldrb	r3, [r3, #4]
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f930 	bl	800b1f6 <USBH_CtlReceiveData>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2204      	movs	r2, #4
 800af9a:	761a      	strb	r2, [r3, #24]
 800af9c:	e0e7      	b.n	800b16e <USBH_HandleControl+0x2ca>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	791b      	ldrb	r3, [r3, #4]
 800afa2:	4619      	mov	r1, r3
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fc6f 	bl	800b888 <USBH_LL_GetURBState>
 800afaa:	4603      	mov	r3, r0
 800afac:	73bb      	strb	r3, [r7, #14]
 800afae:	7bbb      	ldrb	r3, [r7, #14]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d102      	bne.n	800afba <USBH_HandleControl+0x116>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2209      	movs	r2, #9
 800afb8:	761a      	strb	r2, [r3, #24]
 800afba:	7bbb      	ldrb	r3, [r7, #14]
 800afbc:	2b05      	cmp	r3, #5
 800afbe:	d102      	bne.n	800afc6 <USBH_HandleControl+0x122>
 800afc0:	2303      	movs	r3, #3
 800afc2:	73fb      	strb	r3, [r7, #15]
 800afc4:	e0cc      	b.n	800b160 <USBH_HandleControl+0x2bc>
 800afc6:	7bbb      	ldrb	r3, [r7, #14]
 800afc8:	2b04      	cmp	r3, #4
 800afca:	f040 80c9 	bne.w	800b160 <USBH_HandleControl+0x2bc>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	220b      	movs	r2, #11
 800afd2:	761a      	strb	r2, [r3, #24]
 800afd4:	e0c4      	b.n	800b160 <USBH_HandleControl+0x2bc>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6899      	ldr	r1, [r3, #8]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	899a      	ldrh	r2, [r3, #12]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	7958      	ldrb	r0, [r3, #5]
 800afe2:	2301      	movs	r3, #1
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	4603      	mov	r3, r0
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f8df 	bl	800b1ac <USBH_CtlSendData>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800aff4:	b29a      	uxth	r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	81da      	strh	r2, [r3, #14]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2206      	movs	r2, #6
 800affe:	761a      	strb	r2, [r3, #24]
 800b000:	e0b5      	b.n	800b16e <USBH_HandleControl+0x2ca>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	795b      	ldrb	r3, [r3, #5]
 800b006:	4619      	mov	r1, r3
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fc3d 	bl	800b888 <USBH_LL_GetURBState>
 800b00e:	4603      	mov	r3, r0
 800b010:	73bb      	strb	r3, [r7, #14]
 800b012:	7bbb      	ldrb	r3, [r7, #14]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d103      	bne.n	800b020 <USBH_HandleControl+0x17c>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2207      	movs	r2, #7
 800b01c:	761a      	strb	r2, [r3, #24]
 800b01e:	e0a1      	b.n	800b164 <USBH_HandleControl+0x2c0>
 800b020:	7bbb      	ldrb	r3, [r7, #14]
 800b022:	2b05      	cmp	r3, #5
 800b024:	d105      	bne.n	800b032 <USBH_HandleControl+0x18e>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	220c      	movs	r2, #12
 800b02a:	761a      	strb	r2, [r3, #24]
 800b02c:	2303      	movs	r3, #3
 800b02e:	73fb      	strb	r3, [r7, #15]
 800b030:	e098      	b.n	800b164 <USBH_HandleControl+0x2c0>
 800b032:	7bbb      	ldrb	r3, [r7, #14]
 800b034:	2b02      	cmp	r3, #2
 800b036:	d103      	bne.n	800b040 <USBH_HandleControl+0x19c>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2205      	movs	r2, #5
 800b03c:	761a      	strb	r2, [r3, #24]
 800b03e:	e091      	b.n	800b164 <USBH_HandleControl+0x2c0>
 800b040:	7bbb      	ldrb	r3, [r7, #14]
 800b042:	2b04      	cmp	r3, #4
 800b044:	f040 808e 	bne.w	800b164 <USBH_HandleControl+0x2c0>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	220b      	movs	r2, #11
 800b04c:	761a      	strb	r2, [r3, #24]
 800b04e:	2302      	movs	r3, #2
 800b050:	73fb      	strb	r3, [r7, #15]
 800b052:	e087      	b.n	800b164 <USBH_HandleControl+0x2c0>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	791b      	ldrb	r3, [r3, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	2100      	movs	r1, #0
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f8ca 	bl	800b1f6 <USBH_CtlReceiveData>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800b068:	b29a      	uxth	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	81da      	strh	r2, [r3, #14]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2208      	movs	r2, #8
 800b072:	761a      	strb	r2, [r3, #24]
 800b074:	e07b      	b.n	800b16e <USBH_HandleControl+0x2ca>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	791b      	ldrb	r3, [r3, #4]
 800b07a:	4619      	mov	r1, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 fc03 	bl	800b888 <USBH_LL_GetURBState>
 800b082:	4603      	mov	r3, r0
 800b084:	73bb      	strb	r3, [r7, #14]
 800b086:	7bbb      	ldrb	r3, [r7, #14]
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d105      	bne.n	800b098 <USBH_HandleControl+0x1f4>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	220d      	movs	r2, #13
 800b090:	761a      	strb	r2, [r3, #24]
 800b092:	2300      	movs	r3, #0
 800b094:	73fb      	strb	r3, [r7, #15]
 800b096:	e067      	b.n	800b168 <USBH_HandleControl+0x2c4>
 800b098:	7bbb      	ldrb	r3, [r7, #14]
 800b09a:	2b04      	cmp	r3, #4
 800b09c:	d103      	bne.n	800b0a6 <USBH_HandleControl+0x202>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	220b      	movs	r2, #11
 800b0a2:	761a      	strb	r2, [r3, #24]
 800b0a4:	e060      	b.n	800b168 <USBH_HandleControl+0x2c4>
 800b0a6:	7bbb      	ldrb	r3, [r7, #14]
 800b0a8:	2b05      	cmp	r3, #5
 800b0aa:	d15d      	bne.n	800b168 <USBH_HandleControl+0x2c4>
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	73fb      	strb	r3, [r7, #15]
 800b0b0:	e05a      	b.n	800b168 <USBH_HandleControl+0x2c4>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	795a      	ldrb	r2, [r3, #5]
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	2200      	movs	r2, #0
 800b0be:	2100      	movs	r1, #0
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 f873 	bl	800b1ac <USBH_CtlSendData>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	81da      	strh	r2, [r3, #14]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	220a      	movs	r2, #10
 800b0d6:	761a      	strb	r2, [r3, #24]
 800b0d8:	e049      	b.n	800b16e <USBH_HandleControl+0x2ca>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	795b      	ldrb	r3, [r3, #5]
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fbd1 	bl	800b888 <USBH_LL_GetURBState>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	73bb      	strb	r3, [r7, #14]
 800b0ea:	7bbb      	ldrb	r3, [r7, #14]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d105      	bne.n	800b0fc <USBH_HandleControl+0x258>
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	73fb      	strb	r3, [r7, #15]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	220d      	movs	r2, #13
 800b0f8:	761a      	strb	r2, [r3, #24]
 800b0fa:	e037      	b.n	800b16c <USBH_HandleControl+0x2c8>
 800b0fc:	7bbb      	ldrb	r3, [r7, #14]
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d103      	bne.n	800b10a <USBH_HandleControl+0x266>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2209      	movs	r2, #9
 800b106:	761a      	strb	r2, [r3, #24]
 800b108:	e030      	b.n	800b16c <USBH_HandleControl+0x2c8>
 800b10a:	7bbb      	ldrb	r3, [r7, #14]
 800b10c:	2b04      	cmp	r3, #4
 800b10e:	d12d      	bne.n	800b16c <USBH_HandleControl+0x2c8>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	220b      	movs	r2, #11
 800b114:	761a      	strb	r2, [r3, #24]
 800b116:	e029      	b.n	800b16c <USBH_HandleControl+0x2c8>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	7e5b      	ldrb	r3, [r3, #25]
 800b11c:	3301      	adds	r3, #1
 800b11e:	b2da      	uxtb	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	765a      	strb	r2, [r3, #25]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	7e5b      	ldrb	r3, [r3, #25]
 800b128:	2b02      	cmp	r3, #2
 800b12a:	d809      	bhi.n	800b140 <USBH_HandleControl+0x29c>
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fabe 	bl	800b6ae <USBH_LL_Stop>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2201      	movs	r2, #1
 800b136:	761a      	strb	r2, [r3, #24]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	709a      	strb	r2, [r3, #2]
 800b13e:	e016      	b.n	800b16e <USBH_HandleControl+0x2ca>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b146:	2106      	movs	r1, #6
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	4798      	blx	r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	765a      	strb	r2, [r3, #25]
 800b152:	2302      	movs	r3, #2
 800b154:	73fb      	strb	r3, [r7, #15]
 800b156:	e00a      	b.n	800b16e <USBH_HandleControl+0x2ca>
 800b158:	bf00      	nop
 800b15a:	e008      	b.n	800b16e <USBH_HandleControl+0x2ca>
 800b15c:	bf00      	nop
 800b15e:	e006      	b.n	800b16e <USBH_HandleControl+0x2ca>
 800b160:	bf00      	nop
 800b162:	e004      	b.n	800b16e <USBH_HandleControl+0x2ca>
 800b164:	bf00      	nop
 800b166:	e002      	b.n	800b16e <USBH_HandleControl+0x2ca>
 800b168:	bf00      	nop
 800b16a:	e000      	b.n	800b16e <USBH_HandleControl+0x2ca>
 800b16c:	bf00      	nop
 800b16e:	7bfb      	ldrb	r3, [r7, #15]
 800b170:	4618      	mov	r0, r3
 800b172:	3710      	adds	r7, #16
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <USBH_CtlSendSetup>:
 800b178:	b580      	push	{r7, lr}
 800b17a:	b088      	sub	sp, #32
 800b17c:	af04      	add	r7, sp, #16
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	4613      	mov	r3, r2
 800b184:	71fb      	strb	r3, [r7, #7]
 800b186:	79f9      	ldrb	r1, [r7, #7]
 800b188:	2300      	movs	r3, #0
 800b18a:	9303      	str	r3, [sp, #12]
 800b18c:	2308      	movs	r3, #8
 800b18e:	9302      	str	r3, [sp, #8]
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	9301      	str	r3, [sp, #4]
 800b194:	2300      	movs	r3, #0
 800b196:	9300      	str	r3, [sp, #0]
 800b198:	2300      	movs	r3, #0
 800b19a:	2200      	movs	r2, #0
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f000 fb42 	bl	800b826 <USBH_LL_SubmitURB>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3710      	adds	r7, #16
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <USBH_CtlSendData>:
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b088      	sub	sp, #32
 800b1b0:	af04      	add	r7, sp, #16
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	4611      	mov	r1, r2
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	80fb      	strh	r3, [r7, #6]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	717b      	strb	r3, [r7, #5]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <USBH_CtlSendData+0x24>
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	763b      	strb	r3, [r7, #24]
 800b1d0:	7979      	ldrb	r1, [r7, #5]
 800b1d2:	7e3b      	ldrb	r3, [r7, #24]
 800b1d4:	9303      	str	r3, [sp, #12]
 800b1d6:	88fb      	ldrh	r3, [r7, #6]
 800b1d8:	9302      	str	r3, [sp, #8]
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	9301      	str	r3, [sp, #4]
 800b1de:	2301      	movs	r3, #1
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f000 fb1d 	bl	800b826 <USBH_LL_SubmitURB>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <USBH_CtlReceiveData>:
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b088      	sub	sp, #32
 800b1fa:	af04      	add	r7, sp, #16
 800b1fc:	60f8      	str	r0, [r7, #12]
 800b1fe:	60b9      	str	r1, [r7, #8]
 800b200:	4611      	mov	r1, r2
 800b202:	461a      	mov	r2, r3
 800b204:	460b      	mov	r3, r1
 800b206:	80fb      	strh	r3, [r7, #6]
 800b208:	4613      	mov	r3, r2
 800b20a:	717b      	strb	r3, [r7, #5]
 800b20c:	7979      	ldrb	r1, [r7, #5]
 800b20e:	2300      	movs	r3, #0
 800b210:	9303      	str	r3, [sp, #12]
 800b212:	88fb      	ldrh	r3, [r7, #6]
 800b214:	9302      	str	r3, [sp, #8]
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	9301      	str	r3, [sp, #4]
 800b21a:	2301      	movs	r3, #1
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	2300      	movs	r3, #0
 800b220:	2201      	movs	r2, #1
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f000 faff 	bl	800b826 <USBH_LL_SubmitURB>
 800b228:	2300      	movs	r3, #0
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <USBH_BulkSendData>:
 800b232:	b580      	push	{r7, lr}
 800b234:	b088      	sub	sp, #32
 800b236:	af04      	add	r7, sp, #16
 800b238:	60f8      	str	r0, [r7, #12]
 800b23a:	60b9      	str	r1, [r7, #8]
 800b23c:	4611      	mov	r1, r2
 800b23e:	461a      	mov	r2, r3
 800b240:	460b      	mov	r3, r1
 800b242:	80fb      	strh	r3, [r7, #6]
 800b244:	4613      	mov	r3, r2
 800b246:	717b      	strb	r3, [r7, #5]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d001      	beq.n	800b256 <USBH_BulkSendData+0x24>
 800b252:	2300      	movs	r3, #0
 800b254:	763b      	strb	r3, [r7, #24]
 800b256:	7979      	ldrb	r1, [r7, #5]
 800b258:	7e3b      	ldrb	r3, [r7, #24]
 800b25a:	9303      	str	r3, [sp, #12]
 800b25c:	88fb      	ldrh	r3, [r7, #6]
 800b25e:	9302      	str	r3, [sp, #8]
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	9301      	str	r3, [sp, #4]
 800b264:	2301      	movs	r3, #1
 800b266:	9300      	str	r3, [sp, #0]
 800b268:	2302      	movs	r3, #2
 800b26a:	2200      	movs	r2, #0
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f000 fada 	bl	800b826 <USBH_LL_SubmitURB>
 800b272:	2300      	movs	r3, #0
 800b274:	4618      	mov	r0, r3
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <USBH_BulkReceiveData>:
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b088      	sub	sp, #32
 800b280:	af04      	add	r7, sp, #16
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	4611      	mov	r1, r2
 800b288:	461a      	mov	r2, r3
 800b28a:	460b      	mov	r3, r1
 800b28c:	80fb      	strh	r3, [r7, #6]
 800b28e:	4613      	mov	r3, r2
 800b290:	717b      	strb	r3, [r7, #5]
 800b292:	7979      	ldrb	r1, [r7, #5]
 800b294:	2300      	movs	r3, #0
 800b296:	9303      	str	r3, [sp, #12]
 800b298:	88fb      	ldrh	r3, [r7, #6]
 800b29a:	9302      	str	r3, [sp, #8]
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	9301      	str	r3, [sp, #4]
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f000 fabc 	bl	800b826 <USBH_LL_SubmitURB>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3710      	adds	r7, #16
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <USBH_OpenPipe>:
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af04      	add	r7, sp, #16
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	4608      	mov	r0, r1
 800b2c2:	4611      	mov	r1, r2
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	70fb      	strb	r3, [r7, #3]
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	70bb      	strb	r3, [r7, #2]
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	707b      	strb	r3, [r7, #1]
 800b2d2:	7878      	ldrb	r0, [r7, #1]
 800b2d4:	78ba      	ldrb	r2, [r7, #2]
 800b2d6:	78f9      	ldrb	r1, [r7, #3]
 800b2d8:	8b3b      	ldrh	r3, [r7, #24]
 800b2da:	9302      	str	r3, [sp, #8]
 800b2dc:	7d3b      	ldrb	r3, [r7, #20]
 800b2de:	9301      	str	r3, [sp, #4]
 800b2e0:	7c3b      	ldrb	r3, [r7, #16]
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 fa4f 	bl	800b78a <USBH_LL_OpenPipe>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3708      	adds	r7, #8
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <USBH_ClosePipe>:
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b082      	sub	sp, #8
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
 800b2fe:	460b      	mov	r3, r1
 800b300:	70fb      	strb	r3, [r7, #3]
 800b302:	78fb      	ldrb	r3, [r7, #3]
 800b304:	4619      	mov	r1, r3
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fa6e 	bl	800b7e8 <USBH_LL_ClosePipe>
 800b30c:	2300      	movs	r3, #0
 800b30e:	4618      	mov	r0, r3
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <USBH_AllocPipe>:
 800b316:	b580      	push	{r7, lr}
 800b318:	b084      	sub	sp, #16
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	460b      	mov	r3, r1
 800b320:	70fb      	strb	r3, [r7, #3]
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 f831 	bl	800b38a <USBH_GetFreePipe>
 800b328:	4603      	mov	r3, r0
 800b32a:	81fb      	strh	r3, [r7, #14]
 800b32c:	89fb      	ldrh	r3, [r7, #14]
 800b32e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b332:	4293      	cmp	r3, r2
 800b334:	d007      	beq.n	800b346 <USBH_AllocPipe+0x30>
 800b336:	78fb      	ldrb	r3, [r7, #3]
 800b338:	89fa      	ldrh	r2, [r7, #14]
 800b33a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	32e0      	adds	r2, #224	; 0xe0
 800b342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b346:	89fb      	ldrh	r3, [r7, #14]
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	4618      	mov	r0, r3
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <USBH_FreePipe>:
 800b352:	b480      	push	{r7}
 800b354:	b083      	sub	sp, #12
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
 800b35a:	460b      	mov	r3, r1
 800b35c:	70fb      	strb	r3, [r7, #3]
 800b35e:	78fb      	ldrb	r3, [r7, #3]
 800b360:	2b0a      	cmp	r3, #10
 800b362:	d80b      	bhi.n	800b37c <USBH_FreePipe+0x2a>
 800b364:	78fa      	ldrb	r2, [r7, #3]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	32e0      	adds	r2, #224	; 0xe0
 800b36a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b36e:	78fa      	ldrb	r2, [r7, #3]
 800b370:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	32e0      	adds	r2, #224	; 0xe0
 800b378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b37c:	2300      	movs	r3, #0
 800b37e:	4618      	mov	r0, r3
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr

0800b38a <USBH_GetFreePipe>:
 800b38a:	b480      	push	{r7}
 800b38c:	b085      	sub	sp, #20
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	2300      	movs	r3, #0
 800b394:	73fb      	strb	r3, [r7, #15]
 800b396:	2300      	movs	r3, #0
 800b398:	73fb      	strb	r3, [r7, #15]
 800b39a:	e00e      	b.n	800b3ba <USBH_GetFreePipe+0x30>
 800b39c:	7bfa      	ldrb	r2, [r7, #15]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	32e0      	adds	r2, #224	; 0xe0
 800b3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d102      	bne.n	800b3b4 <USBH_GetFreePipe+0x2a>
 800b3ae:	7bfb      	ldrb	r3, [r7, #15]
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	e007      	b.n	800b3c4 <USBH_GetFreePipe+0x3a>
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	73fb      	strb	r3, [r7, #15]
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	2b0a      	cmp	r3, #10
 800b3be:	d9ed      	bls.n	800b39c <USBH_GetFreePipe+0x12>
 800b3c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3714      	adds	r7, #20
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <MX_USB_HOST_Init>:
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	490e      	ldr	r1, [pc, #56]	; (800b410 <MX_USB_HOST_Init+0x40>)
 800b3d8:	480e      	ldr	r0, [pc, #56]	; (800b414 <MX_USB_HOST_Init+0x44>)
 800b3da:	f7fe fdbb 	bl	8009f54 <USBH_Init>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d001      	beq.n	800b3e8 <MX_USB_HOST_Init+0x18>
 800b3e4:	f7f5 fd9e 	bl	8000f24 <Error_Handler>
 800b3e8:	490b      	ldr	r1, [pc, #44]	; (800b418 <MX_USB_HOST_Init+0x48>)
 800b3ea:	480a      	ldr	r0, [pc, #40]	; (800b414 <MX_USB_HOST_Init+0x44>)
 800b3ec:	f7fe fe25 	bl	800a03a <USBH_RegisterClass>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d001      	beq.n	800b3fa <MX_USB_HOST_Init+0x2a>
 800b3f6:	f7f5 fd95 	bl	8000f24 <Error_Handler>
 800b3fa:	4806      	ldr	r0, [pc, #24]	; (800b414 <MX_USB_HOST_Init+0x44>)
 800b3fc:	f7fe feaa 	bl	800a154 <USBH_Start>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d001      	beq.n	800b40a <MX_USB_HOST_Init+0x3a>
 800b406:	f7f5 fd8d 	bl	8000f24 <Error_Handler>
 800b40a:	bf00      	nop
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	0800b431 	.word	0x0800b431
 800b414:	200008e0 	.word	0x200008e0
 800b418:	2000002c 	.word	0x2000002c

0800b41c <MX_USB_HOST_Process>:
 800b41c:	b580      	push	{r7, lr}
 800b41e:	af00      	add	r7, sp, #0
 800b420:	4802      	ldr	r0, [pc, #8]	; (800b42c <MX_USB_HOST_Process+0x10>)
 800b422:	f7fe fea7 	bl	800a174 <USBH_Process>
 800b426:	bf00      	nop
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	200008e0 	.word	0x200008e0

0800b430 <USBH_UserProcess>:
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	460b      	mov	r3, r1
 800b43a:	70fb      	strb	r3, [r7, #3]
 800b43c:	78fb      	ldrb	r3, [r7, #3]
 800b43e:	3b01      	subs	r3, #1
 800b440:	2b04      	cmp	r3, #4
 800b442:	d819      	bhi.n	800b478 <USBH_UserProcess+0x48>
 800b444:	a201      	add	r2, pc, #4	; (adr r2, 800b44c <USBH_UserProcess+0x1c>)
 800b446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b44a:	bf00      	nop
 800b44c:	0800b479 	.word	0x0800b479
 800b450:	0800b469 	.word	0x0800b469
 800b454:	0800b479 	.word	0x0800b479
 800b458:	0800b471 	.word	0x0800b471
 800b45c:	0800b461 	.word	0x0800b461
 800b460:	4b09      	ldr	r3, [pc, #36]	; (800b488 <USBH_UserProcess+0x58>)
 800b462:	2203      	movs	r2, #3
 800b464:	701a      	strb	r2, [r3, #0]
 800b466:	e008      	b.n	800b47a <USBH_UserProcess+0x4a>
 800b468:	4b07      	ldr	r3, [pc, #28]	; (800b488 <USBH_UserProcess+0x58>)
 800b46a:	2202      	movs	r2, #2
 800b46c:	701a      	strb	r2, [r3, #0]
 800b46e:	e004      	b.n	800b47a <USBH_UserProcess+0x4a>
 800b470:	4b05      	ldr	r3, [pc, #20]	; (800b488 <USBH_UserProcess+0x58>)
 800b472:	2201      	movs	r2, #1
 800b474:	701a      	strb	r2, [r3, #0]
 800b476:	e000      	b.n	800b47a <USBH_UserProcess+0x4a>
 800b478:	bf00      	nop
 800b47a:	bf00      	nop
 800b47c:	370c      	adds	r7, #12
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	2000055c 	.word	0x2000055c

0800b48c <HAL_HCD_MspInit>:
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b08a      	sub	sp, #40	; 0x28
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	f107 0314 	add.w	r3, r7, #20
 800b498:	2200      	movs	r2, #0
 800b49a:	601a      	str	r2, [r3, #0]
 800b49c:	605a      	str	r2, [r3, #4]
 800b49e:	609a      	str	r2, [r3, #8]
 800b4a0:	60da      	str	r2, [r3, #12]
 800b4a2:	611a      	str	r2, [r3, #16]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4ac:	d14e      	bne.n	800b54c <HAL_HCD_MspInit+0xc0>
 800b4ae:	4b29      	ldr	r3, [pc, #164]	; (800b554 <HAL_HCD_MspInit+0xc8>)
 800b4b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4b2:	4a28      	ldr	r2, [pc, #160]	; (800b554 <HAL_HCD_MspInit+0xc8>)
 800b4b4:	f043 0301 	orr.w	r3, r3, #1
 800b4b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4ba:	4b26      	ldr	r3, [pc, #152]	; (800b554 <HAL_HCD_MspInit+0xc8>)
 800b4bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4be:	f003 0301 	and.w	r3, r3, #1
 800b4c2:	613b      	str	r3, [r7, #16]
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b4ca:	617b      	str	r3, [r7, #20]
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	61bb      	str	r3, [r7, #24]
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	61fb      	str	r3, [r7, #28]
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	623b      	str	r3, [r7, #32]
 800b4d8:	230a      	movs	r3, #10
 800b4da:	627b      	str	r3, [r7, #36]	; 0x24
 800b4dc:	f107 0314 	add.w	r3, r7, #20
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b4e6:	f7f7 fb65 	bl	8002bb4 <HAL_GPIO_Init>
 800b4ea:	4b1a      	ldr	r3, [pc, #104]	; (800b554 <HAL_HCD_MspInit+0xc8>)
 800b4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4ee:	4a19      	ldr	r2, [pc, #100]	; (800b554 <HAL_HCD_MspInit+0xc8>)
 800b4f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b4f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4f6:	4b17      	ldr	r3, [pc, #92]	; (800b554 <HAL_HCD_MspInit+0xc8>)
 800b4f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b4fe:	60fb      	str	r3, [r7, #12]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	4b14      	ldr	r3, [pc, #80]	; (800b554 <HAL_HCD_MspInit+0xc8>)
 800b504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d114      	bne.n	800b538 <HAL_HCD_MspInit+0xac>
 800b50e:	4b11      	ldr	r3, [pc, #68]	; (800b554 <HAL_HCD_MspInit+0xc8>)
 800b510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b512:	4a10      	ldr	r2, [pc, #64]	; (800b554 <HAL_HCD_MspInit+0xc8>)
 800b514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b518:	6593      	str	r3, [r2, #88]	; 0x58
 800b51a:	4b0e      	ldr	r3, [pc, #56]	; (800b554 <HAL_HCD_MspInit+0xc8>)
 800b51c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b51e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b522:	60bb      	str	r3, [r7, #8]
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	f7f9 ff25 	bl	8005374 <HAL_PWREx_EnableVddUSB>
 800b52a:	4b0a      	ldr	r3, [pc, #40]	; (800b554 <HAL_HCD_MspInit+0xc8>)
 800b52c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b52e:	4a09      	ldr	r2, [pc, #36]	; (800b554 <HAL_HCD_MspInit+0xc8>)
 800b530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b534:	6593      	str	r3, [r2, #88]	; 0x58
 800b536:	e001      	b.n	800b53c <HAL_HCD_MspInit+0xb0>
 800b538:	f7f9 ff1c 	bl	8005374 <HAL_PWREx_EnableVddUSB>
 800b53c:	2200      	movs	r2, #0
 800b53e:	2100      	movs	r1, #0
 800b540:	2043      	movs	r0, #67	; 0x43
 800b542:	f7f7 fafc 	bl	8002b3e <HAL_NVIC_SetPriority>
 800b546:	2043      	movs	r0, #67	; 0x43
 800b548:	f7f7 fb15 	bl	8002b76 <HAL_NVIC_EnableIRQ>
 800b54c:	bf00      	nop
 800b54e:	3728      	adds	r7, #40	; 0x28
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	40021000 	.word	0x40021000

0800b558 <HAL_HCD_SOF_Callback>:
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b566:	4618      	mov	r0, r3
 800b568:	f7ff f8b5 	bl	800a6d6 <USBH_LL_IncTimer>
 800b56c:	bf00      	nop
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <HAL_HCD_Connect_Callback>:
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b582:	4618      	mov	r0, r3
 800b584:	f7ff f8fa 	bl	800a77c <USBH_LL_Connect>
 800b588:	bf00      	nop
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <HAL_HCD_Disconnect_Callback>:
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7ff f912 	bl	800a7c8 <USBH_LL_Disconnect>
 800b5a4:	bf00      	nop
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <HAL_HCD_HC_NotifyURBChange_Callback>:
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	70fb      	strb	r3, [r7, #3]
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	70bb      	strb	r3, [r7, #2]
 800b5bc:	bf00      	nop
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <HAL_HCD_PortEnabled_Callback>:
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7ff f8a7 	bl	800a72a <USBH_LL_PortEnabled>
 800b5dc:	bf00      	nop
 800b5de:	3708      	adds	r7, #8
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <HAL_HCD_PortDisabled_Callback>:
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7ff f8a7 	bl	800a746 <USBH_LL_PortDisabled>
 800b5f8:	bf00      	nop
 800b5fa:	3708      	adds	r7, #8
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <USBH_LL_Init>:
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d12a      	bne.n	800b668 <USBH_LL_Init+0x68>
 800b612:	4a18      	ldr	r2, [pc, #96]	; (800b674 <USBH_LL_Init+0x74>)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a15      	ldr	r2, [pc, #84]	; (800b674 <USBH_LL_Init+0x74>)
 800b61e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
 800b622:	4b14      	ldr	r3, [pc, #80]	; (800b674 <USBH_LL_Init+0x74>)
 800b624:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b628:	601a      	str	r2, [r3, #0]
 800b62a:	4b12      	ldr	r3, [pc, #72]	; (800b674 <USBH_LL_Init+0x74>)
 800b62c:	2208      	movs	r2, #8
 800b62e:	609a      	str	r2, [r3, #8]
 800b630:	4b10      	ldr	r3, [pc, #64]	; (800b674 <USBH_LL_Init+0x74>)
 800b632:	2201      	movs	r2, #1
 800b634:	60da      	str	r2, [r3, #12]
 800b636:	4b0f      	ldr	r3, [pc, #60]	; (800b674 <USBH_LL_Init+0x74>)
 800b638:	2200      	movs	r2, #0
 800b63a:	611a      	str	r2, [r3, #16]
 800b63c:	4b0d      	ldr	r3, [pc, #52]	; (800b674 <USBH_LL_Init+0x74>)
 800b63e:	2202      	movs	r2, #2
 800b640:	619a      	str	r2, [r3, #24]
 800b642:	4b0c      	ldr	r3, [pc, #48]	; (800b674 <USBH_LL_Init+0x74>)
 800b644:	2200      	movs	r2, #0
 800b646:	61da      	str	r2, [r3, #28]
 800b648:	480a      	ldr	r0, [pc, #40]	; (800b674 <USBH_LL_Init+0x74>)
 800b64a:	f7f7 fc8b 	bl	8002f64 <HAL_HCD_Init>
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d001      	beq.n	800b658 <USBH_LL_Init+0x58>
 800b654:	f7f5 fc66 	bl	8000f24 <Error_Handler>
 800b658:	4806      	ldr	r0, [pc, #24]	; (800b674 <USBH_LL_Init+0x74>)
 800b65a:	f7f8 f883 	bl	8003764 <HAL_HCD_GetCurrentFrame>
 800b65e:	4603      	mov	r3, r0
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7ff f828 	bl	800a6b8 <USBH_LL_SetTimer>
 800b668:	2300      	movs	r3, #0
 800b66a:	4618      	mov	r0, r3
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	20000cac 	.word	0x20000cac

0800b678 <USBH_LL_Start>:
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	2300      	movs	r3, #0
 800b682:	73fb      	strb	r3, [r7, #15]
 800b684:	2300      	movs	r3, #0
 800b686:	73bb      	strb	r3, [r7, #14]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b68e:	4618      	mov	r0, r3
 800b690:	f7f7 fff0 	bl	8003674 <HAL_HCD_Start>
 800b694:	4603      	mov	r3, r0
 800b696:	73fb      	strb	r3, [r7, #15]
 800b698:	7bfb      	ldrb	r3, [r7, #15]
 800b69a:	4618      	mov	r0, r3
 800b69c:	f000 f95c 	bl	800b958 <USBH_Get_USB_Status>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	73bb      	strb	r3, [r7, #14]
 800b6a4:	7bbb      	ldrb	r3, [r7, #14]
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <USBH_LL_Stop>:
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b084      	sub	sp, #16
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	73fb      	strb	r3, [r7, #15]
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	73bb      	strb	r3, [r7, #14]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7f7 fff8 	bl	80036ba <HAL_HCD_Stop>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	73fb      	strb	r3, [r7, #15]
 800b6ce:	7bfb      	ldrb	r3, [r7, #15]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f000 f941 	bl	800b958 <USBH_Get_USB_Status>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	73bb      	strb	r3, [r7, #14]
 800b6da:	7bbb      	ldrb	r3, [r7, #14]
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <USBH_LL_GetSpeed>:
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	73fb      	strb	r3, [r7, #15]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7f8 f842 	bl	8003780 <HAL_HCD_GetCurrentSpeed>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d007      	beq.n	800b712 <USBH_LL_GetSpeed+0x2e>
 800b702:	2b01      	cmp	r3, #1
 800b704:	d302      	bcc.n	800b70c <USBH_LL_GetSpeed+0x28>
 800b706:	2b02      	cmp	r3, #2
 800b708:	d006      	beq.n	800b718 <USBH_LL_GetSpeed+0x34>
 800b70a:	e008      	b.n	800b71e <USBH_LL_GetSpeed+0x3a>
 800b70c:	2300      	movs	r3, #0
 800b70e:	73fb      	strb	r3, [r7, #15]
 800b710:	e008      	b.n	800b724 <USBH_LL_GetSpeed+0x40>
 800b712:	2301      	movs	r3, #1
 800b714:	73fb      	strb	r3, [r7, #15]
 800b716:	e005      	b.n	800b724 <USBH_LL_GetSpeed+0x40>
 800b718:	2302      	movs	r3, #2
 800b71a:	73fb      	strb	r3, [r7, #15]
 800b71c:	e002      	b.n	800b724 <USBH_LL_GetSpeed+0x40>
 800b71e:	2301      	movs	r3, #1
 800b720:	73fb      	strb	r3, [r7, #15]
 800b722:	bf00      	nop
 800b724:	7bfb      	ldrb	r3, [r7, #15]
 800b726:	4618      	mov	r0, r3
 800b728:	3710      	adds	r7, #16
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <USBH_LL_ResetPort>:
 800b72e:	b580      	push	{r7, lr}
 800b730:	b084      	sub	sp, #16
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
 800b736:	2300      	movs	r3, #0
 800b738:	73fb      	strb	r3, [r7, #15]
 800b73a:	2300      	movs	r3, #0
 800b73c:	73bb      	strb	r3, [r7, #14]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b744:	4618      	mov	r0, r3
 800b746:	f7f7 ffd5 	bl	80036f4 <HAL_HCD_ResetPort>
 800b74a:	4603      	mov	r3, r0
 800b74c:	73fb      	strb	r3, [r7, #15]
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
 800b750:	4618      	mov	r0, r3
 800b752:	f000 f901 	bl	800b958 <USBH_Get_USB_Status>
 800b756:	4603      	mov	r3, r0
 800b758:	73bb      	strb	r3, [r7, #14]
 800b75a:	7bbb      	ldrb	r3, [r7, #14]
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <USBH_LL_GetLastXferSize>:
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	460b      	mov	r3, r1
 800b76e:	70fb      	strb	r3, [r7, #3]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b776:	78fa      	ldrb	r2, [r7, #3]
 800b778:	4611      	mov	r1, r2
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7f7 ffdd 	bl	800373a <HAL_HCD_HC_GetXferCount>
 800b780:	4603      	mov	r3, r0
 800b782:	4618      	mov	r0, r3
 800b784:	3708      	adds	r7, #8
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <USBH_LL_OpenPipe>:
 800b78a:	b590      	push	{r4, r7, lr}
 800b78c:	b089      	sub	sp, #36	; 0x24
 800b78e:	af04      	add	r7, sp, #16
 800b790:	6078      	str	r0, [r7, #4]
 800b792:	4608      	mov	r0, r1
 800b794:	4611      	mov	r1, r2
 800b796:	461a      	mov	r2, r3
 800b798:	4603      	mov	r3, r0
 800b79a:	70fb      	strb	r3, [r7, #3]
 800b79c:	460b      	mov	r3, r1
 800b79e:	70bb      	strb	r3, [r7, #2]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	707b      	strb	r3, [r7, #1]
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	73fb      	strb	r3, [r7, #15]
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	73bb      	strb	r3, [r7, #14]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800b7b2:	787c      	ldrb	r4, [r7, #1]
 800b7b4:	78ba      	ldrb	r2, [r7, #2]
 800b7b6:	78f9      	ldrb	r1, [r7, #3]
 800b7b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b7ba:	9302      	str	r3, [sp, #8]
 800b7bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b7c0:	9301      	str	r3, [sp, #4]
 800b7c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b7c6:	9300      	str	r3, [sp, #0]
 800b7c8:	4623      	mov	r3, r4
 800b7ca:	f7f7 fc2d 	bl	8003028 <HAL_HCD_HC_Init>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	73fb      	strb	r3, [r7, #15]
 800b7d2:	7bfb      	ldrb	r3, [r7, #15]
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f000 f8bf 	bl	800b958 <USBH_Get_USB_Status>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	73bb      	strb	r3, [r7, #14]
 800b7de:	7bbb      	ldrb	r3, [r7, #14]
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd90      	pop	{r4, r7, pc}

0800b7e8 <USBH_LL_ClosePipe>:
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	70fb      	strb	r3, [r7, #3]
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	73fb      	strb	r3, [r7, #15]
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	73bb      	strb	r3, [r7, #14]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b802:	78fa      	ldrb	r2, [r7, #3]
 800b804:	4611      	mov	r1, r2
 800b806:	4618      	mov	r0, r3
 800b808:	f7f7 fca6 	bl	8003158 <HAL_HCD_HC_Halt>
 800b80c:	4603      	mov	r3, r0
 800b80e:	73fb      	strb	r3, [r7, #15]
 800b810:	7bfb      	ldrb	r3, [r7, #15]
 800b812:	4618      	mov	r0, r3
 800b814:	f000 f8a0 	bl	800b958 <USBH_Get_USB_Status>
 800b818:	4603      	mov	r3, r0
 800b81a:	73bb      	strb	r3, [r7, #14]
 800b81c:	7bbb      	ldrb	r3, [r7, #14]
 800b81e:	4618      	mov	r0, r3
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <USBH_LL_SubmitURB>:
 800b826:	b590      	push	{r4, r7, lr}
 800b828:	b089      	sub	sp, #36	; 0x24
 800b82a:	af04      	add	r7, sp, #16
 800b82c:	6078      	str	r0, [r7, #4]
 800b82e:	4608      	mov	r0, r1
 800b830:	4611      	mov	r1, r2
 800b832:	461a      	mov	r2, r3
 800b834:	4603      	mov	r3, r0
 800b836:	70fb      	strb	r3, [r7, #3]
 800b838:	460b      	mov	r3, r1
 800b83a:	70bb      	strb	r3, [r7, #2]
 800b83c:	4613      	mov	r3, r2
 800b83e:	707b      	strb	r3, [r7, #1]
 800b840:	2300      	movs	r3, #0
 800b842:	73fb      	strb	r3, [r7, #15]
 800b844:	2300      	movs	r3, #0
 800b846:	73bb      	strb	r3, [r7, #14]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800b84e:	787c      	ldrb	r4, [r7, #1]
 800b850:	78ba      	ldrb	r2, [r7, #2]
 800b852:	78f9      	ldrb	r1, [r7, #3]
 800b854:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b858:	9303      	str	r3, [sp, #12]
 800b85a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b85c:	9302      	str	r3, [sp, #8]
 800b85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b860:	9301      	str	r3, [sp, #4]
 800b862:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	4623      	mov	r3, r4
 800b86a:	f7f7 fc99 	bl	80031a0 <HAL_HCD_HC_SubmitRequest>
 800b86e:	4603      	mov	r3, r0
 800b870:	73fb      	strb	r3, [r7, #15]
 800b872:	7bfb      	ldrb	r3, [r7, #15]
 800b874:	4618      	mov	r0, r3
 800b876:	f000 f86f 	bl	800b958 <USBH_Get_USB_Status>
 800b87a:	4603      	mov	r3, r0
 800b87c:	73bb      	strb	r3, [r7, #14]
 800b87e:	7bbb      	ldrb	r3, [r7, #14]
 800b880:	4618      	mov	r0, r3
 800b882:	3714      	adds	r7, #20
 800b884:	46bd      	mov	sp, r7
 800b886:	bd90      	pop	{r4, r7, pc}

0800b888 <USBH_LL_GetURBState>:
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	460b      	mov	r3, r1
 800b892:	70fb      	strb	r3, [r7, #3]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b89a:	78fa      	ldrb	r2, [r7, #3]
 800b89c:	4611      	mov	r1, r2
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7f7 ff36 	bl	8003710 <HAL_HCD_HC_GetURBState>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <USBH_LL_DriverVBUS>:
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b082      	sub	sp, #8
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	70fb      	strb	r3, [r7, #3]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d103      	bne.n	800b8cc <USBH_LL_DriverVBUS+0x1e>
 800b8c4:	78fb      	ldrb	r3, [r7, #3]
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f000 f872 	bl	800b9b0 <MX_DriverVbusFS>
 800b8cc:	20c8      	movs	r0, #200	; 0xc8
 800b8ce:	f7f7 f825 	bl	800291c <HAL_Delay>
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3708      	adds	r7, #8
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <USBH_LL_SetToggle>:
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	70fb      	strb	r3, [r7, #3]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	70bb      	strb	r3, [r7, #2]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b8f2:	60fb      	str	r3, [r7, #12]
 800b8f4:	78fa      	ldrb	r2, [r7, #3]
 800b8f6:	68f9      	ldr	r1, [r7, #12]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	4413      	add	r3, r2
 800b8fe:	00db      	lsls	r3, r3, #3
 800b900:	440b      	add	r3, r1
 800b902:	333b      	adds	r3, #59	; 0x3b
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00a      	beq.n	800b920 <USBH_LL_SetToggle+0x44>
 800b90a:	78fa      	ldrb	r2, [r7, #3]
 800b90c:	68f9      	ldr	r1, [r7, #12]
 800b90e:	4613      	mov	r3, r2
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	4413      	add	r3, r2
 800b914:	00db      	lsls	r3, r3, #3
 800b916:	440b      	add	r3, r1
 800b918:	3350      	adds	r3, #80	; 0x50
 800b91a:	78ba      	ldrb	r2, [r7, #2]
 800b91c:	701a      	strb	r2, [r3, #0]
 800b91e:	e009      	b.n	800b934 <USBH_LL_SetToggle+0x58>
 800b920:	78fa      	ldrb	r2, [r7, #3]
 800b922:	68f9      	ldr	r1, [r7, #12]
 800b924:	4613      	mov	r3, r2
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	4413      	add	r3, r2
 800b92a:	00db      	lsls	r3, r3, #3
 800b92c:	440b      	add	r3, r1
 800b92e:	3351      	adds	r3, #81	; 0x51
 800b930:	78ba      	ldrb	r2, [r7, #2]
 800b932:	701a      	strb	r2, [r3, #0]
 800b934:	2300      	movs	r3, #0
 800b936:	4618      	mov	r0, r3
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr

0800b942 <USBH_Delay>:
 800b942:	b580      	push	{r7, lr}
 800b944:	b082      	sub	sp, #8
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f7f6 ffe6 	bl	800291c <HAL_Delay>
 800b950:	bf00      	nop
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <USBH_Get_USB_Status>:
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	4603      	mov	r3, r0
 800b960:	71fb      	strb	r3, [r7, #7]
 800b962:	2300      	movs	r3, #0
 800b964:	73fb      	strb	r3, [r7, #15]
 800b966:	79fb      	ldrb	r3, [r7, #7]
 800b968:	2b03      	cmp	r3, #3
 800b96a:	d817      	bhi.n	800b99c <USBH_Get_USB_Status+0x44>
 800b96c:	a201      	add	r2, pc, #4	; (adr r2, 800b974 <USBH_Get_USB_Status+0x1c>)
 800b96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b972:	bf00      	nop
 800b974:	0800b985 	.word	0x0800b985
 800b978:	0800b98b 	.word	0x0800b98b
 800b97c:	0800b991 	.word	0x0800b991
 800b980:	0800b997 	.word	0x0800b997
 800b984:	2300      	movs	r3, #0
 800b986:	73fb      	strb	r3, [r7, #15]
 800b988:	e00b      	b.n	800b9a2 <USBH_Get_USB_Status+0x4a>
 800b98a:	2302      	movs	r3, #2
 800b98c:	73fb      	strb	r3, [r7, #15]
 800b98e:	e008      	b.n	800b9a2 <USBH_Get_USB_Status+0x4a>
 800b990:	2301      	movs	r3, #1
 800b992:	73fb      	strb	r3, [r7, #15]
 800b994:	e005      	b.n	800b9a2 <USBH_Get_USB_Status+0x4a>
 800b996:	2302      	movs	r3, #2
 800b998:	73fb      	strb	r3, [r7, #15]
 800b99a:	e002      	b.n	800b9a2 <USBH_Get_USB_Status+0x4a>
 800b99c:	2302      	movs	r3, #2
 800b99e:	73fb      	strb	r3, [r7, #15]
 800b9a0:	bf00      	nop
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3714      	adds	r7, #20
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <MX_DriverVbusFS>:
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	71fb      	strb	r3, [r7, #7]
 800b9ba:	79fb      	ldrb	r3, [r7, #7]
 800b9bc:	73fb      	strb	r3, [r7, #15]
 800b9be:	79fb      	ldrb	r3, [r7, #7]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d102      	bne.n	800b9ca <MX_DriverVbusFS+0x1a>
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	73fb      	strb	r3, [r7, #15]
 800b9c8:	e001      	b.n	800b9ce <MX_DriverVbusFS+0x1e>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	73fb      	strb	r3, [r7, #15]
 800b9ce:	7bfb      	ldrb	r3, [r7, #15]
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b9d6:	4803      	ldr	r0, [pc, #12]	; (800b9e4 <MX_DriverVbusFS+0x34>)
 800b9d8:	f7f7 faac 	bl	8002f34 <HAL_GPIO_WritePin>
 800b9dc:	bf00      	nop
 800b9de:	3710      	adds	r7, #16
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	48000800 	.word	0x48000800

0800b9e8 <__errno>:
 800b9e8:	4b01      	ldr	r3, [pc, #4]	; (800b9f0 <__errno+0x8>)
 800b9ea:	6818      	ldr	r0, [r3, #0]
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	2000004c 	.word	0x2000004c

0800b9f4 <__libc_init_array>:
 800b9f4:	b570      	push	{r4, r5, r6, lr}
 800b9f6:	4e0d      	ldr	r6, [pc, #52]	; (800ba2c <__libc_init_array+0x38>)
 800b9f8:	4c0d      	ldr	r4, [pc, #52]	; (800ba30 <__libc_init_array+0x3c>)
 800b9fa:	1ba4      	subs	r4, r4, r6
 800b9fc:	10a4      	asrs	r4, r4, #2
 800b9fe:	2500      	movs	r5, #0
 800ba00:	42a5      	cmp	r5, r4
 800ba02:	d109      	bne.n	800ba18 <__libc_init_array+0x24>
 800ba04:	4e0b      	ldr	r6, [pc, #44]	; (800ba34 <__libc_init_array+0x40>)
 800ba06:	4c0c      	ldr	r4, [pc, #48]	; (800ba38 <__libc_init_array+0x44>)
 800ba08:	f000 fc36 	bl	800c278 <_init>
 800ba0c:	1ba4      	subs	r4, r4, r6
 800ba0e:	10a4      	asrs	r4, r4, #2
 800ba10:	2500      	movs	r5, #0
 800ba12:	42a5      	cmp	r5, r4
 800ba14:	d105      	bne.n	800ba22 <__libc_init_array+0x2e>
 800ba16:	bd70      	pop	{r4, r5, r6, pc}
 800ba18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba1c:	4798      	blx	r3
 800ba1e:	3501      	adds	r5, #1
 800ba20:	e7ee      	b.n	800ba00 <__libc_init_array+0xc>
 800ba22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba26:	4798      	blx	r3
 800ba28:	3501      	adds	r5, #1
 800ba2a:	e7f2      	b.n	800ba12 <__libc_init_array+0x1e>
 800ba2c:	0800e288 	.word	0x0800e288
 800ba30:	0800e288 	.word	0x0800e288
 800ba34:	0800e288 	.word	0x0800e288
 800ba38:	0800e28c 	.word	0x0800e28c

0800ba3c <malloc>:
 800ba3c:	4b02      	ldr	r3, [pc, #8]	; (800ba48 <malloc+0xc>)
 800ba3e:	4601      	mov	r1, r0
 800ba40:	6818      	ldr	r0, [r3, #0]
 800ba42:	f000 b885 	b.w	800bb50 <_malloc_r>
 800ba46:	bf00      	nop
 800ba48:	2000004c 	.word	0x2000004c

0800ba4c <free>:
 800ba4c:	4b02      	ldr	r3, [pc, #8]	; (800ba58 <free+0xc>)
 800ba4e:	4601      	mov	r1, r0
 800ba50:	6818      	ldr	r0, [r3, #0]
 800ba52:	f000 b82f 	b.w	800bab4 <_free_r>
 800ba56:	bf00      	nop
 800ba58:	2000004c 	.word	0x2000004c

0800ba5c <memcpy>:
 800ba5c:	b510      	push	{r4, lr}
 800ba5e:	1e43      	subs	r3, r0, #1
 800ba60:	440a      	add	r2, r1
 800ba62:	4291      	cmp	r1, r2
 800ba64:	d100      	bne.n	800ba68 <memcpy+0xc>
 800ba66:	bd10      	pop	{r4, pc}
 800ba68:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba70:	e7f7      	b.n	800ba62 <memcpy+0x6>

0800ba72 <memmove>:
 800ba72:	4288      	cmp	r0, r1
 800ba74:	b510      	push	{r4, lr}
 800ba76:	eb01 0302 	add.w	r3, r1, r2
 800ba7a:	d807      	bhi.n	800ba8c <memmove+0x1a>
 800ba7c:	1e42      	subs	r2, r0, #1
 800ba7e:	4299      	cmp	r1, r3
 800ba80:	d00a      	beq.n	800ba98 <memmove+0x26>
 800ba82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba86:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ba8a:	e7f8      	b.n	800ba7e <memmove+0xc>
 800ba8c:	4283      	cmp	r3, r0
 800ba8e:	d9f5      	bls.n	800ba7c <memmove+0xa>
 800ba90:	1881      	adds	r1, r0, r2
 800ba92:	1ad2      	subs	r2, r2, r3
 800ba94:	42d3      	cmn	r3, r2
 800ba96:	d100      	bne.n	800ba9a <memmove+0x28>
 800ba98:	bd10      	pop	{r4, pc}
 800ba9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800baa2:	e7f7      	b.n	800ba94 <memmove+0x22>

0800baa4 <memset>:
 800baa4:	4402      	add	r2, r0
 800baa6:	4603      	mov	r3, r0
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d100      	bne.n	800baae <memset+0xa>
 800baac:	4770      	bx	lr
 800baae:	f803 1b01 	strb.w	r1, [r3], #1
 800bab2:	e7f9      	b.n	800baa8 <memset+0x4>

0800bab4 <_free_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4605      	mov	r5, r0
 800bab8:	2900      	cmp	r1, #0
 800baba:	d045      	beq.n	800bb48 <_free_r+0x94>
 800babc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bac0:	1f0c      	subs	r4, r1, #4
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	bfb8      	it	lt
 800bac6:	18e4      	addlt	r4, r4, r3
 800bac8:	f000 f8cc 	bl	800bc64 <__malloc_lock>
 800bacc:	4a1f      	ldr	r2, [pc, #124]	; (800bb4c <_free_r+0x98>)
 800bace:	6813      	ldr	r3, [r2, #0]
 800bad0:	4610      	mov	r0, r2
 800bad2:	b933      	cbnz	r3, 800bae2 <_free_r+0x2e>
 800bad4:	6063      	str	r3, [r4, #4]
 800bad6:	6014      	str	r4, [r2, #0]
 800bad8:	4628      	mov	r0, r5
 800bada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bade:	f000 b8c2 	b.w	800bc66 <__malloc_unlock>
 800bae2:	42a3      	cmp	r3, r4
 800bae4:	d90c      	bls.n	800bb00 <_free_r+0x4c>
 800bae6:	6821      	ldr	r1, [r4, #0]
 800bae8:	1862      	adds	r2, r4, r1
 800baea:	4293      	cmp	r3, r2
 800baec:	bf04      	itt	eq
 800baee:	681a      	ldreq	r2, [r3, #0]
 800baf0:	685b      	ldreq	r3, [r3, #4]
 800baf2:	6063      	str	r3, [r4, #4]
 800baf4:	bf04      	itt	eq
 800baf6:	1852      	addeq	r2, r2, r1
 800baf8:	6022      	streq	r2, [r4, #0]
 800bafa:	6004      	str	r4, [r0, #0]
 800bafc:	e7ec      	b.n	800bad8 <_free_r+0x24>
 800bafe:	4613      	mov	r3, r2
 800bb00:	685a      	ldr	r2, [r3, #4]
 800bb02:	b10a      	cbz	r2, 800bb08 <_free_r+0x54>
 800bb04:	42a2      	cmp	r2, r4
 800bb06:	d9fa      	bls.n	800bafe <_free_r+0x4a>
 800bb08:	6819      	ldr	r1, [r3, #0]
 800bb0a:	1858      	adds	r0, r3, r1
 800bb0c:	42a0      	cmp	r0, r4
 800bb0e:	d10b      	bne.n	800bb28 <_free_r+0x74>
 800bb10:	6820      	ldr	r0, [r4, #0]
 800bb12:	4401      	add	r1, r0
 800bb14:	1858      	adds	r0, r3, r1
 800bb16:	4282      	cmp	r2, r0
 800bb18:	6019      	str	r1, [r3, #0]
 800bb1a:	d1dd      	bne.n	800bad8 <_free_r+0x24>
 800bb1c:	6810      	ldr	r0, [r2, #0]
 800bb1e:	6852      	ldr	r2, [r2, #4]
 800bb20:	605a      	str	r2, [r3, #4]
 800bb22:	4401      	add	r1, r0
 800bb24:	6019      	str	r1, [r3, #0]
 800bb26:	e7d7      	b.n	800bad8 <_free_r+0x24>
 800bb28:	d902      	bls.n	800bb30 <_free_r+0x7c>
 800bb2a:	230c      	movs	r3, #12
 800bb2c:	602b      	str	r3, [r5, #0]
 800bb2e:	e7d3      	b.n	800bad8 <_free_r+0x24>
 800bb30:	6820      	ldr	r0, [r4, #0]
 800bb32:	1821      	adds	r1, r4, r0
 800bb34:	428a      	cmp	r2, r1
 800bb36:	bf04      	itt	eq
 800bb38:	6811      	ldreq	r1, [r2, #0]
 800bb3a:	6852      	ldreq	r2, [r2, #4]
 800bb3c:	6062      	str	r2, [r4, #4]
 800bb3e:	bf04      	itt	eq
 800bb40:	1809      	addeq	r1, r1, r0
 800bb42:	6021      	streq	r1, [r4, #0]
 800bb44:	605c      	str	r4, [r3, #4]
 800bb46:	e7c7      	b.n	800bad8 <_free_r+0x24>
 800bb48:	bd38      	pop	{r3, r4, r5, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20000560 	.word	0x20000560

0800bb50 <_malloc_r>:
 800bb50:	b570      	push	{r4, r5, r6, lr}
 800bb52:	1ccd      	adds	r5, r1, #3
 800bb54:	f025 0503 	bic.w	r5, r5, #3
 800bb58:	3508      	adds	r5, #8
 800bb5a:	2d0c      	cmp	r5, #12
 800bb5c:	bf38      	it	cc
 800bb5e:	250c      	movcc	r5, #12
 800bb60:	2d00      	cmp	r5, #0
 800bb62:	4606      	mov	r6, r0
 800bb64:	db01      	blt.n	800bb6a <_malloc_r+0x1a>
 800bb66:	42a9      	cmp	r1, r5
 800bb68:	d903      	bls.n	800bb72 <_malloc_r+0x22>
 800bb6a:	230c      	movs	r3, #12
 800bb6c:	6033      	str	r3, [r6, #0]
 800bb6e:	2000      	movs	r0, #0
 800bb70:	bd70      	pop	{r4, r5, r6, pc}
 800bb72:	f000 f877 	bl	800bc64 <__malloc_lock>
 800bb76:	4a21      	ldr	r2, [pc, #132]	; (800bbfc <_malloc_r+0xac>)
 800bb78:	6814      	ldr	r4, [r2, #0]
 800bb7a:	4621      	mov	r1, r4
 800bb7c:	b991      	cbnz	r1, 800bba4 <_malloc_r+0x54>
 800bb7e:	4c20      	ldr	r4, [pc, #128]	; (800bc00 <_malloc_r+0xb0>)
 800bb80:	6823      	ldr	r3, [r4, #0]
 800bb82:	b91b      	cbnz	r3, 800bb8c <_malloc_r+0x3c>
 800bb84:	4630      	mov	r0, r6
 800bb86:	f000 f83d 	bl	800bc04 <_sbrk_r>
 800bb8a:	6020      	str	r0, [r4, #0]
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	4630      	mov	r0, r6
 800bb90:	f000 f838 	bl	800bc04 <_sbrk_r>
 800bb94:	1c43      	adds	r3, r0, #1
 800bb96:	d124      	bne.n	800bbe2 <_malloc_r+0x92>
 800bb98:	230c      	movs	r3, #12
 800bb9a:	6033      	str	r3, [r6, #0]
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	f000 f862 	bl	800bc66 <__malloc_unlock>
 800bba2:	e7e4      	b.n	800bb6e <_malloc_r+0x1e>
 800bba4:	680b      	ldr	r3, [r1, #0]
 800bba6:	1b5b      	subs	r3, r3, r5
 800bba8:	d418      	bmi.n	800bbdc <_malloc_r+0x8c>
 800bbaa:	2b0b      	cmp	r3, #11
 800bbac:	d90f      	bls.n	800bbce <_malloc_r+0x7e>
 800bbae:	600b      	str	r3, [r1, #0]
 800bbb0:	50cd      	str	r5, [r1, r3]
 800bbb2:	18cc      	adds	r4, r1, r3
 800bbb4:	4630      	mov	r0, r6
 800bbb6:	f000 f856 	bl	800bc66 <__malloc_unlock>
 800bbba:	f104 000b 	add.w	r0, r4, #11
 800bbbe:	1d23      	adds	r3, r4, #4
 800bbc0:	f020 0007 	bic.w	r0, r0, #7
 800bbc4:	1ac3      	subs	r3, r0, r3
 800bbc6:	d0d3      	beq.n	800bb70 <_malloc_r+0x20>
 800bbc8:	425a      	negs	r2, r3
 800bbca:	50e2      	str	r2, [r4, r3]
 800bbcc:	e7d0      	b.n	800bb70 <_malloc_r+0x20>
 800bbce:	428c      	cmp	r4, r1
 800bbd0:	684b      	ldr	r3, [r1, #4]
 800bbd2:	bf16      	itet	ne
 800bbd4:	6063      	strne	r3, [r4, #4]
 800bbd6:	6013      	streq	r3, [r2, #0]
 800bbd8:	460c      	movne	r4, r1
 800bbda:	e7eb      	b.n	800bbb4 <_malloc_r+0x64>
 800bbdc:	460c      	mov	r4, r1
 800bbde:	6849      	ldr	r1, [r1, #4]
 800bbe0:	e7cc      	b.n	800bb7c <_malloc_r+0x2c>
 800bbe2:	1cc4      	adds	r4, r0, #3
 800bbe4:	f024 0403 	bic.w	r4, r4, #3
 800bbe8:	42a0      	cmp	r0, r4
 800bbea:	d005      	beq.n	800bbf8 <_malloc_r+0xa8>
 800bbec:	1a21      	subs	r1, r4, r0
 800bbee:	4630      	mov	r0, r6
 800bbf0:	f000 f808 	bl	800bc04 <_sbrk_r>
 800bbf4:	3001      	adds	r0, #1
 800bbf6:	d0cf      	beq.n	800bb98 <_malloc_r+0x48>
 800bbf8:	6025      	str	r5, [r4, #0]
 800bbfa:	e7db      	b.n	800bbb4 <_malloc_r+0x64>
 800bbfc:	20000560 	.word	0x20000560
 800bc00:	20000564 	.word	0x20000564

0800bc04 <_sbrk_r>:
 800bc04:	b538      	push	{r3, r4, r5, lr}
 800bc06:	4c06      	ldr	r4, [pc, #24]	; (800bc20 <_sbrk_r+0x1c>)
 800bc08:	2300      	movs	r3, #0
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	4608      	mov	r0, r1
 800bc0e:	6023      	str	r3, [r4, #0]
 800bc10:	f7f6 fd0e 	bl	8002630 <_sbrk>
 800bc14:	1c43      	adds	r3, r0, #1
 800bc16:	d102      	bne.n	800bc1e <_sbrk_r+0x1a>
 800bc18:	6823      	ldr	r3, [r4, #0]
 800bc1a:	b103      	cbz	r3, 800bc1e <_sbrk_r+0x1a>
 800bc1c:	602b      	str	r3, [r5, #0]
 800bc1e:	bd38      	pop	{r3, r4, r5, pc}
 800bc20:	20000f70 	.word	0x20000f70

0800bc24 <siprintf>:
 800bc24:	b40e      	push	{r1, r2, r3}
 800bc26:	b500      	push	{lr}
 800bc28:	b09c      	sub	sp, #112	; 0x70
 800bc2a:	ab1d      	add	r3, sp, #116	; 0x74
 800bc2c:	9002      	str	r0, [sp, #8]
 800bc2e:	9006      	str	r0, [sp, #24]
 800bc30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc34:	4809      	ldr	r0, [pc, #36]	; (800bc5c <siprintf+0x38>)
 800bc36:	9107      	str	r1, [sp, #28]
 800bc38:	9104      	str	r1, [sp, #16]
 800bc3a:	4909      	ldr	r1, [pc, #36]	; (800bc60 <siprintf+0x3c>)
 800bc3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc40:	9105      	str	r1, [sp, #20]
 800bc42:	6800      	ldr	r0, [r0, #0]
 800bc44:	9301      	str	r3, [sp, #4]
 800bc46:	a902      	add	r1, sp, #8
 800bc48:	f000 f868 	bl	800bd1c <_svfiprintf_r>
 800bc4c:	9b02      	ldr	r3, [sp, #8]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	701a      	strb	r2, [r3, #0]
 800bc52:	b01c      	add	sp, #112	; 0x70
 800bc54:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc58:	b003      	add	sp, #12
 800bc5a:	4770      	bx	lr
 800bc5c:	2000004c 	.word	0x2000004c
 800bc60:	ffff0208 	.word	0xffff0208

0800bc64 <__malloc_lock>:
 800bc64:	4770      	bx	lr

0800bc66 <__malloc_unlock>:
 800bc66:	4770      	bx	lr

0800bc68 <__ssputs_r>:
 800bc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc6c:	688e      	ldr	r6, [r1, #8]
 800bc6e:	429e      	cmp	r6, r3
 800bc70:	4682      	mov	sl, r0
 800bc72:	460c      	mov	r4, r1
 800bc74:	4690      	mov	r8, r2
 800bc76:	4699      	mov	r9, r3
 800bc78:	d837      	bhi.n	800bcea <__ssputs_r+0x82>
 800bc7a:	898a      	ldrh	r2, [r1, #12]
 800bc7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc80:	d031      	beq.n	800bce6 <__ssputs_r+0x7e>
 800bc82:	6825      	ldr	r5, [r4, #0]
 800bc84:	6909      	ldr	r1, [r1, #16]
 800bc86:	1a6f      	subs	r7, r5, r1
 800bc88:	6965      	ldr	r5, [r4, #20]
 800bc8a:	2302      	movs	r3, #2
 800bc8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc90:	fb95 f5f3 	sdiv	r5, r5, r3
 800bc94:	f109 0301 	add.w	r3, r9, #1
 800bc98:	443b      	add	r3, r7
 800bc9a:	429d      	cmp	r5, r3
 800bc9c:	bf38      	it	cc
 800bc9e:	461d      	movcc	r5, r3
 800bca0:	0553      	lsls	r3, r2, #21
 800bca2:	d530      	bpl.n	800bd06 <__ssputs_r+0x9e>
 800bca4:	4629      	mov	r1, r5
 800bca6:	f7ff ff53 	bl	800bb50 <_malloc_r>
 800bcaa:	4606      	mov	r6, r0
 800bcac:	b950      	cbnz	r0, 800bcc4 <__ssputs_r+0x5c>
 800bcae:	230c      	movs	r3, #12
 800bcb0:	f8ca 3000 	str.w	r3, [sl]
 800bcb4:	89a3      	ldrh	r3, [r4, #12]
 800bcb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcba:	81a3      	strh	r3, [r4, #12]
 800bcbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcc4:	463a      	mov	r2, r7
 800bcc6:	6921      	ldr	r1, [r4, #16]
 800bcc8:	f7ff fec8 	bl	800ba5c <memcpy>
 800bccc:	89a3      	ldrh	r3, [r4, #12]
 800bcce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bcd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcd6:	81a3      	strh	r3, [r4, #12]
 800bcd8:	6126      	str	r6, [r4, #16]
 800bcda:	6165      	str	r5, [r4, #20]
 800bcdc:	443e      	add	r6, r7
 800bcde:	1bed      	subs	r5, r5, r7
 800bce0:	6026      	str	r6, [r4, #0]
 800bce2:	60a5      	str	r5, [r4, #8]
 800bce4:	464e      	mov	r6, r9
 800bce6:	454e      	cmp	r6, r9
 800bce8:	d900      	bls.n	800bcec <__ssputs_r+0x84>
 800bcea:	464e      	mov	r6, r9
 800bcec:	4632      	mov	r2, r6
 800bcee:	4641      	mov	r1, r8
 800bcf0:	6820      	ldr	r0, [r4, #0]
 800bcf2:	f7ff febe 	bl	800ba72 <memmove>
 800bcf6:	68a3      	ldr	r3, [r4, #8]
 800bcf8:	1b9b      	subs	r3, r3, r6
 800bcfa:	60a3      	str	r3, [r4, #8]
 800bcfc:	6823      	ldr	r3, [r4, #0]
 800bcfe:	441e      	add	r6, r3
 800bd00:	6026      	str	r6, [r4, #0]
 800bd02:	2000      	movs	r0, #0
 800bd04:	e7dc      	b.n	800bcc0 <__ssputs_r+0x58>
 800bd06:	462a      	mov	r2, r5
 800bd08:	f000 fa88 	bl	800c21c <_realloc_r>
 800bd0c:	4606      	mov	r6, r0
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	d1e2      	bne.n	800bcd8 <__ssputs_r+0x70>
 800bd12:	6921      	ldr	r1, [r4, #16]
 800bd14:	4650      	mov	r0, sl
 800bd16:	f7ff fecd 	bl	800bab4 <_free_r>
 800bd1a:	e7c8      	b.n	800bcae <__ssputs_r+0x46>

0800bd1c <_svfiprintf_r>:
 800bd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd20:	461d      	mov	r5, r3
 800bd22:	898b      	ldrh	r3, [r1, #12]
 800bd24:	061f      	lsls	r7, r3, #24
 800bd26:	b09d      	sub	sp, #116	; 0x74
 800bd28:	4680      	mov	r8, r0
 800bd2a:	460c      	mov	r4, r1
 800bd2c:	4616      	mov	r6, r2
 800bd2e:	d50f      	bpl.n	800bd50 <_svfiprintf_r+0x34>
 800bd30:	690b      	ldr	r3, [r1, #16]
 800bd32:	b96b      	cbnz	r3, 800bd50 <_svfiprintf_r+0x34>
 800bd34:	2140      	movs	r1, #64	; 0x40
 800bd36:	f7ff ff0b 	bl	800bb50 <_malloc_r>
 800bd3a:	6020      	str	r0, [r4, #0]
 800bd3c:	6120      	str	r0, [r4, #16]
 800bd3e:	b928      	cbnz	r0, 800bd4c <_svfiprintf_r+0x30>
 800bd40:	230c      	movs	r3, #12
 800bd42:	f8c8 3000 	str.w	r3, [r8]
 800bd46:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4a:	e0c8      	b.n	800bede <_svfiprintf_r+0x1c2>
 800bd4c:	2340      	movs	r3, #64	; 0x40
 800bd4e:	6163      	str	r3, [r4, #20]
 800bd50:	2300      	movs	r3, #0
 800bd52:	9309      	str	r3, [sp, #36]	; 0x24
 800bd54:	2320      	movs	r3, #32
 800bd56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd5a:	2330      	movs	r3, #48	; 0x30
 800bd5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd60:	9503      	str	r5, [sp, #12]
 800bd62:	f04f 0b01 	mov.w	fp, #1
 800bd66:	4637      	mov	r7, r6
 800bd68:	463d      	mov	r5, r7
 800bd6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bd6e:	b10b      	cbz	r3, 800bd74 <_svfiprintf_r+0x58>
 800bd70:	2b25      	cmp	r3, #37	; 0x25
 800bd72:	d13e      	bne.n	800bdf2 <_svfiprintf_r+0xd6>
 800bd74:	ebb7 0a06 	subs.w	sl, r7, r6
 800bd78:	d00b      	beq.n	800bd92 <_svfiprintf_r+0x76>
 800bd7a:	4653      	mov	r3, sl
 800bd7c:	4632      	mov	r2, r6
 800bd7e:	4621      	mov	r1, r4
 800bd80:	4640      	mov	r0, r8
 800bd82:	f7ff ff71 	bl	800bc68 <__ssputs_r>
 800bd86:	3001      	adds	r0, #1
 800bd88:	f000 80a4 	beq.w	800bed4 <_svfiprintf_r+0x1b8>
 800bd8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd8e:	4453      	add	r3, sl
 800bd90:	9309      	str	r3, [sp, #36]	; 0x24
 800bd92:	783b      	ldrb	r3, [r7, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f000 809d 	beq.w	800bed4 <_svfiprintf_r+0x1b8>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bda0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bda4:	9304      	str	r3, [sp, #16]
 800bda6:	9307      	str	r3, [sp, #28]
 800bda8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdac:	931a      	str	r3, [sp, #104]	; 0x68
 800bdae:	462f      	mov	r7, r5
 800bdb0:	2205      	movs	r2, #5
 800bdb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bdb6:	4850      	ldr	r0, [pc, #320]	; (800bef8 <_svfiprintf_r+0x1dc>)
 800bdb8:	f7f4 fa0a 	bl	80001d0 <memchr>
 800bdbc:	9b04      	ldr	r3, [sp, #16]
 800bdbe:	b9d0      	cbnz	r0, 800bdf6 <_svfiprintf_r+0xda>
 800bdc0:	06d9      	lsls	r1, r3, #27
 800bdc2:	bf44      	itt	mi
 800bdc4:	2220      	movmi	r2, #32
 800bdc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bdca:	071a      	lsls	r2, r3, #28
 800bdcc:	bf44      	itt	mi
 800bdce:	222b      	movmi	r2, #43	; 0x2b
 800bdd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bdd4:	782a      	ldrb	r2, [r5, #0]
 800bdd6:	2a2a      	cmp	r2, #42	; 0x2a
 800bdd8:	d015      	beq.n	800be06 <_svfiprintf_r+0xea>
 800bdda:	9a07      	ldr	r2, [sp, #28]
 800bddc:	462f      	mov	r7, r5
 800bdde:	2000      	movs	r0, #0
 800bde0:	250a      	movs	r5, #10
 800bde2:	4639      	mov	r1, r7
 800bde4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bde8:	3b30      	subs	r3, #48	; 0x30
 800bdea:	2b09      	cmp	r3, #9
 800bdec:	d94d      	bls.n	800be8a <_svfiprintf_r+0x16e>
 800bdee:	b1b8      	cbz	r0, 800be20 <_svfiprintf_r+0x104>
 800bdf0:	e00f      	b.n	800be12 <_svfiprintf_r+0xf6>
 800bdf2:	462f      	mov	r7, r5
 800bdf4:	e7b8      	b.n	800bd68 <_svfiprintf_r+0x4c>
 800bdf6:	4a40      	ldr	r2, [pc, #256]	; (800bef8 <_svfiprintf_r+0x1dc>)
 800bdf8:	1a80      	subs	r0, r0, r2
 800bdfa:	fa0b f000 	lsl.w	r0, fp, r0
 800bdfe:	4318      	orrs	r0, r3
 800be00:	9004      	str	r0, [sp, #16]
 800be02:	463d      	mov	r5, r7
 800be04:	e7d3      	b.n	800bdae <_svfiprintf_r+0x92>
 800be06:	9a03      	ldr	r2, [sp, #12]
 800be08:	1d11      	adds	r1, r2, #4
 800be0a:	6812      	ldr	r2, [r2, #0]
 800be0c:	9103      	str	r1, [sp, #12]
 800be0e:	2a00      	cmp	r2, #0
 800be10:	db01      	blt.n	800be16 <_svfiprintf_r+0xfa>
 800be12:	9207      	str	r2, [sp, #28]
 800be14:	e004      	b.n	800be20 <_svfiprintf_r+0x104>
 800be16:	4252      	negs	r2, r2
 800be18:	f043 0302 	orr.w	r3, r3, #2
 800be1c:	9207      	str	r2, [sp, #28]
 800be1e:	9304      	str	r3, [sp, #16]
 800be20:	783b      	ldrb	r3, [r7, #0]
 800be22:	2b2e      	cmp	r3, #46	; 0x2e
 800be24:	d10c      	bne.n	800be40 <_svfiprintf_r+0x124>
 800be26:	787b      	ldrb	r3, [r7, #1]
 800be28:	2b2a      	cmp	r3, #42	; 0x2a
 800be2a:	d133      	bne.n	800be94 <_svfiprintf_r+0x178>
 800be2c:	9b03      	ldr	r3, [sp, #12]
 800be2e:	1d1a      	adds	r2, r3, #4
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	9203      	str	r2, [sp, #12]
 800be34:	2b00      	cmp	r3, #0
 800be36:	bfb8      	it	lt
 800be38:	f04f 33ff 	movlt.w	r3, #4294967295
 800be3c:	3702      	adds	r7, #2
 800be3e:	9305      	str	r3, [sp, #20]
 800be40:	4d2e      	ldr	r5, [pc, #184]	; (800befc <_svfiprintf_r+0x1e0>)
 800be42:	7839      	ldrb	r1, [r7, #0]
 800be44:	2203      	movs	r2, #3
 800be46:	4628      	mov	r0, r5
 800be48:	f7f4 f9c2 	bl	80001d0 <memchr>
 800be4c:	b138      	cbz	r0, 800be5e <_svfiprintf_r+0x142>
 800be4e:	2340      	movs	r3, #64	; 0x40
 800be50:	1b40      	subs	r0, r0, r5
 800be52:	fa03 f000 	lsl.w	r0, r3, r0
 800be56:	9b04      	ldr	r3, [sp, #16]
 800be58:	4303      	orrs	r3, r0
 800be5a:	3701      	adds	r7, #1
 800be5c:	9304      	str	r3, [sp, #16]
 800be5e:	7839      	ldrb	r1, [r7, #0]
 800be60:	4827      	ldr	r0, [pc, #156]	; (800bf00 <_svfiprintf_r+0x1e4>)
 800be62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be66:	2206      	movs	r2, #6
 800be68:	1c7e      	adds	r6, r7, #1
 800be6a:	f7f4 f9b1 	bl	80001d0 <memchr>
 800be6e:	2800      	cmp	r0, #0
 800be70:	d038      	beq.n	800bee4 <_svfiprintf_r+0x1c8>
 800be72:	4b24      	ldr	r3, [pc, #144]	; (800bf04 <_svfiprintf_r+0x1e8>)
 800be74:	bb13      	cbnz	r3, 800bebc <_svfiprintf_r+0x1a0>
 800be76:	9b03      	ldr	r3, [sp, #12]
 800be78:	3307      	adds	r3, #7
 800be7a:	f023 0307 	bic.w	r3, r3, #7
 800be7e:	3308      	adds	r3, #8
 800be80:	9303      	str	r3, [sp, #12]
 800be82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be84:	444b      	add	r3, r9
 800be86:	9309      	str	r3, [sp, #36]	; 0x24
 800be88:	e76d      	b.n	800bd66 <_svfiprintf_r+0x4a>
 800be8a:	fb05 3202 	mla	r2, r5, r2, r3
 800be8e:	2001      	movs	r0, #1
 800be90:	460f      	mov	r7, r1
 800be92:	e7a6      	b.n	800bde2 <_svfiprintf_r+0xc6>
 800be94:	2300      	movs	r3, #0
 800be96:	3701      	adds	r7, #1
 800be98:	9305      	str	r3, [sp, #20]
 800be9a:	4619      	mov	r1, r3
 800be9c:	250a      	movs	r5, #10
 800be9e:	4638      	mov	r0, r7
 800bea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bea4:	3a30      	subs	r2, #48	; 0x30
 800bea6:	2a09      	cmp	r2, #9
 800bea8:	d903      	bls.n	800beb2 <_svfiprintf_r+0x196>
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d0c8      	beq.n	800be40 <_svfiprintf_r+0x124>
 800beae:	9105      	str	r1, [sp, #20]
 800beb0:	e7c6      	b.n	800be40 <_svfiprintf_r+0x124>
 800beb2:	fb05 2101 	mla	r1, r5, r1, r2
 800beb6:	2301      	movs	r3, #1
 800beb8:	4607      	mov	r7, r0
 800beba:	e7f0      	b.n	800be9e <_svfiprintf_r+0x182>
 800bebc:	ab03      	add	r3, sp, #12
 800bebe:	9300      	str	r3, [sp, #0]
 800bec0:	4622      	mov	r2, r4
 800bec2:	4b11      	ldr	r3, [pc, #68]	; (800bf08 <_svfiprintf_r+0x1ec>)
 800bec4:	a904      	add	r1, sp, #16
 800bec6:	4640      	mov	r0, r8
 800bec8:	f3af 8000 	nop.w
 800becc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bed0:	4681      	mov	r9, r0
 800bed2:	d1d6      	bne.n	800be82 <_svfiprintf_r+0x166>
 800bed4:	89a3      	ldrh	r3, [r4, #12]
 800bed6:	065b      	lsls	r3, r3, #25
 800bed8:	f53f af35 	bmi.w	800bd46 <_svfiprintf_r+0x2a>
 800bedc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bede:	b01d      	add	sp, #116	; 0x74
 800bee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee4:	ab03      	add	r3, sp, #12
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	4622      	mov	r2, r4
 800beea:	4b07      	ldr	r3, [pc, #28]	; (800bf08 <_svfiprintf_r+0x1ec>)
 800beec:	a904      	add	r1, sp, #16
 800beee:	4640      	mov	r0, r8
 800bef0:	f000 f882 	bl	800bff8 <_printf_i>
 800bef4:	e7ea      	b.n	800becc <_svfiprintf_r+0x1b0>
 800bef6:	bf00      	nop
 800bef8:	0800e24c 	.word	0x0800e24c
 800befc:	0800e252 	.word	0x0800e252
 800bf00:	0800e256 	.word	0x0800e256
 800bf04:	00000000 	.word	0x00000000
 800bf08:	0800bc69 	.word	0x0800bc69

0800bf0c <_printf_common>:
 800bf0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf10:	4691      	mov	r9, r2
 800bf12:	461f      	mov	r7, r3
 800bf14:	688a      	ldr	r2, [r1, #8]
 800bf16:	690b      	ldr	r3, [r1, #16]
 800bf18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	bfb8      	it	lt
 800bf20:	4613      	movlt	r3, r2
 800bf22:	f8c9 3000 	str.w	r3, [r9]
 800bf26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf2a:	4606      	mov	r6, r0
 800bf2c:	460c      	mov	r4, r1
 800bf2e:	b112      	cbz	r2, 800bf36 <_printf_common+0x2a>
 800bf30:	3301      	adds	r3, #1
 800bf32:	f8c9 3000 	str.w	r3, [r9]
 800bf36:	6823      	ldr	r3, [r4, #0]
 800bf38:	0699      	lsls	r1, r3, #26
 800bf3a:	bf42      	ittt	mi
 800bf3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bf40:	3302      	addmi	r3, #2
 800bf42:	f8c9 3000 	strmi.w	r3, [r9]
 800bf46:	6825      	ldr	r5, [r4, #0]
 800bf48:	f015 0506 	ands.w	r5, r5, #6
 800bf4c:	d107      	bne.n	800bf5e <_printf_common+0x52>
 800bf4e:	f104 0a19 	add.w	sl, r4, #25
 800bf52:	68e3      	ldr	r3, [r4, #12]
 800bf54:	f8d9 2000 	ldr.w	r2, [r9]
 800bf58:	1a9b      	subs	r3, r3, r2
 800bf5a:	42ab      	cmp	r3, r5
 800bf5c:	dc28      	bgt.n	800bfb0 <_printf_common+0xa4>
 800bf5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bf62:	6822      	ldr	r2, [r4, #0]
 800bf64:	3300      	adds	r3, #0
 800bf66:	bf18      	it	ne
 800bf68:	2301      	movne	r3, #1
 800bf6a:	0692      	lsls	r2, r2, #26
 800bf6c:	d42d      	bmi.n	800bfca <_printf_common+0xbe>
 800bf6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf72:	4639      	mov	r1, r7
 800bf74:	4630      	mov	r0, r6
 800bf76:	47c0      	blx	r8
 800bf78:	3001      	adds	r0, #1
 800bf7a:	d020      	beq.n	800bfbe <_printf_common+0xb2>
 800bf7c:	6823      	ldr	r3, [r4, #0]
 800bf7e:	68e5      	ldr	r5, [r4, #12]
 800bf80:	f8d9 2000 	ldr.w	r2, [r9]
 800bf84:	f003 0306 	and.w	r3, r3, #6
 800bf88:	2b04      	cmp	r3, #4
 800bf8a:	bf08      	it	eq
 800bf8c:	1aad      	subeq	r5, r5, r2
 800bf8e:	68a3      	ldr	r3, [r4, #8]
 800bf90:	6922      	ldr	r2, [r4, #16]
 800bf92:	bf0c      	ite	eq
 800bf94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf98:	2500      	movne	r5, #0
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	bfc4      	itt	gt
 800bf9e:	1a9b      	subgt	r3, r3, r2
 800bfa0:	18ed      	addgt	r5, r5, r3
 800bfa2:	f04f 0900 	mov.w	r9, #0
 800bfa6:	341a      	adds	r4, #26
 800bfa8:	454d      	cmp	r5, r9
 800bfaa:	d11a      	bne.n	800bfe2 <_printf_common+0xd6>
 800bfac:	2000      	movs	r0, #0
 800bfae:	e008      	b.n	800bfc2 <_printf_common+0xb6>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	4652      	mov	r2, sl
 800bfb4:	4639      	mov	r1, r7
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	47c0      	blx	r8
 800bfba:	3001      	adds	r0, #1
 800bfbc:	d103      	bne.n	800bfc6 <_printf_common+0xba>
 800bfbe:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfc6:	3501      	adds	r5, #1
 800bfc8:	e7c3      	b.n	800bf52 <_printf_common+0x46>
 800bfca:	18e1      	adds	r1, r4, r3
 800bfcc:	1c5a      	adds	r2, r3, #1
 800bfce:	2030      	movs	r0, #48	; 0x30
 800bfd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bfd4:	4422      	add	r2, r4
 800bfd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bfda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bfde:	3302      	adds	r3, #2
 800bfe0:	e7c5      	b.n	800bf6e <_printf_common+0x62>
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	4622      	mov	r2, r4
 800bfe6:	4639      	mov	r1, r7
 800bfe8:	4630      	mov	r0, r6
 800bfea:	47c0      	blx	r8
 800bfec:	3001      	adds	r0, #1
 800bfee:	d0e6      	beq.n	800bfbe <_printf_common+0xb2>
 800bff0:	f109 0901 	add.w	r9, r9, #1
 800bff4:	e7d8      	b.n	800bfa8 <_printf_common+0x9c>
	...

0800bff8 <_printf_i>:
 800bff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bffc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c000:	460c      	mov	r4, r1
 800c002:	7e09      	ldrb	r1, [r1, #24]
 800c004:	b085      	sub	sp, #20
 800c006:	296e      	cmp	r1, #110	; 0x6e
 800c008:	4617      	mov	r7, r2
 800c00a:	4606      	mov	r6, r0
 800c00c:	4698      	mov	r8, r3
 800c00e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c010:	f000 80b3 	beq.w	800c17a <_printf_i+0x182>
 800c014:	d822      	bhi.n	800c05c <_printf_i+0x64>
 800c016:	2963      	cmp	r1, #99	; 0x63
 800c018:	d036      	beq.n	800c088 <_printf_i+0x90>
 800c01a:	d80a      	bhi.n	800c032 <_printf_i+0x3a>
 800c01c:	2900      	cmp	r1, #0
 800c01e:	f000 80b9 	beq.w	800c194 <_printf_i+0x19c>
 800c022:	2958      	cmp	r1, #88	; 0x58
 800c024:	f000 8083 	beq.w	800c12e <_printf_i+0x136>
 800c028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c02c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c030:	e032      	b.n	800c098 <_printf_i+0xa0>
 800c032:	2964      	cmp	r1, #100	; 0x64
 800c034:	d001      	beq.n	800c03a <_printf_i+0x42>
 800c036:	2969      	cmp	r1, #105	; 0x69
 800c038:	d1f6      	bne.n	800c028 <_printf_i+0x30>
 800c03a:	6820      	ldr	r0, [r4, #0]
 800c03c:	6813      	ldr	r3, [r2, #0]
 800c03e:	0605      	lsls	r5, r0, #24
 800c040:	f103 0104 	add.w	r1, r3, #4
 800c044:	d52a      	bpl.n	800c09c <_printf_i+0xa4>
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6011      	str	r1, [r2, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	da03      	bge.n	800c056 <_printf_i+0x5e>
 800c04e:	222d      	movs	r2, #45	; 0x2d
 800c050:	425b      	negs	r3, r3
 800c052:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c056:	486f      	ldr	r0, [pc, #444]	; (800c214 <_printf_i+0x21c>)
 800c058:	220a      	movs	r2, #10
 800c05a:	e039      	b.n	800c0d0 <_printf_i+0xd8>
 800c05c:	2973      	cmp	r1, #115	; 0x73
 800c05e:	f000 809d 	beq.w	800c19c <_printf_i+0x1a4>
 800c062:	d808      	bhi.n	800c076 <_printf_i+0x7e>
 800c064:	296f      	cmp	r1, #111	; 0x6f
 800c066:	d020      	beq.n	800c0aa <_printf_i+0xb2>
 800c068:	2970      	cmp	r1, #112	; 0x70
 800c06a:	d1dd      	bne.n	800c028 <_printf_i+0x30>
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	f043 0320 	orr.w	r3, r3, #32
 800c072:	6023      	str	r3, [r4, #0]
 800c074:	e003      	b.n	800c07e <_printf_i+0x86>
 800c076:	2975      	cmp	r1, #117	; 0x75
 800c078:	d017      	beq.n	800c0aa <_printf_i+0xb2>
 800c07a:	2978      	cmp	r1, #120	; 0x78
 800c07c:	d1d4      	bne.n	800c028 <_printf_i+0x30>
 800c07e:	2378      	movs	r3, #120	; 0x78
 800c080:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c084:	4864      	ldr	r0, [pc, #400]	; (800c218 <_printf_i+0x220>)
 800c086:	e055      	b.n	800c134 <_printf_i+0x13c>
 800c088:	6813      	ldr	r3, [r2, #0]
 800c08a:	1d19      	adds	r1, r3, #4
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	6011      	str	r1, [r2, #0]
 800c090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c098:	2301      	movs	r3, #1
 800c09a:	e08c      	b.n	800c1b6 <_printf_i+0x1be>
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	6011      	str	r1, [r2, #0]
 800c0a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c0a4:	bf18      	it	ne
 800c0a6:	b21b      	sxthne	r3, r3
 800c0a8:	e7cf      	b.n	800c04a <_printf_i+0x52>
 800c0aa:	6813      	ldr	r3, [r2, #0]
 800c0ac:	6825      	ldr	r5, [r4, #0]
 800c0ae:	1d18      	adds	r0, r3, #4
 800c0b0:	6010      	str	r0, [r2, #0]
 800c0b2:	0628      	lsls	r0, r5, #24
 800c0b4:	d501      	bpl.n	800c0ba <_printf_i+0xc2>
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	e002      	b.n	800c0c0 <_printf_i+0xc8>
 800c0ba:	0668      	lsls	r0, r5, #25
 800c0bc:	d5fb      	bpl.n	800c0b6 <_printf_i+0xbe>
 800c0be:	881b      	ldrh	r3, [r3, #0]
 800c0c0:	4854      	ldr	r0, [pc, #336]	; (800c214 <_printf_i+0x21c>)
 800c0c2:	296f      	cmp	r1, #111	; 0x6f
 800c0c4:	bf14      	ite	ne
 800c0c6:	220a      	movne	r2, #10
 800c0c8:	2208      	moveq	r2, #8
 800c0ca:	2100      	movs	r1, #0
 800c0cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0d0:	6865      	ldr	r5, [r4, #4]
 800c0d2:	60a5      	str	r5, [r4, #8]
 800c0d4:	2d00      	cmp	r5, #0
 800c0d6:	f2c0 8095 	blt.w	800c204 <_printf_i+0x20c>
 800c0da:	6821      	ldr	r1, [r4, #0]
 800c0dc:	f021 0104 	bic.w	r1, r1, #4
 800c0e0:	6021      	str	r1, [r4, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d13d      	bne.n	800c162 <_printf_i+0x16a>
 800c0e6:	2d00      	cmp	r5, #0
 800c0e8:	f040 808e 	bne.w	800c208 <_printf_i+0x210>
 800c0ec:	4665      	mov	r5, ip
 800c0ee:	2a08      	cmp	r2, #8
 800c0f0:	d10b      	bne.n	800c10a <_printf_i+0x112>
 800c0f2:	6823      	ldr	r3, [r4, #0]
 800c0f4:	07db      	lsls	r3, r3, #31
 800c0f6:	d508      	bpl.n	800c10a <_printf_i+0x112>
 800c0f8:	6923      	ldr	r3, [r4, #16]
 800c0fa:	6862      	ldr	r2, [r4, #4]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	bfde      	ittt	le
 800c100:	2330      	movle	r3, #48	; 0x30
 800c102:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c106:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c10a:	ebac 0305 	sub.w	r3, ip, r5
 800c10e:	6123      	str	r3, [r4, #16]
 800c110:	f8cd 8000 	str.w	r8, [sp]
 800c114:	463b      	mov	r3, r7
 800c116:	aa03      	add	r2, sp, #12
 800c118:	4621      	mov	r1, r4
 800c11a:	4630      	mov	r0, r6
 800c11c:	f7ff fef6 	bl	800bf0c <_printf_common>
 800c120:	3001      	adds	r0, #1
 800c122:	d14d      	bne.n	800c1c0 <_printf_i+0x1c8>
 800c124:	f04f 30ff 	mov.w	r0, #4294967295
 800c128:	b005      	add	sp, #20
 800c12a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c12e:	4839      	ldr	r0, [pc, #228]	; (800c214 <_printf_i+0x21c>)
 800c130:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c134:	6813      	ldr	r3, [r2, #0]
 800c136:	6821      	ldr	r1, [r4, #0]
 800c138:	1d1d      	adds	r5, r3, #4
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	6015      	str	r5, [r2, #0]
 800c13e:	060a      	lsls	r2, r1, #24
 800c140:	d50b      	bpl.n	800c15a <_printf_i+0x162>
 800c142:	07ca      	lsls	r2, r1, #31
 800c144:	bf44      	itt	mi
 800c146:	f041 0120 	orrmi.w	r1, r1, #32
 800c14a:	6021      	strmi	r1, [r4, #0]
 800c14c:	b91b      	cbnz	r3, 800c156 <_printf_i+0x15e>
 800c14e:	6822      	ldr	r2, [r4, #0]
 800c150:	f022 0220 	bic.w	r2, r2, #32
 800c154:	6022      	str	r2, [r4, #0]
 800c156:	2210      	movs	r2, #16
 800c158:	e7b7      	b.n	800c0ca <_printf_i+0xd2>
 800c15a:	064d      	lsls	r5, r1, #25
 800c15c:	bf48      	it	mi
 800c15e:	b29b      	uxthmi	r3, r3
 800c160:	e7ef      	b.n	800c142 <_printf_i+0x14a>
 800c162:	4665      	mov	r5, ip
 800c164:	fbb3 f1f2 	udiv	r1, r3, r2
 800c168:	fb02 3311 	mls	r3, r2, r1, r3
 800c16c:	5cc3      	ldrb	r3, [r0, r3]
 800c16e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c172:	460b      	mov	r3, r1
 800c174:	2900      	cmp	r1, #0
 800c176:	d1f5      	bne.n	800c164 <_printf_i+0x16c>
 800c178:	e7b9      	b.n	800c0ee <_printf_i+0xf6>
 800c17a:	6813      	ldr	r3, [r2, #0]
 800c17c:	6825      	ldr	r5, [r4, #0]
 800c17e:	6961      	ldr	r1, [r4, #20]
 800c180:	1d18      	adds	r0, r3, #4
 800c182:	6010      	str	r0, [r2, #0]
 800c184:	0628      	lsls	r0, r5, #24
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	d501      	bpl.n	800c18e <_printf_i+0x196>
 800c18a:	6019      	str	r1, [r3, #0]
 800c18c:	e002      	b.n	800c194 <_printf_i+0x19c>
 800c18e:	066a      	lsls	r2, r5, #25
 800c190:	d5fb      	bpl.n	800c18a <_printf_i+0x192>
 800c192:	8019      	strh	r1, [r3, #0]
 800c194:	2300      	movs	r3, #0
 800c196:	6123      	str	r3, [r4, #16]
 800c198:	4665      	mov	r5, ip
 800c19a:	e7b9      	b.n	800c110 <_printf_i+0x118>
 800c19c:	6813      	ldr	r3, [r2, #0]
 800c19e:	1d19      	adds	r1, r3, #4
 800c1a0:	6011      	str	r1, [r2, #0]
 800c1a2:	681d      	ldr	r5, [r3, #0]
 800c1a4:	6862      	ldr	r2, [r4, #4]
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	f7f4 f811 	bl	80001d0 <memchr>
 800c1ae:	b108      	cbz	r0, 800c1b4 <_printf_i+0x1bc>
 800c1b0:	1b40      	subs	r0, r0, r5
 800c1b2:	6060      	str	r0, [r4, #4]
 800c1b4:	6863      	ldr	r3, [r4, #4]
 800c1b6:	6123      	str	r3, [r4, #16]
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1be:	e7a7      	b.n	800c110 <_printf_i+0x118>
 800c1c0:	6923      	ldr	r3, [r4, #16]
 800c1c2:	462a      	mov	r2, r5
 800c1c4:	4639      	mov	r1, r7
 800c1c6:	4630      	mov	r0, r6
 800c1c8:	47c0      	blx	r8
 800c1ca:	3001      	adds	r0, #1
 800c1cc:	d0aa      	beq.n	800c124 <_printf_i+0x12c>
 800c1ce:	6823      	ldr	r3, [r4, #0]
 800c1d0:	079b      	lsls	r3, r3, #30
 800c1d2:	d413      	bmi.n	800c1fc <_printf_i+0x204>
 800c1d4:	68e0      	ldr	r0, [r4, #12]
 800c1d6:	9b03      	ldr	r3, [sp, #12]
 800c1d8:	4298      	cmp	r0, r3
 800c1da:	bfb8      	it	lt
 800c1dc:	4618      	movlt	r0, r3
 800c1de:	e7a3      	b.n	800c128 <_printf_i+0x130>
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	464a      	mov	r2, r9
 800c1e4:	4639      	mov	r1, r7
 800c1e6:	4630      	mov	r0, r6
 800c1e8:	47c0      	blx	r8
 800c1ea:	3001      	adds	r0, #1
 800c1ec:	d09a      	beq.n	800c124 <_printf_i+0x12c>
 800c1ee:	3501      	adds	r5, #1
 800c1f0:	68e3      	ldr	r3, [r4, #12]
 800c1f2:	9a03      	ldr	r2, [sp, #12]
 800c1f4:	1a9b      	subs	r3, r3, r2
 800c1f6:	42ab      	cmp	r3, r5
 800c1f8:	dcf2      	bgt.n	800c1e0 <_printf_i+0x1e8>
 800c1fa:	e7eb      	b.n	800c1d4 <_printf_i+0x1dc>
 800c1fc:	2500      	movs	r5, #0
 800c1fe:	f104 0919 	add.w	r9, r4, #25
 800c202:	e7f5      	b.n	800c1f0 <_printf_i+0x1f8>
 800c204:	2b00      	cmp	r3, #0
 800c206:	d1ac      	bne.n	800c162 <_printf_i+0x16a>
 800c208:	7803      	ldrb	r3, [r0, #0]
 800c20a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c20e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c212:	e76c      	b.n	800c0ee <_printf_i+0xf6>
 800c214:	0800e25d 	.word	0x0800e25d
 800c218:	0800e26e 	.word	0x0800e26e

0800c21c <_realloc_r>:
 800c21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21e:	4607      	mov	r7, r0
 800c220:	4614      	mov	r4, r2
 800c222:	460e      	mov	r6, r1
 800c224:	b921      	cbnz	r1, 800c230 <_realloc_r+0x14>
 800c226:	4611      	mov	r1, r2
 800c228:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c22c:	f7ff bc90 	b.w	800bb50 <_malloc_r>
 800c230:	b922      	cbnz	r2, 800c23c <_realloc_r+0x20>
 800c232:	f7ff fc3f 	bl	800bab4 <_free_r>
 800c236:	4625      	mov	r5, r4
 800c238:	4628      	mov	r0, r5
 800c23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c23c:	f000 f814 	bl	800c268 <_malloc_usable_size_r>
 800c240:	42a0      	cmp	r0, r4
 800c242:	d20f      	bcs.n	800c264 <_realloc_r+0x48>
 800c244:	4621      	mov	r1, r4
 800c246:	4638      	mov	r0, r7
 800c248:	f7ff fc82 	bl	800bb50 <_malloc_r>
 800c24c:	4605      	mov	r5, r0
 800c24e:	2800      	cmp	r0, #0
 800c250:	d0f2      	beq.n	800c238 <_realloc_r+0x1c>
 800c252:	4631      	mov	r1, r6
 800c254:	4622      	mov	r2, r4
 800c256:	f7ff fc01 	bl	800ba5c <memcpy>
 800c25a:	4631      	mov	r1, r6
 800c25c:	4638      	mov	r0, r7
 800c25e:	f7ff fc29 	bl	800bab4 <_free_r>
 800c262:	e7e9      	b.n	800c238 <_realloc_r+0x1c>
 800c264:	4635      	mov	r5, r6
 800c266:	e7e7      	b.n	800c238 <_realloc_r+0x1c>

0800c268 <_malloc_usable_size_r>:
 800c268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c26c:	1f18      	subs	r0, r3, #4
 800c26e:	2b00      	cmp	r3, #0
 800c270:	bfbc      	itt	lt
 800c272:	580b      	ldrlt	r3, [r1, r0]
 800c274:	18c0      	addlt	r0, r0, r3
 800c276:	4770      	bx	lr

0800c278 <_init>:
 800c278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c27a:	bf00      	nop
 800c27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c27e:	bc08      	pop	{r3}
 800c280:	469e      	mov	lr, r3
 800c282:	4770      	bx	lr

0800c284 <_fini>:
 800c284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c286:	bf00      	nop
 800c288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c28a:	bc08      	pop	{r3}
 800c28c:	469e      	mov	lr, r3
 800c28e:	4770      	bx	lr
>>>>>>> 980dbab06067b91195ab3f46dd71bf1033aebf08
